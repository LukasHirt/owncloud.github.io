'use strict';(function(){const indexCfg={};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create(indexCfg);window.geekdocSearchIndex=index;index.add({'id':0,'href':'/clients/web/','title':"Phoenix",'content':"This is the next generation ownCloud frontend.\n"});index.add({'id':1,'href':'/ocis/','title':"Infinite Scale",'content':"This tool provides a single entrypoint for the whole ownCloud Infinite Scale stack.\n  mermaid.initialize({ flowchart: { useMaxWidth: true } });  graph TD ocis-proxy -- ocis-konnectd \u0026 ocis-phoenix \u0026 ocis-thumbnails \u0026 ocis-ocs \u0026 ocis-webdav ocis-phoenix -- ocis-reva-fronted ocis-reva-fronted -- ocis-reva-gateway ocis-konnectd -- ocis-glauth ocis-reva-gateway -- ocis-reva-users ocis-reva-gateway -- ocis-reva-authbasic ocis-reva-gateway -- ocis-reva-auth-bearer ocis-reva-gateway -- ocis-reva-sharing ocis-reva-gateway -- ocis-reva-storage-home-* ocis-reva-storage-home-* -- ocis-reva-storage-home-*-data ocis-reva-sharing -- redis "});index.add({'id':2,'href':'/extensions/ocis_proxy/about/','title':"About",'content':"This service provides an proxy service that routes requests to the correct services.\n"});index.add({'id':3,'href':'/extensions/ocis_accounts/','title':"Accounts",'content':"This service provides an inter-operable accounts service that operates on the filesystem by default.\n"});index.add({'id':4,'href':'/clients/web/getting-started/','title':"Getting Started",'content':"    Installation  Docker Binaries Source code   Setting up backend and running Running     Installation Docker TBD\nBinaries TBD\nSource code The source code is hosted at https://github.com/owncloud/phoenix Please refer to the build documentation for Phoenix.\nSetting up backend and running Phoenix can run against either ownCloud 10 as backend or OCIS. Depending which one you chose, please check the matching section:\n Setting up with ownCloud as backend Setting up with OCIS as backend  Running  Running with ownCloud as backend Running with OCIS as backend  "});index.add({'id':5,'href':'/extensions/ocis_hello/getting-started/','title':"Getting Started",'content':"    Installation  Docker Binaries   Configuration  Envrionment variables  Global Server Health   Commandline flags  Global Server Health   Configuration file   Usage  Server Health   Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker TBD\nBinaries TBD\nConfiguration We provide overall three different variants of configuration. The variant based on environment variables and commandline flags are split up into global values and command-specific values.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nGlobal  HELLO_CONFIG_FILE Path to config file, empty default value HELLO_LOG_LEVEL Set logging level, defaults to info HELLO_LOG_COLOR Enable colored logging, defaults to true HELLO_LOG_PRETTY Enable pretty logging, defaults to true  Server  HELLO_TRACING_ENABLED Enable sending traces, defaults to false HELLO_TRACING_TYPE Tracing backend type, defaults to jaeger HELLO_TRACING_ENDPOINT Endpoint for the agent, empty default value HELLO_TRACING_COLLECTOR Endpoint for the collector, empty default value HELLO_TRACING_SERVICE Service name for tracing, defaults to hello HELLO_DEBUG_ADDR Address to bind debug server, defaults to 0.0.0.0:9109 HELLO_DEBUG_TOKEN Token to grant metrics access, empty default value HELLO_DEBUG_PPROF Enable pprof debugging, defaults to false HELLO_DEBUG_ZPAGES Enable zpages debugging, defaults to false HELLO_HTTP_ADDR Address to bind http server, defaults to 0.0.0.0:9105 HELLO_HTTP_ROOT Root path of http server, defaults to / HELLO_GRPC_ADDR Address to bind grpc server, defaults to 0.0.0.0:9106 HELLO_ASSET_PATH Path to custom assets, empty default value  Health  HELLO_DEBUG_ADDR Address to debug endpoint, defaults to 0.0.0.0:9109  Commandline flags If you prefer to configure the service with commandline flags you can see the available variables below.\nGlobal  \u0026ndash;config-file Path to config file, empty default value \u0026ndash;log-level Set logging level, defaults to info \u0026ndash;log-color Enable colored logging, defaults to true \u0026ndash;log-pretty Enable pretty logging, defaults to true  Server  \u0026ndash;tracing-enabled Enable sending traces, defaults to false \u0026ndash;tracing-type Tracing backend type, defaults to jaeger \u0026ndash;tracing-endpoint Endpoint for the agent, empty default value \u0026ndash;tracing-collector Endpoint for the collector, empty default value \u0026ndash;tracing-service Service name for tracing, defaults to hello \u0026ndash;debug-addr Address to bind debug server, defaults to 0.0.0.0:9109 \u0026ndash;debug-token Token to grant metrics access, empty default value \u0026ndash;debug-pprof Enable pprof debugging, defaults to false \u0026ndash;debug-zpages Enable zpages debugging, defaults to false \u0026ndash;http-addr Address to bind http server, defaults to 0.0.0.0:9105 \u0026ndash;http-root Root path of http server, defaults to / \u0026ndash;grpc-addr Address to bind grpc server, defaults to 0.0.0.0:9106 \u0026ndash;asset-path Path to custom assets, empty default value  Health  \u0026ndash;debug-addr Address to debug endpoint, defaults to 0.0.0.0:9109  Configuration file So far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/hello.yml, ${HOME}/.ocis/hello.yml or $(pwd)/config/hello.yml.\nUsage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis-hello --help.\nServer The server command is used to start the http and debug server on two addresses within a single process. The http server is serving the general webservice while the debug server is used for health check, readiness check and to server the metrics mentioned below. For further help please execute:\nocis-hello server --help Health The health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\nocis-hello health --help Metrics This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which got to be configured through one of the flag --debug-token or the environment variable HELLO_DEBUG_TOKEN mentioned above. By default the metrics endpoint is bound to http://0.0.0.0:9109/metrics.\n go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program\u0026rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  "});index.add({'id':6,'href':'/extensions/ocis_konnectd/getting-started/','title':"Getting Started",'content':"    Installation  Docker Binaries   Usage  Server Health   Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker Docker images for ocis-reva are hosted on https://hub.docker.com/r/owncloud/ocis-konnectd.\nThe latest tag always reflects the current master branch.\ndocker pull owncloud/ocis-konnectd Binaries The pre-built binaries for different platforms are downloadable at https://download.owncloud.com/ocis/ocis-konnectd/ . Specific releases are organized in separate folders. They are in sync which every release tag on GitHub. The binaries from the current master branch can be found in https://download.owncloud.com/ocis/ocis-konnectd/testing/\ncurl https://download.owncloud.com/ocis/ocis-konnectd/1.0.0-beta1/ocis-konnectd-1.0.0-beta1-darwin-amd64 --output ocis-konnectd chmod +x ocis-konnectd ./ocis-konnectd server Usage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis-konnectd --help.\nServer The server command is used to start the http and debug server on two addresses within a single process. The http server is serving the general webservice while the debug server is used for health check, readiness check and to server the metrics mentioned below. For further help please execute:\nocis-konnectd server --help Health The health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\nocis-konnectd health --help Metrics This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which got to be configured through one of the flag --debug-token or the environment variable KONNECTD_DEBUG_TOKEN mentioned above. By default the metrics endpoint is bound to http://0.0.0.0:9134/metrics.\n go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program\u0026rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  "});index.add({'id':7,'href':'/extensions/ocis_glauth/','title':"GLAuth",'content':"This service provides a simple glauth world API which can be used by clients or other extensions.\n"});index.add({'id':8,'href':'/extensions/ocis_phoenix/','title':"Phoenix",'content':"This service embeds Phoenix to provide a UI for ownCloud Infinite Scale.\n"});index.add({'id':9,'href':'/extensions/ocis_reva/','title':"Reva",'content':"This service provides an ocis extension that wraps reva and adds an opinionated configuration to it.\n"});index.add({'id':10,'href':'/extensions/ocis_settings/','title':"Settings",'content':"Abstract When using oCIS, the requirement to store settings arises. This extension provides functionality for other extensions to register new settings within oCIS. It is responsible for storing the respective settings values as well.\nFor ease of use, this extension provides an ocis-web extension which allows users to change their settings values. Please refer to the ocis-web extension docs for running ocis-web extensions.\n  mermaid.initialize({ flowchart: { useMaxWidth: true } });  graph TD subgraph ow[ocis-web] ows[ocis-web-settings] owc[ocis-web-core] end ows ---|\"listSettingsBundles(),\nlistSettingsValues(),\nsaveSettingsValue(value)\"| os[ocis-settings] owc ---|\"listSettingsValues()\ngetSettingsValue(id)\"| sdk[oC SDK] sdk --- sdks{ocis-settings\navailable?} sdks ---|\"yes\"| os sdks ---|\"no\"| defaults[Use set of\ndefault values] oa[oCIS extensions\ne.g. ocis-accounts] ---|\"saveSettingsBundle(bundle),\ngetSettingsValue(id)\"| os The diagram shows how the settings service integrates into oCIS: Settings management:\n oCIS extensions can register settings bundles with the ocis-settings service. The settings frontend can be plugged into ocis-web, showing generated forms for changing settings values as a user.  Settings usage:\n Extensions can query ocis-settings for settings values of a user. The ownCloud SDK, used as a data abstraction layer for ocis-web, will query ocis-settings for settings values of a user, if it\u0026rsquo;s available. The SDK uses sensible defaults when ocis-settings is not part of the setup.  For compatibility with ownCloud 10, a migration of ownCloud 10 settings into the storage of ocis-settings will be available.\n"});index.add({'id':11,'href':'/extensions/ocis_thumbnails/','title':"Thumbnails",'content':"This service provides an ocis extensions which generates thumbnails for image files.\n"});index.add({'id':12,'href':'/ocis/getting-started/','title':"Getting Started",'content':"    Installation  Docker  Dependencies Docker compose   Binaries  Dependencies     Usage  Server Health   Quickstart for Developers Runtime Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker Docker images for ocis are hosted on https://hub.docker.com/r/owncloud/ocis.\nThe latest tag always reflects the current master branch.\ndocker pull owncloud/ocis Dependencies  Running ocis currently needs a working Redis caching server The default storage location in the container is /var/tmp/reva/data. You may want to create a volume to persist the files in the primary storage  Docker compose You can use our docker-compose playground example to run ocis with dependencies with a single command in a docker network.\ngit clone git@github.com:owncloud-docker/compose-playground.git cd compose-playground/ocis docker-compose -f ocis.yml -f ../cache/redis-ocis.yml up Binaries The pre-built binaries for different platforms are downloadable at https://download.owncloud.com/ocis/ocis/ . Specific releases are organized in separate folders. They are in sync which every release tag on GitHub. The binaries from the current master branch can be found in https://download.owncloud.com/ocis/ocis/testing/\ncurl https://download.owncloud.com/ocis/ocis/1.0.0-beta1/ocis-1.0.0-beta1-darwin-amd64 --output ocis chmod +x ocis ./ocis server Dependencies  Running ocis currently needs a working Redis caching server The default promary storage location is /var/tmp/reva/data. You can change that value by configuration.  Usage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis --help.\nServer The server command is used to start the http and debug server on two addresses within a single process. The http server is serving the general webservice while the debug server is used for health check, readiness check and to server the metrics mentioned below. For further help please execute:\nocis server --help Health The health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\nocis health --help Quickstart for Developers Following https://github.com/owncloud/ocis#development\ngit clone https://github.com/owncloud/ocis.git cd ocis make generate build Open https://localhost:9200 and login using one of the demo accounts:\neinstein:relativity marie:radioactivity feynman:superfluidity Runtime Included with the ocis binary is embedded a go-micro runtime that is in charge of starting services as a fork of the master process. This provides complete control over the services. Ocis extensions can be added as part of this runtime.\n./bin/ocis micro This will currently boot:\ncom.owncloud.api com.owncloud.http.broker com.owncloud.proxy com.owncloud.registry com.owncloud.router com.owncloud.runtime com.owncloud.web go.micro.http.broker Further ocis extensions can be added to the runtime via the ocis command like:\n./bin/ocis hello Which will register:\ncom.owncloud.web.hello com.owncloud.api.hello To the list of available services.\nMetrics This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which got to be configured through one of the flag --debug-token or the environment variable OCIS_DEBUG_TOKEN mentioned above. By default the metrics endpoint is bound to http://0.0.0.0:8001/metrics.\n go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program\u0026rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  "});index.add({'id':13,'href':'/extensions/ocis_proxy/getting-started/','title':"Getting Started",'content':"    Installation  Docker Binaries   Usage  Server       Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker Docker images for ocis-reva are hosted on https://hub.docker.com/r/owncloud/ocis-proxy.\nThe latest tag always reflects the current master branch.\ndocker pull owncloud/ocis-proxy Binaries The pre-built binaries for different platforms are downloadable at https://download.owncloud.com/ocis/ocis-proxy/ . Specific releases are organized in separate folders. They are in sync which every release tag on GitHub. The binaries from the current master branch can be found in https://download.owncloud.com/ocis/ocis-proxy/testing/\ncurl https://download.owncloud.com/ocis/ocis-proxy/1.0.0-beta1/ocis-proxy-1.0.0-beta1-darwin-amd64 --output ocis-proxy chmod +x ocis-proxy ./ocis-proxy server Usage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis-proxy --help.\nServer The server command is used to start the http server. For further help please execute:\nocis-proxy server --help "});index.add({'id':14,'href':'/extensions/ocis_reva/getting-started/','title':"Getting Started",'content':"    Installation  Docker  Dependencies   Binaries  Dependencies     Usage  Health       Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker Docker images for ocis-reva are hosted on https://hub.docker.com/r/owncloud/ocis-reva.\nThe latest tag always reflects the current master branch.\ndocker pull owncloud/ocis-reva Dependencies  Running ocis-reva currently needs a working Redis caching server The default storage location in the container is /var/tmp/reva/data. You may want to create a volume to persist the files in the primary storage  Binaries The pre-built binaries for different platforms are downloadable at https://download.owncloud.com/ocis/ocis-reva/ . Specific releases are organized in separate folders. They are in sync which every release tag on GitHub. The binaries from the current master branch can be found in https://download.owncloud.com/ocis/ocis-reva/testing/\ncurl https://download.owncloud.com/ocis/ocis/1.0.0-beta1/ocis-reva-1.0.0-beta1-darwin-amd64 --output ocis-reva chmod +x ocis ./ocis-reva sharing Dependencies  Running ocis currently needs a working Redis caching server The default promary storage location is /var/tmp/reva/data. You can change that value by configuration.  Usage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis-reva --help.\nHealth The health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\nocis-reva health --help "});index.add({'id':15,'href':'/ocis/basic-remote-setup/','title':"Basic Remote Setup",'content':"    Use the binary  Add your hostname to the idp config Start the ocis fullstack server   Use Docker Compose     Out of the box the ocis single binary and the owncloud/ocis docker image are configured to run on localhost for quick testing and development.\nIf you need to access ocis on a VM or a remote machine e.g when testing a mobile client you need to configure ocis to run on a different host.\nUse the binary If you start the ocis fullstack for the first time with ./bin/ocis server it will generate a file identifier-registration.yml in the config folder relative to its location. This file is used to configure the clients for the built-in Identity Provider.\nOutdated version\nThis file identifier-registration.yml will only be generated if there is no such file in place. You could miss updates on this file.  Add your hostname to the idp config Let us assume your-host is your remote domain name or IP adress. In this example we do not change the default port (9200). But this could be changed to another port.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  # OpenID Connect client registry.clients:- id:phoenixname:ownCloudwebappapplication_type:webinsecure:yestrusted:yesredirect_uris:- http://localhost:9100/oidc-callback.html- http://localhost:9100/- https://localhost:9200/- https://localhost:9200/oidc-callback.html- https://your-host:9200/- https://your-host:9200/oidc-callback.htmlorigins:- http://localhost:9100- https://localhost:9200- https://your-host:9200/  Start the ocis fullstack server You need to configure your-host in some services to provide the needed public resources. oCIS currently needs a running Redis Server reachable locally on the machine at the default port (localhost:6379). You can change this using the following option REVA_STORAGE_OWNCLOUD_REDIS_ADDR=some-host:6379.\nPROXY_HTTP_ADDR=0.0.0.0:9200 \\ KONNECTD_ISS=https://your-host:9200 \\ REVA_OIDC_ISSUER=https://your-host:9200 \\ PHOENIX_OIDC_AUTHORITY=https://your-host:9200 \\ PHOENIX_WEB_CONFIG_SERVER=https://your-host:9200 \\ PHOENIX_OIDC_METADATA_URL=https://your-host:9200/.well-known/openid-configuration \\ PROXY_TRANSPORT_TLS_KEY=./certs/your-host.key \\ PROXY_TRANSPORT_TLS_CERT=./certs/your-host.crt \\ KONNECTD_TLS=0 \\ ./bin/ocis server For more configuration options check the configuration secion in ocis and every ocis extension.\nTlS Certificate\nIn this example, we are replacing the default self signed cert with a CA signed one to avoid the certificate warning when accessing the login page.  Use Docker Compose We are using our docker compose playground as a repository to share snippets that make our test setups easier and more aligned.\nYou can start oCIS with docker very easily on a different host using this snippet.\nLet us assume your local IP is 192.168.103.195\ngit clone https://github.com/owncloud-docker/compose-playground.git cd compose-playground/ocis sed -i -e \u0026#39;s/your-url/192.168.103.195/g\u0026#39; config/identifier-registration.yml cat \u0026lt;\u0026lt; EOF \u0026gt; .env OCIS_BASE_URL=192.168.103.195 OCIS_HTTP_PORT=9200 OCIS_DOCKER_TAG=latest EOF docker-compose -f ocis.yml -f ../cache/redis-ocis.yml up -d curl -k https://192.168.103.195:9200/status.php "});index.add({'id':16,'href':'/ocis/configuration/','title':"Configuration",'content':"    Configuration  Configuration using config files Envrionment variables Commandline flags   Root Command Sub Commands  ocis health ocis server List of available Extension subcommands  ocis graph ocis graph-explorer ocis phoenix ocis reva-storage-oc-data ocis reva-auth-basic ocis glauth ocis reva-storage-eos-data ocis hello ocis ocs ocis reva-storage-eos ocis reva-storage-root ocis reva-auth-bearer ocis webdav ocis reva-gateway ocis reva-frontend ocis reva-storage-home-data ocis konnectd ocis reva-users ocis proxy ocis reva-sharing ocis reva-storage-home ocis reva-storage-oc ocis thumbnails         Configuration oCIS Single Binary is not responsible for configuring extensions. Instead, each extension could either be configured by environment variables, cli flags or config files.\nEach extension has its dedicated documentation page (e.g. https://owncloud.github.io/extensions/ocis_proxy/configuration) which lists all possible configurations. Config files and environment variables are picked up if you use the ./bin/ocis server command within the oCIS single binary. Command line flags must be set explicitly on the extensions subcommands.\nConfiguration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nRoot Command ownCloud Infinite Scale Stack\nUsage: ocis [global options] command [command options] [arguments...]\n \u0026ndash;config-file | $OCIS_CONFIG_FILE Path to config file. \u0026ndash;log-level | $OCIS_LOG_LEVEL Set logging level. Default: info. \u0026ndash;log-pretty | $OCIS_LOG_PRETTY Enable pretty logging. Default: true. \u0026ndash;log-color | $OCIS_LOG_COLOR Enable colored logging. Default: true.  Sub Commands ocis health Check health status\nUsage: ocis health [command options] [arguments...]\n \u0026ndash;debug-addr | $OCIS_DEBUG_ADDR Address to debug endpoint. Default: 0.0.0.0:9010.  ocis server Start fullstack server\nUsage: ocis server [command options] [arguments...]\n \u0026ndash;tracing-enabled | $OCIS_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $OCIS_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $OCIS_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $OCIS_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $OCIS_TRACING_SERVICE Service name for tracing. Default: ocis. \u0026ndash;debug-addr | $OCIS_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9010. \u0026ndash;debug-token | $OCIS_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $OCIS_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $OCIS_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;http-addr | $OCIS_HTTP_ADDR Address to bind http server. Default: 0.0.0.0:9000. \u0026ndash;http-root | $OCIS_HTTP_ROOT Root path of http server. Default: /. \u0026ndash;grpc-addr | $OCIS_GRPC_ADDR Address to bind grpc server. Default: 0.0.0.0:9001.  List of available Extension subcommands There are more subcommands to start the individual extensions. Please check the documentation about their usage and options in the dedicated section of the documentation.\nocis graph Start graph server\nocis graph-explorer Start graph explorer\nocis phoenix Start phoenix server\nocis reva-storage-oc-data Start reva oc storage dataprovider\nocis reva-auth-basic Start reva auth-basic service\nocis glauth Start glauth server\nocis reva-storage-eos-data Start reva eos storage dataprovider\nocis hello Start hello server\nocis ocs Start ocs server\nocis reva-storage-eos Start reva eos storage\nocis reva-storage-root Start reva root storage\nocis reva-auth-bearer Start reva auth-bearer service\nocis webdav Start webdav server\nocis reva-gateway Start reva gateway\nocis reva-frontend Start reva frontend\nocis reva-storage-home-data Start reva home storage dataprovider\nocis konnectd Start konnectd server\nocis reva-users Start reva users service\nocis proxy Start proxy server\nocis reva-sharing Start reva sharing service\nocis reva-storage-home Start reva home storage\nocis reva-storage-oc Start reva oc storage\nocis thumbnails Start thumbnails server\n"});index.add({'id':17,'href':'/extensions/ocis_proxy/configuration/','title':"Configuration",'content':"    Configuration  Configuration using config files Envrionment variables Commandline flags   Root Command Sub Commands  ocis-proxy server ocis-proxy health       Configuration oCIS Single Binary is not responsible for configuring extensions. Instead, each extension could either be configured by environment variables, cli flags or config files.\nEach extension has its dedicated documentation page (e.g. https://owncloud.github.io/extensions/ocis_proxy/configuration) which lists all possible configurations. Config files and environment variables are picked up if you use the ./bin/ocis server command within the oCIS single binary. Command line flags must be set explicitly on the extensions subcommands.\nConfiguration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nRoot Command proxy for Reva/oCIS\nUsage: ocis-proxy [global options] command [command options] [arguments...]\n \u0026ndash;config-file | $PROXY_CONFIG_FILE Path to config file. \u0026ndash;log-level | $PROXY_LOG_LEVEL Set logging level. Default: info. \u0026ndash;log-pretty | $PROXY_LOG_PRETTY Enable pretty logging. Default: true. \u0026ndash;log-color | $PROXY_LOG_COLOR Enable colored logging. Default: true.  Sub Commands ocis-proxy server Start integrated server\nUsage: ocis-proxy server [command options] [arguments...]\n \u0026ndash;tracing-enabled | $PROXY_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $PROXY_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $PROXY_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $PROXY_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $PROXY_TRACING_SERVICE Service name for tracing. Default: proxy. \u0026ndash;debug-addr | $PROXY_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9205. \u0026ndash;debug-token | $PROXY_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $PROXY_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $PROXY_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;http-addr | $PROXY_HTTP_ADDR Address to bind http server. Default: 0.0.0.0:9200. \u0026ndash;http-root | $PROXY_HTTP_ROOT Root path of http server. Default: /. \u0026ndash;asset-path | $PROXY_ASSET_PATH Path to custom assets. \u0026ndash;http-namespace | $PROXY_HTTP_NAMESPACE Set the base namespace for the http namespace. Default: com.owncloud. \u0026ndash;transport-tls-cert | $PROXY_TRANSPORT_TLS_CERT Certificate file for transport encryption. \u0026ndash;transport-tls-key | $PROXY_TRANSPORT_TLS_KEY Secret file for transport encryption.  ocis-proxy health Check health status\nUsage: ocis-proxy health [command options] [arguments...]\n \u0026ndash;debug-addr | $PROXY_DEBUG_ADDR Address to debug endpoint. Default: 0.0.0.0:9109.  "});index.add({'id':18,'href':'/extensions/ocis_konnectd/configuration/','title':"Configuration",'content':"    Configuration  Configuration using config files Envrionment variables Commandline flags   Root Command Sub Commands  ocis-konnectd server ocis-konnectd health       Configuration oCIS Single Binary is not responsible for configuring extensions. Instead, each extension could either be configured by environment variables, cli flags or config files.\nEach extension has its dedicated documentation page (e.g. https://owncloud.github.io/extensions/ocis_proxy/configuration) which lists all possible configurations. Config files and environment variables are picked up if you use the ./bin/ocis server command within the oCIS single binary. Command line flags must be set explicitly on the extensions subcommands.\nConfiguration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nRoot Command Serve Konnectd API for oCIS\nUsage: ocis-konnectd [global options] command [command options] [arguments...]\n \u0026ndash;config-file | $KONNECTD_CONFIG_FILE Path to config file. \u0026ndash;log-level | $KONNECTD_LOG_LEVEL Set logging level. Default: info. \u0026ndash;log-pretty | $KONNECTD_LOG_PRETTY Enable pretty logging. Default: true. \u0026ndash;log-color | $KONNECTD_LOG_COLOR Enable colored logging. Default: true.  Sub Commands ocis-konnectd server Start integrated server\nUsage: ocis-konnectd server [command options] [arguments...]\n \u0026ndash;tracing-enabled | $KONNECTD_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $KONNECTD_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $KONNECTD_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $KONNECTD_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $KONNECTD_TRACING_SERVICE Service name for tracing. Default: konnectd. \u0026ndash;debug-addr | $KONNECTD_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9134. \u0026ndash;debug-token | $KONNECTD_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $KONNECTD_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $KONNECTD_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;http-addr | $KONNECTD_HTTP_ADDR Address to bind http server. Default: 0.0.0.0:9130. \u0026ndash;http-root | $KONNECTD_HTTP_ROOT Root path of http server. Default: /. \u0026ndash;http-namespace | $KONNECTD_HTTP_NAMESPACE Set the base namespace for service discovery. Default: com.owncloud.web. \u0026ndash;identity-manager | $KONNECTD_IDENTITY_MANAGER Identity manager (one of ldap,kc,cookie,dummy). Default: ldap. \u0026ndash;transport-tls-cert | $KONNECTD_TRANSPORT_TLS_CERT Certificate file for transport encryption. \u0026ndash;transport-tls-key | $KONNECTD_TRANSPORT_TLS_KEY Secret file for transport encryption. \u0026ndash;iss | $KONNECTD_ISS OIDC issuer URL. Default: https://localhost:9200. \u0026ndash;signing-kid | $KONNECTD_SIGNING_KID Value of kid field to use in created tokens (uniquely identifying the signing-private-key). \u0026ndash;validation-keys-path | $KONNECTD_VALIDATION_KEYS_PATH Full path to a folder containg PEM encoded private or public key files used for token validaton (file name without extension is used as kid). \u0026ndash;encryption-secret | $KONNECTD_ENCRYPTION_SECRET Full path to a file containing a %d bytes secret key. \u0026ndash;signing-method | $KONNECTD_SIGNING_METHOD JWT default signing method. Default: PS256. \u0026ndash;uri-base-path | $KONNECTD_URI_BASE_PATH Custom base path for URI endpoints. \u0026ndash;sign-in-uri | $KONNECTD_SIGN_IN_URI Custom redirection URI to sign-in form. \u0026ndash;signed-out-uri | $KONNECTD_SIGN_OUT_URI Custom redirection URI to signed-out goodbye page. \u0026ndash;authorization-endpoint-uri | $KONNECTD_ENDPOINT_URI Custom authorization endpoint URI. \u0026ndash;endsession-endpoint-uri | $KONNECTD_ENDSESSION_ENDPOINT_URI Custom endsession endpoint URI. \u0026ndash;asset-path | $KONNECTD_ASSET_PATH Path to custom assets. \u0026ndash;identifier-client-path | $KONNECTD_IDENTIFIER_CLIENT_PATH Path to the identifier web client base folder. Default: /var/tmp/konnectd. \u0026ndash;identifier-registration-conf | $KONNECTD_IDENTIFIER_REGISTRATION_CONF Path to a identifier-registration.yaml configuration file. Default: ./config/identifier-registration.yaml. \u0026ndash;identifier-scopes-conf | $KONNECTD_IDENTIFIER_SCOPES_CONF Path to a scopes.yaml configuration file. \u0026ndash;insecure | $KONNECTD_INSECURE Disable TLS certificate and hostname validation. \u0026ndash;tls | $KONNECTD_TLS Use TLS (disable only if konnectd is behind a TLS-terminating reverse-proxy).. Default: false. \u0026ndash;allow-client-guests | $KONNECTD_ALLOW_CLIENT_GUESTS Allow sign in of client controlled guest users. \u0026ndash;allow-dynamic-client-registration | $KONNECTD_ALLOW_DYNAMIC_CLIENT_REGISTRATION Allow dynamic OAuth2 client registration. \u0026ndash;disable-identifier-webapp | $KONNECTD_DISABLE_IDENTIFIER_WEBAPP Disable built-in identifier-webapp to use a frontend hosted elsewhere.. Default: true.  ocis-konnectd health Check health status\nUsage: ocis-konnectd health [command options] [arguments...]\n \u0026ndash;debug-addr | $KONNECTD_DEBUG_ADDR Address to debug endpoint. Default: 0.0.0.0:9134.  "});index.add({'id':19,'href':'/extensions/ocis_reva/configuration/','title':"Configuration",'content':"    Configuration  Configuration using config files Envrionment variables Commandline flags   Root Command Sub Commands  ocis-reva gateway ocis-reva storage-oc-data ocis-reva sharing ocis-reva health ocis-reva storage-home-data ocis-reva storage-oc ocis-reva users ocis-reva auth-basic ocis-reva storage-root ocis-reva auth-bearer ocis-reva storage-eos ocis-reva frontend ocis-reva storage-home ocis-reva storage-oc-data       Configuration oCIS Single Binary is not responsible for configuring extensions. Instead, each extension could either be configured by environment variables, cli flags or config files.\nEach extension has its dedicated documentation page (e.g. https://owncloud.github.io/extensions/ocis_proxy/configuration) which lists all possible configurations. Config files and environment variables are picked up if you use the ./bin/ocis server command within the oCIS single binary. Command line flags must be set explicitly on the extensions subcommands.\nConfiguration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nRoot Command Example service for Reva/oCIS\nUsage: ocis-reva [global options] command [command options] [arguments...]\n \u0026ndash;config-file | $REVA_CONFIG_FILE Path to config file. \u0026ndash;log-level | $REVA_LOG_LEVEL Set logging level. Default: info. \u0026ndash;log-pretty | $REVA_LOG_PRETTY Enable pretty logging. \u0026ndash;log-color | $REVA_LOG_COLOR Enable colored logging.  Sub Commands ocis-reva gateway Start reva gateway\nUsage: ocis-reva gateway [command options] [arguments...]\n \u0026ndash;tracing-enabled | $REVA_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $REVA_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $REVA_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $REVA_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $REVA_TRACING_SERVICE Service name for tracing. Default: reva. \u0026ndash;debug-addr | $REVA_GATEWAY_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9143. \u0026ndash;debug-token | $REVA_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $REVA_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $REVA_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;jwt-secret | $REVA_JWT_SECRET Shared jwt secret for reva service communication. Default: Pive-Fumkiu4. \u0026ndash;transfer-secret | $REVA_TRANSFER_SECRET Transfer secret for datagateway. Default: replace-me-with-a-transfer-secret. \u0026ndash;network | $REVA_GATEWAY_NETWORK Network to use for the reva service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: tcp. \u0026ndash;protocol | $REVA_GATEWAY_PROTOCOL protocol for reva service, can be \u0026lsquo;http\u0026rsquo; or \u0026lsquo;grpc\u0026rsquo;. Default: grpc. \u0026ndash;addr | $REVA_GATEWAY_ADDR Address to bind reva service. Default: 0.0.0.0:9142. \u0026ndash;url | $REVA_GATEWAY_URL URL to use for the reva service. Default: localhost:9142. \u0026ndash;commit-share-to-storage-grant | $REVA_GATEWAY_COMMIT_SHARE_TO_STORAGE_GRANT Commit shares to the share manager. Default: true. \u0026ndash;commit-share-to-storage-ref | $REVA_GATEWAY_COMMIT_SHARE_TO_STORAGE_REF Commit shares to the storage. Default: true. \u0026ndash;share-folder | $REVA_GATEWAY_SHARE_FOLDER mount shares in this folder of the home storage provider. Default: Shares. \u0026ndash;disable-home-creation-on-login | $REVA_GATEWAY_DISABLE_HOME_CREATION_ON_LOGIN Disable creation of home folder on login. \u0026ndash;storage-home-provider | $REVA_STORAGE_HOME_PROVIDER mount point of the storage provider for user homes in the global namespace. Default: /home. \u0026ndash;frontend-url | $REVA_FRONTEND_URL URL to use for the reva service. Default: localhost:9140. \u0026ndash;users-url | $REVA_USERS_URL URL to use for the reva service. Default: localhost:9144. \u0026ndash;auth-basic-url | $REVA_AUTH_BASIC_URL URL to use for the reva service. Default: localhost:9146. \u0026ndash;auth-bearer-url | $REVA_AUTH_BEARER_URL URL to use for the reva service. Default: localhost:9148. \u0026ndash;sharing-url | $REVA_SHARING_URL URL to use for the reva service. Default: localhost:9150. \u0026ndash;storage-root-url | $REVA_STORAGE_ROOT_URL URL to use for the reva service. Default: localhost:9152. \u0026ndash;storage-root-mount-path | $REVA_STORAGE_ROOT_MOUNT_PATH mount path. Default: /. \u0026ndash;storage-root-mount-id | $REVA_STORAGE_ROOT_MOUNT_ID mount id. Default: 1284d238-aa92-42ce-bdc4-0b0000009152. \u0026ndash;storage-home-url | $REVA_STORAGE_HOME_URL URL to use for the reva service. Default: localhost:9154. \u0026ndash;storage-home-mount-path | $REVA_STORAGE_HOME_MOUNT_PATH mount path. Default: /home. \u0026ndash;storage-eos-url | $REVA_STORAGE_EOS_URL URL to use for the reva service. Default: localhost:9158. \u0026ndash;storage-eos-mount-path | $REVA_STORAGE_EOS_MOUNT_PATH mount path. Default: /eos. \u0026ndash;storage-eos-mount-id | $REVA_STORAGE_EOS_MOUNT_ID mount id. Default: 1284d238-aa92-42ce-bdc4-0b0000009158. \u0026ndash;storage-oc-url | $REVA_STORAGE_OC_URL URL to use for the reva service. Default: localhost:9162. \u0026ndash;storage-oc-mount-path | $REVA_STORAGE_OC_MOUNT_PATH mount path. Default: /oc. \u0026ndash;storage-oc-mount-id | $REVA_STORAGE_OC_MOUNT_ID mount id. Default: 1284d238-aa92-42ce-bdc4-0b0000009162.  ocis-reva storage-oc-data Start reva storage-oc-data service\nUsage: ocis-reva storage-oc-data [command options] [arguments...]\n \u0026ndash;tracing-enabled | $REVA_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $REVA_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $REVA_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $REVA_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $REVA_TRACING_SERVICE Service name for tracing. Default: reva. \u0026ndash;debug-addr | $REVA_STORAGE_OC_DATA_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9165. \u0026ndash;debug-token | $REVA_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $REVA_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $REVA_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;jwt-secret | $REVA_JWT_SECRET Shared jwt secret for reva service communication. Default: Pive-Fumkiu4. \u0026ndash;network | $REVA_STORAGE_OC_DATA_NETWORK Network to use for the reva service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: tcp. \u0026ndash;protocol | $REVA_STORAGE_OC_DATA_PROTOCOL protocol for reva service, can be \u0026lsquo;http\u0026rsquo; or \u0026lsquo;grpc\u0026rsquo;. Default: http. \u0026ndash;addr | $REVA_STORAGE_OC_DATA_ADDR Address to bind reva service. Default: 0.0.0.0:9164. \u0026ndash;url | $REVA_STORAGE_OC_DATA_URL URL to use for the reva service. Default: localhost:9164. \u0026ndash;driver | $REVA_STORAGE_OC_DATA_DRIVER storage driver, eg. local, eos, owncloud or s3. Default: owncloud. \u0026ndash;prefix | $REVA_STORAGE_OC_DATA_PREFIX prefix for the http endpoint, without leading slash. Default: data. \u0026ndash;temp-folder | $REVA_STORAGE_OC_DATA_TEMP_FOLDER temp folder. Default: /var/tmp/. \u0026ndash;storage-eos-namespace | $REVA_STORAGE_EOS_NAMESPACE Namespace for metadata operations. \u0026ndash;storage-eos-shadow-namespace | $REVA_STORAGE_EOS_SHADOW_NAMESPACE Shadow namespace where share references are stored. \u0026ndash;storage-eos-share-folder | $REVA_STORAGE_EOS_SHARE_FOLDER name of the share folder. \u0026ndash;storage-eos-binary | $REVA_STORAGE_EOS_BINARY Location of the eos binary. Default: /usr/bin/eos. \u0026ndash;storage-eos-xrdcopy-binary | $REVA_STORAGE_EOS_XRDCOPY_BINARY Location of the xrdcopy binary. Default: /usr/bin/xrdcopy. \u0026ndash;storage-eos-master-url | $REVA_STORAGE_EOS_MASTER_URL URL of the Master EOS MGM. Default: root://eos-example.org. \u0026ndash;storage-eos-slave-url | $REVA_STORAGE_EOS_SLAVE_URL URL of the Slave EOS MGM. Default: root://eos-example.org. \u0026ndash;storage-eos-cache-directory | $REVA_STORAGE_EOS_CACHE_DIRECTORY Location on the local fs where to store reads. Default: os.TempDir(). \u0026ndash;storage-eos-enable-logging | $REVA_STORAGE_EOS_ENABLE_LOGGING Enables logging of the commands executed. \u0026ndash;storage-eos-show-hidden-sysfiles | $REVA_STORAGE_EOS_SHOW_HIDDEN_SYSFILES show internal EOS files like .sys.v# and .sys.a# files.. \u0026ndash;storage-eos-force-singleuser-mode | $REVA_STORAGE_EOS_FORCE_SINGLEUSER_MODE force connections to EOS to use SingleUsername. \u0026ndash;storage-eos-use-keytab | $REVA_STORAGE_EOS_USE_KEYTAB authenticate requests by using an EOS keytab. \u0026ndash;storage-eos-enable-home | $REVA_STORAGE_EOS_ENABLE_HOME enable the creation of home directories. \u0026ndash;storage-eos-sec-protocol | $REVA_STORAGE_EOS_SEC_PROTOCOL the xrootd security protocol to use between the server and EOS. \u0026ndash;storage-eos-keytab | $REVA_STORAGE_EOS_KEYTAB the location of the keytab to use to authenticate to EOS. \u0026ndash;storage-eos-single-username | $REVA_STORAGE_EOS_SINGLE_USERNAME the username to use when SingleUserMode is enabled. \u0026ndash;storage-eos-layout | $REVA_STORAGE_EOS_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.UsernameLower}} and {{.Provider}} also supports prefixing dirs: \u0026quot;{{.UsernamePrefixCount.2}}/{{.UsernameLower}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: {{substr 0 1 .Username}}/{{.Username}}. \u0026ndash;storage-local-root | $REVA_STORAGE_LOCAL_ROOT the path to the local storage root. Default: /var/tmp/reva/root. \u0026ndash;storage-owncloud-datadir | $REVA_STORAGE_OWNCLOUD_DATADIR the path to the owncloud data directory. Default: /var/tmp/reva/data. \u0026ndash;storage-owncloud-scan | $REVA_STORAGE_OWNCLOUD_SCAN scan files on startup to add fileids. Default: true. \u0026ndash;storage-owncloud-redis | $REVA_STORAGE_OWNCLOUD_REDIS_ADDR the address of the redis server. Default: :6379. \u0026ndash;storage-owncloud-enable-home | $REVA_STORAGE_OWNCLOUD_ENABLE_HOME enable the creation of home storages. Default: false. \u0026ndash;storage-owncloud-layout | $REVA_STORAGE_OWNCLOUD_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.UsernameLower}} and {{.Provider}} also supports prefixing dirs: \u0026quot;{{.UsernamePrefixCount.2}}/{{.UsernameLower}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: {{.Username}}. \u0026ndash;gateway-url | $REVA_GATEWAY_URL URL to use for the reva gateway service. Default: localhost:9142.  ocis-reva sharing Start reva sharing service\nUsage: ocis-reva sharing [command options] [arguments...]\n \u0026ndash;tracing-enabled | $REVA_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $REVA_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $REVA_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $REVA_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $REVA_TRACING_SERVICE Service name for tracing. Default: reva. \u0026ndash;debug-addr | $REVA_SHARING_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9151. \u0026ndash;debug-token | $REVA_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $REVA_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $REVA_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;jwt-secret | $REVA_JWT_SECRET Shared jwt secret for reva service communication. Default: Pive-Fumkiu4. \u0026ndash;network | $REVA_SHARING_NETWORK Network to use for the reva service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: tcp. \u0026ndash;protocol | $REVA_SHARING_PROTOCOL protocol for reva service, can be \u0026lsquo;http\u0026rsquo; or \u0026lsquo;grpc\u0026rsquo;. Default: grpc. \u0026ndash;addr | $REVA_SHARING_ADDR Address to bind reva service. Default: 0.0.0.0:9150. \u0026ndash;url | $REVA_SHARING_URL URL to use for the reva service. Default: localhost:9150. \u0026ndash;user-driver | $REVA_SHARING_USER_DRIVER driver to use for the UserShareProvider. Default: json. \u0026ndash;user-json-file | $REVA_SHARING_USER_JSON_FILE file used to persist shares for the UserShareProvider. Default: /var/tmp/reva/shares.json. \u0026ndash;public-driver | $REVA_SHARING_PUBLIC_DRIVER driver to use for the PublicShareProvider. Default: memory.  ocis-reva health Check health status\nUsage: ocis-reva health [command options] [arguments...]\n \u0026ndash;debug-addr | $REVA_DEBUG_ADDR Address to debug endpoint. Default: 0.0.0.0:9109.  ocis-reva storage-home-data Start reva storage-home-data service\nUsage: ocis-reva storage-home-data [command options] [arguments...]\n \u0026ndash;tracing-enabled | $REVA_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $REVA_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $REVA_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $REVA_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $REVA_TRACING_SERVICE Service name for tracing. Default: reva. \u0026ndash;debug-addr | $REVA_STORAGE_HOME_DATA_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9157. \u0026ndash;debug-token | $REVA_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $REVA_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $REVA_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;jwt-secret | $REVA_JWT_SECRET Shared jwt secret for reva service communication. Default: Pive-Fumkiu4. \u0026ndash;network | $REVA_STORAGE_HOME_DATA_NETWORK Network to use for the reva service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: tcp. \u0026ndash;protocol | $REVA_STORAGE_HOME_DATA_PROTOCOL protocol for reva service, can be \u0026lsquo;http\u0026rsquo; or \u0026lsquo;grpc\u0026rsquo;. Default: http. \u0026ndash;addr | $REVA_STORAGE_HOME_DATA_ADDR Address to bind reva service. Default: 0.0.0.0:9156. \u0026ndash;url | $REVA_STORAGE_HOME_DATA_URL URL to use for the reva service. Default: localhost:9156. \u0026ndash;driver | $REVA_STORAGE_HOME_DATA_DRIVER storage driver, eg. local, eos, owncloud or s3. Default: owncloud. \u0026ndash;prefix | $REVA_STORAGE_HOME_DATA_PREFIX prefix for the http endpoint, without leading slash. Default: data. \u0026ndash;temp-folder | $REVA_STORAGE_HOME_DATA_TEMP_FOLDER temp folder. Default: /var/tmp/. \u0026ndash;storage-eos-namespace | $REVA_STORAGE_EOS_NAMESPACE Namespace for metadata operations. Default: /eos/dockertest/reva/users. \u0026ndash;storage-eos-shadow-namespace | $REVA_STORAGE_EOS_SHADOW_NAMESPACE Shadow namespace where share references are stored. \u0026ndash;storage-eos-share-folder | $REVA_STORAGE_EOS_SHARE_FOLDER name of the share folder. Default: /Shares. \u0026ndash;storage-eos-binary | $REVA_STORAGE_EOS_BINARY Location of the eos binary. Default: /usr/bin/eos. \u0026ndash;storage-eos-xrdcopy-binary | $REVA_STORAGE_EOS_XRDCOPY_BINARY Location of the xrdcopy binary. Default: /usr/bin/xrdcopy. \u0026ndash;storage-eos-master-url | $REVA_STORAGE_EOS_MASTER_URL URL of the Master EOS MGM. Default: root://eos-mgm1.eoscluster.cern.ch:1094. \u0026ndash;storage-eos-slave-url | $REVA_STORAGE_EOS_SLAVE_URL URL of the Slave EOS MGM. Default: root://eos-mgm1.eoscluster.cern.ch:1094. \u0026ndash;storage-eos-cache-directory | $REVA_STORAGE_EOS_CACHE_DIRECTORY Location on the local fs where to store reads. Default: os.TempDir(). \u0026ndash;storage-eos-enable-logging | $REVA_STORAGE_EOS_ENABLE_LOGGING Enables logging of the commands executed. \u0026ndash;storage-eos-show-hidden-sysfiles | $REVA_STORAGE_EOS_SHOW_HIDDEN_SYSFILES show internal EOS files like .sys.v# and .sys.a# files.. \u0026ndash;storage-eos-force-singleuser-mode | $REVA_STORAGE_EOS_FORCE_SINGLEUSER_MODE force connections to EOS to use SingleUsername. \u0026ndash;storage-eos-use-keytab | $REVA_STORAGE_EOS_USE_KEYTAB authenticate requests by using an EOS keytab. \u0026ndash;storage-eos-enable-home | $REVA_STORAGE_EOS_ENABLE_HOME enable the creation of home directories. Default: true. \u0026ndash;storage-eos-sec-protocol | $REVA_STORAGE_EOS_SEC_PROTOCOL the xrootd security protocol to use between the server and EOS. \u0026ndash;storage-eos-keytab | $REVA_STORAGE_EOS_KEYTAB the location of the keytab to use to authenticate to EOS. \u0026ndash;storage-eos-single-username | $REVA_STORAGE_EOS_SINGLE_USERNAME the username to use when SingleUserMode is enabled. \u0026ndash;storage-eos-layout | $REVA_STORAGE_EOS_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.UsernameLower}} and {{.Provider}} also supports prefixing dirs: \u0026quot;{{substr 0 1 .Username}}/{{.Username}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;E/Einstein\u0026quot; . Default: {{substr 0 1 .Username}}/{{.Username}}. \u0026ndash;storage-local-root | $REVA_STORAGE_LOCAL_ROOT the path to the local storage root. Default: /var/tmp/reva/root. \u0026ndash;storage-owncloud-datadir | $REVA_STORAGE_OWNCLOUD_DATADIR the path to the owncloud data directory. Default: /var/tmp/reva/data. \u0026ndash;storage-owncloud-scan | $REVA_STORAGE_OWNCLOUD_SCAN scan files on startup to add fileids. Default: true. \u0026ndash;storage-owncloud-redis | $REVA_STORAGE_OWNCLOUD_REDIS_ADDR the address of the redis server. Default: :6379. \u0026ndash;storage-owncloud-enable-home | $REVA_STORAGE_OWNCLOUD_ENABLE_HOME enable the creation of home storages. Default: true. \u0026ndash;storage-owncloud-layout | $REVA_STORAGE_OWNCLOUD_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.UsernameLower}} and {{.Provider}} also supports prefixing dirs: \u0026quot;{{.UsernamePrefixCount.2}}/{{.UsernameLower}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: {{.Username}}. \u0026ndash;gateway-url | $REVA_GATEWAY_URL URL to use for the reva gateway service. Default: localhost:9142.  ocis-reva storage-oc Start reva storage-oc service\nUsage: ocis-reva storage-oc [command options] [arguments...]\n \u0026ndash;tracing-enabled | $REVA_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $REVA_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $REVA_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $REVA_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $REVA_TRACING_SERVICE Service name for tracing. Default: reva. \u0026ndash;debug-addr | $REVA_STORAGE_OC_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9163. \u0026ndash;debug-token | $REVA_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $REVA_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $REVA_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;jwt-secret | $REVA_JWT_SECRET Shared jwt secret for reva service communication. Default: Pive-Fumkiu4. \u0026ndash;network | $REVA_STORAGE_OC_NETWORK Network to use for the reva service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: tcp. \u0026ndash;protocol | $REVA_STORAGE_OC_PROTOCOL protocol for reva service, can be \u0026lsquo;http\u0026rsquo; or \u0026lsquo;grpc\u0026rsquo;. Default: grpc. \u0026ndash;addr | $REVA_STORAGE_OC_ADDR Address to bind reva service. Default: 0.0.0.0:9162. \u0026ndash;url | $REVA_STORAGE_OC_URL URL to use for the reva service. Default: localhost:9162. \u0026ndash;driver | $REVA_STORAGE_OC_DRIVER storage driver, eg. local, eos, owncloud or s3. Default: owncloud. \u0026ndash;mount-path | $REVA_STORAGE_OC_MOUNT_PATH mount path. Default: /oc. \u0026ndash;mount-id | $REVA_STORAGE_OC_MOUNT_ID mount id. Default: 1284d238-aa92-42ce-bdc4-0b0000009162. \u0026ndash;expose-data-server | $REVA_STORAGE_OC_EXPOSE_DATA_SERVER exposes a dedicated data server. Default: true. \u0026ndash;data-server-url | $REVA_STORAGE_OC_DATA_SERVER_URL data server url. Default: http://localhost:9164/data. \u0026ndash;enable-home-creation | $REVA_STORAGE_OC_ENABLE_HOME_CREATION if enabled home dirs will be automatically created. Default: false. \u0026ndash;storage-eos-namespace | $REVA_STORAGE_EOS_NAMESPACE Namespace for metadata operations. \u0026ndash;storage-eos-shadow-namespace | $REVA_STORAGE_EOS_SHADOW_NAMESPACE Shadow namespace where share references are stored. \u0026ndash;storage-eos-share-folder | $REVA_STORAGE_EOS_SHARE_FOLDER name of the share folder. \u0026ndash;storage-eos-binary | $REVA_STORAGE_EOS_BINARY Location of the eos binary. Default: /usr/bin/eos. \u0026ndash;storage-eos-xrdcopy-binary | $REVA_STORAGE_EOS_XRDCOPY_BINARY Location of the xrdcopy binary. Default: /usr/bin/xrdcopy. \u0026ndash;storage-eos-master-url | $REVA_STORAGE_EOS_MASTER_URL URL of the Master EOS MGM. Default: root://eos-example.org. \u0026ndash;storage-eos-slave-url | $REVA_STORAGE_EOS_SLAVE_URL URL of the Slave EOS MGM. Default: root://eos-example.org. \u0026ndash;storage-eos-cache-directory | $REVA_STORAGE_EOS_CACHE_DIRECTORY Location on the local fs where to store reads. Default: os.TempDir(). \u0026ndash;storage-eos-enable-logging | $REVA_STORAGE_EOS_ENABLE_LOGGING Enables logging of the commands executed. \u0026ndash;storage-eos-show-hidden-sysfiles | $REVA_STORAGE_EOS_SHOW_HIDDEN_SYSFILES show internal EOS files like .sys.v# and .sys.a# files.. \u0026ndash;storage-eos-force-singleuser-mode | $REVA_STORAGE_EOS_FORCE_SINGLEUSER_MODE force connections to EOS to use SingleUsername. \u0026ndash;storage-eos-use-keytab | $REVA_STORAGE_EOS_USE_KEYTAB authenticate requests by using an EOS keytab. \u0026ndash;storage-eos-enable-home | $REVA_STORAGE_EOS_ENABLE_HOME enable the creation of home directories. \u0026ndash;storage-eos-sec-protocol | $REVA_STORAGE_EOS_SEC_PROTOCOL the xrootd security protocol to use between the server and EOS. \u0026ndash;storage-eos-keytab | $REVA_STORAGE_EOS_KEYTAB the location of the keytab to use to authenticate to EOS. \u0026ndash;storage-eos-single-username | $REVA_STORAGE_EOS_SINGLE_USERNAME the username to use when SingleUserMode is enabled. \u0026ndash;storage-eos-layout | $REVA_STORAGE_EOS_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.UsernameLower}} and {{.Provider}} also supports prefixing dirs: \u0026quot;{{.UsernamePrefixCount.2}}/{{.UsernameLower}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: {{substr 0 1 .Username}}/{{.Username}}. \u0026ndash;storage-local-root | $REVA_STORAGE_LOCAL_ROOT the path to the local storage root. Default: /var/tmp/reva/root. \u0026ndash;storage-owncloud-datadir | $REVA_STORAGE_OWNCLOUD_DATADIR the path to the owncloud data directory. Default: /var/tmp/reva/data. \u0026ndash;storage-owncloud-scan | $REVA_STORAGE_OWNCLOUD_SCAN scan files on startup to add fileids. Default: true. \u0026ndash;storage-owncloud-redis | $REVA_STORAGE_OWNCLOUD_REDIS_ADDR the address of the redis server. Default: :6379. \u0026ndash;storage-owncloud-enable-home | $REVA_STORAGE_OWNCLOUD_ENABLE_HOME enable the creation of home storages. Default: false. \u0026ndash;storage-owncloud-layout | $REVA_STORAGE_OWNCLOUD_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.UsernameLower}} and {{.Provider}} also supports prefixing dirs: \u0026quot;{{.UsernamePrefixCount.2}}/{{.UsernameLower}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: {{.Username}}.  ocis-reva users Start reva users service\nUsage: ocis-reva users [command options] [arguments...]\n \u0026ndash;tracing-enabled | $REVA_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $REVA_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $REVA_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $REVA_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $REVA_TRACING_SERVICE Service name for tracing. Default: reva. \u0026ndash;debug-addr | $REVA_SHARING_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9145. \u0026ndash;debug-token | $REVA_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $REVA_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $REVA_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;jwt-secret | $REVA_JWT_SECRET Shared jwt secret for reva service communication. Default: Pive-Fumkiu4. \u0026ndash;ldap-hostname | $REVA_LDAP_HOSTNAME LDAP hostname. Default: localhost. \u0026ndash;ldap-base-dn | $REVA_LDAP_BASE_DN LDAP basedn. Default: dc=example,dc=org. \u0026ndash;ldap-userfilter | $REVA_LDAP_USERFILTER LDAP userfilter. Default: (\u0026amp;(objectclass=posixAccount)(cn=%s*)). \u0026ndash;ldap-groupfilter | $REVA_LDAP_GROUPFILTER LDAP groupfilter. Default: (\u0026amp;(objectclass=posixGroup)(cn=%s*)). \u0026ndash;ldap-bind-dn | $REVA_LDAP_BIND_DN LDAP bind dn. Default: cn=reva,ou=sysusers,dc=example,dc=org. \u0026ndash;ldap-bind-password | $REVA_LDAP_BIND_PASSWORD LDAP bind password. Default: reva. \u0026ndash;ldap-idp | $REVA_LDAP_IDP Identity provider to use for users. Default: https://localhost:9200. \u0026ndash;ldap-schema-uid | $REVA_LDAP_SCHEMA_UID LDAP schema uid. Default: uid. \u0026ndash;ldap-schema-mail | $REVA_LDAP_SCHEMA_MAIL LDAP schema mail. Default: mail. \u0026ndash;ldap-schema-displayName | $REVA_LDAP_SCHEMA_DISPLAYNAME LDAP schema displayName. Default: sn. \u0026ndash;ldap-schema-cn | $REVA_LDAP_SCHEMA_CN LDAP schema cn. Default: cn. \u0026ndash;network | $REVA_USERS_NETWORK Network to use for the reva service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: tcp. \u0026ndash;protocol | $REVA_USERS_PROTOCOL protocol for reva service, can be \u0026lsquo;http\u0026rsquo; or \u0026lsquo;grpc\u0026rsquo;. Default: grpc. \u0026ndash;addr | $REVA_USERS_ADDR Address to bind reva service. Default: 0.0.0.0:9144. \u0026ndash;url | $REVA_USERS_URL URL to use for the reva service. Default: localhost:9144. \u0026ndash;driver | $REVA_USERS_DRIVER user driver: \u0026lsquo;demo\u0026rsquo;, \u0026lsquo;json\u0026rsquo; or \u0026lsquo;ldap\u0026rsquo;. Default: ldap. \u0026ndash;json-config | $REVA_USERS_JSON Path to users.json file.  ocis-reva auth-basic Start reva authprovider for basic auth\nUsage: ocis-reva auth-basic [command options] [arguments...]\n \u0026ndash;tracing-enabled | $REVA_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $REVA_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $REVA_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $REVA_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $REVA_TRACING_SERVICE Service name for tracing. Default: reva. \u0026ndash;debug-addr | $REVA_AUTH_BASIC_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9147. \u0026ndash;debug-token | $REVA_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $REVA_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $REVA_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;jwt-secret | $REVA_JWT_SECRET Shared jwt secret for reva service communication. Default: Pive-Fumkiu4. \u0026ndash;users-driver | $REVA_USERS_DRIVER user driver: \u0026lsquo;demo\u0026rsquo;, \u0026lsquo;json\u0026rsquo; or \u0026lsquo;ldap\u0026rsquo;. Default: ldap. \u0026ndash;users-json | $REVA_USERS_JSON Path to users.json file. \u0026ndash;ldap-hostname | $REVA_LDAP_HOSTNAME LDAP hostname. Default: localhost. \u0026ndash;ldap-base-dn | $REVA_LDAP_BASE_DN LDAP basedn. Default: dc=example,dc=org. \u0026ndash;ldap-userfilter | $REVA_LDAP_USERFILTER LDAP userfilter. Default: (\u0026amp;(objectclass=posixAccount)(cn=%s)). \u0026ndash;ldap-groupfilter | $REVA_LDAP_GROUPFILTER LDAP groupfilter. Default: (\u0026amp;(objectclass=posixGroup)(cn=%s)). \u0026ndash;ldap-bind-dn | $REVA_LDAP_BIND_DN LDAP bind dn. Default: cn=reva,ou=sysusers,dc=example,dc=org. \u0026ndash;ldap-bind-password | $REVA_LDAP_BIND_PASSWORD LDAP bind password. Default: reva. \u0026ndash;ldap-idp | $REVA_LDAP_IDP Identity provider to use for users. Default: https://localhost:9200. \u0026ndash;ldap-schema-uid | $REVA_LDAP_SCHEMA_UID LDAP schema uid. Default: uid. \u0026ndash;ldap-schema-mail | $REVA_LDAP_SCHEMA_MAIL LDAP schema mail. Default: mail. \u0026ndash;ldap-schema-displayName | $REVA_LDAP_SCHEMA_DISPLAYNAME LDAP schema displayName. Default: sn. \u0026ndash;ldap-schema-cn | $REVA_LDAP_SCHEMA_CN LDAP schema cn. Default: cn. \u0026ndash;network | $REVA_AUTH_BASIC_NETWORK Network to use for the reva auth-basic service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: tcp. \u0026ndash;protocol | $REVA_AUTH_BASIC_PROTOCOL protocol for reva service, can be \u0026lsquo;http\u0026rsquo; or \u0026lsquo;grpc\u0026rsquo;. Default: grpc. \u0026ndash;addr | $REVA_AUTH_BASIC_ADDR Address to bind reva service. Default: 0.0.0.0:9146. \u0026ndash;url | $REVA_AUTH_BASIC_URL URL to use for the reva service. Default: localhost:9146.  ocis-reva storage-root Start reva storage-root service\nUsage: ocis-reva storage-root [command options] [arguments...]\n \u0026ndash;tracing-enabled | $REVA_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $REVA_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $REVA_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $REVA_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $REVA_TRACING_SERVICE Service name for tracing. Default: reva. \u0026ndash;debug-addr | $REVA_STORAGE_ROOT_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9153. \u0026ndash;debug-token | $REVA_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $REVA_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $REVA_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;jwt-secret | $REVA_JWT_SECRET Shared jwt secret for reva service communication. Default: Pive-Fumkiu4. \u0026ndash;network | $REVA_STORAGE_ROOT_NETWORK Network to use for the reva service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: tcp. \u0026ndash;protocol | $REVA_STORAGE_ROOT_PROTOCOL protocol for reva service, can be \u0026lsquo;http\u0026rsquo; or \u0026lsquo;grpc\u0026rsquo;. Default: grpc. \u0026ndash;addr | $REVA_STORAGE_ROOT_ADDR Address to bind reva service. Default: 0.0.0.0:9152. \u0026ndash;url | $REVA_STORAGE_ROOT_URL URL to use for the reva service. Default: localhost:9152. \u0026ndash;driver | $REVA_STORAGE_ROOT_DRIVER storage driver, eg. local, eos, owncloud or s3. Default: local. \u0026ndash;mount-path | $REVA_STORAGE_ROOT_MOUNT_PATH mount path. Default: /. \u0026ndash;mount-id | $REVA_STORAGE_ROOT_MOUNT_ID mount id. Default: 123e4567-e89b-12d3-a456-426655440001. \u0026ndash;expose-data-server | $REVA_STORAGE_ROOT_EXPOSE_DATA_SERVER exposes a dedicated data server. \u0026ndash;data-server-url | $REVA_STORAGE_ROOT_DATA_SERVER_URL data server url. \u0026ndash;enable-home-creation | $REVA_STORAGE_HOME_ENABLE_HOME_CREATION if enabled home dirs will be automatically created. \u0026ndash;storage-eos-namespace | $REVA_STORAGE_EOS_NAMESPACE Namespace for metadata operations. \u0026ndash;storage-eos-binary | $REVA_STORAGE_EOS_BINARY Location of the eos binary. Default: /usr/bin/eos. \u0026ndash;storage-eos-xrdcopy-binary | $REVA_STORAGE_EOS_XRDCOPY_BINARY Location of the xrdcopy binary. Default: /usr/bin/xrdcopy. \u0026ndash;storage-eos-master-url | $REVA_STORAGE_EOS_MASTER_URL URL of the Master EOS MGM. Default: root://eos-example.org. \u0026ndash;storage-eos-slave-url | $REVA_STORAGE_EOS_SLAVE_URL URL of the Slave EOS MGM. Default: root://eos-example.org. \u0026ndash;storage-eos-cache-directory | $REVA_STORAGE_EOS_CACHE_DIRECTORY Location on the local fs where to store reads. Default: os.TempDir(). \u0026ndash;storage-eos-enable-logging | $REVA_STORAGE_EOS_ENABLE_LOGGING Enables logging of the commands executed. \u0026ndash;storage-eos-show-hidden-sysfiles | $REVA_STORAGE_EOS_SHOW_HIDDEN_SYSFILES show internal EOS files like .sys.v# and .sys.a# files.. \u0026ndash;storage-eos-force-singleuser-mode | $REVA_STORAGE_EOS_FORCE_SINGLEUSER_MODE force connections to EOS to use SingleUsername. \u0026ndash;storage-eos-use-keytab | $REVA_STORAGE_EOS_USE_KEYTAB authenticate requests by using an EOS keytab. \u0026ndash;storage-eos-enable-home | $REVA_STORAGE_EOS_ENABLE_HOME enable the creation of home directories. \u0026ndash;storage-eos-sec-protocol | $REVA_STORAGE_EOS_SEC_PROTOCOL the xrootd security protocol to use between the server and EOS. \u0026ndash;storage-eos-keytab | $REVA_STORAGE_EOS_KEYTAB the location of the keytab to use to authenticate to EOS. \u0026ndash;storage-eos-single-username | $REVA_STORAGE_EOS_SINGLE_USERNAME the username to use when SingleUserMode is enabled. \u0026ndash;storage-eos-layout | $REVA_STORAGE_EOS_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.UsernameLower}} and {{.Provider}} also supports prefixing dirs: \u0026quot;{{.UsernamePrefixCount.2}}/{{.UsernameLower}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: {{substr 0 1 .Username}}/{{.Username}}. \u0026ndash;storage-local-root | $REVA_STORAGE_LOCAL_ROOT the path to the local storage root. Default: /var/tmp/reva/root. \u0026ndash;storage-owncloud-datadir | $REVA_STORAGE_OWNCLOUD_DATADIR the path to the owncloud data directory. Default: /var/tmp/reva/data. \u0026ndash;storage-owncloud-scan | $REVA_STORAGE_OWNCLOUD_SCAN scan files on startup to add fileids. Default: true. \u0026ndash;storage-owncloud-redis | $REVA_STORAGE_OWNCLOUD_REDIS_ADDR the address of the redis server. Default: :6379. \u0026ndash;storage-owncloud-enable-home | $REVA_STORAGE_OWNCLOUD_ENABLE_HOME enable the creation of home storages. Default: false. \u0026ndash;storage-owncloud-layout | $REVA_STORAGE_OWNCLOUD_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.UsernameLower}} and {{.Provider}} also supports prefixing dirs: \u0026quot;{{.UsernamePrefixCount.2}}/{{.UsernameLower}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: {{.Username}}.  ocis-reva auth-bearer Start reva authprovider for bearer auth\nUsage: ocis-reva auth-bearer [command options] [arguments...]\n \u0026ndash;tracing-enabled | $REVA_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $REVA_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $REVA_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $REVA_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $REVA_TRACING_SERVICE Service name for tracing. Default: reva. \u0026ndash;debug-addr | $REVA_AUTH_BEARER_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9149. \u0026ndash;debug-token | $REVA_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $REVA_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $REVA_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;jwt-secret | $REVA_JWT_SECRET Shared jwt secret for reva service communication. Default: Pive-Fumkiu4. \u0026ndash;oidc-issuer | $REVA_OIDC_ISSUER OIDC issuer. Default: https://localhost:9200. \u0026ndash;oidc-insecure | $REVA_OIDC_INSECURE OIDC allow insecure communication. Default: true. \u0026ndash;oidc-id-claim | $REVA_OIDC_ID_CLAIM OIDC id claim. Default: preferred_username. \u0026ndash;network | $REVA_AUTH_BEARER_NETWORK Network to use for the reva service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: tcp. \u0026ndash;protocol | $REVA_AUTH_BEARER_PROTOCOL protocol for reva service, can be \u0026lsquo;http\u0026rsquo; or \u0026lsquo;grpc\u0026rsquo;. Default: grpc. \u0026ndash;addr | $REVA_AUTH_BEARER_ADDR Address to bind reva service. Default: 0.0.0.0:9148. \u0026ndash;url | $REVA_AUTH_BEARER_URL URL to use for the reva service. Default: localhost:9148.  ocis-reva storage-eos Start reva storage-eos service\nUsage: ocis-reva storage-eos [command options] [arguments...]\n \u0026ndash;tracing-enabled | $REVA_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $REVA_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $REVA_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $REVA_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $REVA_TRACING_SERVICE Service name for tracing. Default: reva. \u0026ndash;debug-addr | $REVA_STORAGE_EOS_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9159. \u0026ndash;debug-token | $REVA_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $REVA_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $REVA_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;jwt-secret | $REVA_JWT_SECRET Shared jwt secret for reva service communication. Default: Pive-Fumkiu4. \u0026ndash;network | $REVA_STORAGE_EOS_NETWORK Network to use for the reva service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: tcp. \u0026ndash;protocol | $REVA_STORAGE_EOS_PROTOCOL protocol for reva service, can be \u0026lsquo;http\u0026rsquo; or \u0026lsquo;grpc\u0026rsquo;. Default: grpc. \u0026ndash;addr | $REVA_STORAGE_EOS_ADDR Address to bind reva service. Default: 0.0.0.0:9158. \u0026ndash;url | $REVA_STORAGE_EOS_URL URL to use for the reva service. Default: localhost:9158. \u0026ndash;driver | $REVA_STORAGE_EOS_DRIVER storage driver, eg. local, eos, owncloud or s3. Default: eos. \u0026ndash;mount-path | $REVA_STORAGE_EOS_MOUNT_PATH mount path. Default: /eos. \u0026ndash;mount-id | $REVA_STORAGE_EOS_MOUNT_ID mount id. Default: 1284d238-aa92-42ce-bdc4-0b0000009158. \u0026ndash;expose-data-server | $REVA_STORAGE_EOS_EXPOSE_DATA_SERVER exposes a dedicated data server. Default: true. \u0026ndash;data-server-url | $REVA_STORAGE_EOS_DATA_SERVER_URL data server url. Default: http://localhost:9160/data. \u0026ndash;enable-home-creation | $REVA_STORAGE_EOS_ENABLE_HOME_CREATION if enabled home dirs will be automatically created. Default: false. \u0026ndash;storage-eos-namespace | $REVA_STORAGE_EOS_NAMESPACE Namespace for metadata operations. Default: /eos/dockertest/reva. \u0026ndash;storage-eos-shadow-namespace | $REVA_STORAGE_EOS_SHADOW_NAMESPACE Shadow namespace where share references are stored. \u0026ndash;storage-eos-share-folder | $REVA_STORAGE_EOS_SHARE_FOLDER name of the share folder. Default: /Shares. \u0026ndash;storage-eos-binary | $REVA_STORAGE_EOS_BINARY Location of the eos binary. Default: /usr/bin/eos. \u0026ndash;storage-eos-xrdcopy-binary | $REVA_STORAGE_EOS_XRDCOPY_BINARY Location of the xrdcopy binary. Default: /usr/bin/xrdcopy. \u0026ndash;storage-eos-master-url | $REVA_STORAGE_EOS_MASTER_URL URL of the Master EOS MGM. Default: root://eos-mgm1.eoscluster.cern.ch:1094. \u0026ndash;storage-eos-slave-url | $REVA_STORAGE_EOS_SLAVE_URL URL of the Slave EOS MGM. Default: root://eos-mgm1.eoscluster.cern.ch:1094. \u0026ndash;storage-eos-cache-directory | $REVA_STORAGE_EOS_CACHE_DIRECTORY Location on the local fs where to store reads. Default: os.TempDir(). \u0026ndash;storage-eos-enable-logging | $REVA_STORAGE_EOS_ENABLE_LOGGING Enables logging of the commands executed. \u0026ndash;storage-eos-show-hidden-sysfiles | $REVA_STORAGE_EOS_SHOW_HIDDEN_SYSFILES show internal EOS files like .sys.v# and .sys.a# files.. \u0026ndash;storage-eos-force-singleuser-mode | $REVA_STORAGE_EOS_FORCE_SINGLEUSER_MODE force connections to EOS to use SingleUsername. \u0026ndash;storage-eos-use-keytab | $REVA_STORAGE_EOS_USE_KEYTAB authenticate requests by using an EOS keytab. \u0026ndash;storage-eos-enable-home | $REVA_STORAGE_EOS_ENABLE_HOME enable the creation of home directories. \u0026ndash;storage-eos-sec-protocol | $REVA_STORAGE_EOS_SEC_PROTOCOL the xrootd security protocol to use between the server and EOS. \u0026ndash;storage-eos-keytab | $REVA_STORAGE_EOS_KEYTAB the location of the keytab to use to authenticate to EOS. \u0026ndash;storage-eos-single-username | $REVA_STORAGE_EOS_SINGLE_USERNAME the username to use when SingleUserMode is enabled. \u0026ndash;storage-eos-layout | $REVA_STORAGE_EOS_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.UsernameLower}} and {{.Provider}} also supports prefixing dirs: \u0026quot;{{.UsernamePrefixCount.2}}/{{.UsernameLower}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: {{substr 0 1 .Username}}/{{.Username}}. \u0026ndash;storage-local-root | $REVA_STORAGE_LOCAL_ROOT the path to the local storage root. Default: /var/tmp/reva/root. \u0026ndash;storage-owncloud-datadir | $REVA_STORAGE_OWNCLOUD_DATADIR the path to the owncloud data directory. Default: /var/tmp/reva/data. \u0026ndash;storage-owncloud-scan | $REVA_STORAGE_OWNCLOUD_SCAN scan files on startup to add fileids. Default: true. \u0026ndash;storage-owncloud-redis | $REVA_STORAGE_OWNCLOUD_REDIS_ADDR the address of the redis server. Default: :6379. \u0026ndash;storage-owncloud-enable-home | $REVA_STORAGE_OWNCLOUD_ENABLE_HOME enable the creation of home storages. Default: false. \u0026ndash;storage-owncloud-layout | $REVA_STORAGE_OWNCLOUD_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.UsernameLower}} and {{.Provider}} also supports prefixing dirs: \u0026quot;{{.UsernamePrefixCount.2}}/{{.UsernameLower}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: {{.Username}}.  ocis-reva frontend Start reva frontend service\nUsage: ocis-reva frontend [command options] [arguments...]\n \u0026ndash;tracing-enabled | $REVA_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $REVA_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $REVA_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $REVA_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $REVA_TRACING_SERVICE Service name for tracing. Default: reva. \u0026ndash;debug-addr | $REVA_FRONTEND_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9141. \u0026ndash;debug-token | $REVA_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $REVA_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $REVA_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;jwt-secret | $REVA_JWT_SECRET Shared jwt secret for reva service communication. Default: Pive-Fumkiu4. \u0026ndash;transfer-secret | $REVA_TRANSFER_SECRET Transfer secret for datagateway. Default: replace-me-with-a-transfer-secret. \u0026ndash;webdav-namespace | $WEBDAV_NAMESPACE Namespace prefix for the /webdav endpoint. Default: /home/. \u0026ndash;dav-files-namespace | $DAV_FILES_NAMESPACE Namespace prefix for the webdav /dav/files endpoint. Default: /oc/. \u0026ndash;network | $REVA_FRONTEND_NETWORK Network to use for the reva service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: tcp. \u0026ndash;protocol | $REVA_FRONTEND_PROTOCOL protocol for reva service, can be \u0026lsquo;http\u0026rsquo; or \u0026lsquo;grpc\u0026rsquo;. Default: http. \u0026ndash;addr | $REVA_FRONTEND_ADDR Address to bind reva service. Default: 0.0.0.0:9140. \u0026ndash;url | $REVA_FRONTEND_URL URL to use for the reva service. Default: localhost:9140. \u0026ndash;gateway-url | $REVA_GATEWAY_URL URL to use for the reva gateway service. Default: localhost:9142.  ocis-reva storage-home Start reva storage-home service\nUsage: ocis-reva storage-home [command options] [arguments...]\n \u0026ndash;tracing-enabled | $REVA_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $REVA_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $REVA_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $REVA_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $REVA_TRACING_SERVICE Service name for tracing. Default: reva. \u0026ndash;debug-addr | $REVA_STORAGE_HOME_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9155. \u0026ndash;debug-token | $REVA_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $REVA_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $REVA_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;jwt-secret | $REVA_JWT_SECRET Shared jwt secret for reva service communication. Default: Pive-Fumkiu4. \u0026ndash;network | $REVA_STORAGE_HOME_NETWORK Network to use for the reva service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: tcp. \u0026ndash;protocol | $REVA_STORAGE_HOME_PROTOCOL protocol for reva service, can be \u0026lsquo;http\u0026rsquo; or \u0026lsquo;grpc\u0026rsquo;. Default: grpc. \u0026ndash;addr | $REVA_STORAGE_HOME_ADDR Address to bind reva service. Default: 0.0.0.0:9154. \u0026ndash;url | $REVA_STORAGE_HOME_URL URL to use for the reva service. Default: localhost:9154. \u0026ndash;driver | $REVA_STORAGE_HOME_DRIVER storage driver, eg. local, eos, owncloud or s3. Default: owncloud. \u0026ndash;mount-path | $REVA_STORAGE_HOME_MOUNT_PATH mount path. Default: /home. \u0026ndash;mount-id | $REVA_STORAGE_HOME_MOUNT_ID mount id. Default: 1284d238-aa92-42ce-bdc4-0b0000009162. \u0026ndash;expose-data-server | $REVA_STORAGE_HOME_EXPOSE_DATA_SERVER exposes a dedicated data server. Default: true. \u0026ndash;data-server-url | $REVA_STORAGE_HOME_DATA_SERVER_URL data server url. Default: http://localhost:9156/data. \u0026ndash;enable-home-creation | $REVA_STORAGE_HOME_ENABLE_HOME_CREATION if enabled home dirs will be automatically created. Default: true. \u0026ndash;storage-eos-namespace | $REVA_STORAGE_EOS_NAMESPACE Namespace for metadata operations. Default: /eos/dockertest/reva/users. \u0026ndash;storage-eos-shadow-namespace | $REVA_STORAGE_EOS_SHADOW_NAMESPACE Shadow namespace where share references are stored. \u0026ndash;storage-eos-share-folder | $REVA_STORAGE_EOS_SHARE_FOLDER name of the share folder. Default: /Shares. \u0026ndash;storage-eos-binary | $REVA_STORAGE_EOS_BINARY Location of the eos binary. Default: /usr/bin/eos. \u0026ndash;storage-eos-xrdcopy-binary | $REVA_STORAGE_EOS_XRDCOPY_BINARY Location of the xrdcopy binary. Default: /usr/bin/xrdcopy. \u0026ndash;storage-eos-master-url | $REVA_STORAGE_EOS_MASTER_URL URL of the Master EOS MGM. Default: root://eos-mgm1.eoscluster.cern.ch:1094. \u0026ndash;storage-eos-slave-url | $REVA_STORAGE_EOS_SLAVE_URL URL of the Slave EOS MGM. Default: root://eos-mgm1.eoscluster.cern.ch:1094. \u0026ndash;storage-eos-cache-directory | $REVA_STORAGE_EOS_CACHE_DIRECTORY Location on the local fs where to store reads. Default: os.TempDir(). \u0026ndash;storage-eos-enable-logging | $REVA_STORAGE_EOS_ENABLE_LOGGING Enables logging of the commands executed. \u0026ndash;storage-eos-show-hidden-sysfiles | $REVA_STORAGE_EOS_SHOW_HIDDEN_SYSFILES show internal EOS files like .sys.v# and .sys.a# files.. \u0026ndash;storage-eos-force-singleuser-mode | $REVA_STORAGE_EOS_FORCE_SINGLEUSER_MODE force connections to EOS to use SingleUsername. \u0026ndash;storage-eos-use-keytab | $REVA_STORAGE_EOS_USE_KEYTAB authenticate requests by using an EOS keytab. \u0026ndash;storage-eos-enable-home | $REVA_STORAGE_EOS_ENABLE_HOME enable the creation of home directories. Default: true. \u0026ndash;storage-eos-sec-protocol | $REVA_STORAGE_EOS_SEC_PROTOCOL the xrootd security protocol to use between the server and EOS. \u0026ndash;storage-eos-keytab | $REVA_STORAGE_EOS_KEYTAB the location of the keytab to use to authenticate to EOS. \u0026ndash;storage-eos-single-username | $REVA_STORAGE_EOS_SINGLE_USERNAME the username to use when SingleUserMode is enabled. \u0026ndash;storage-eos-layout | $REVA_STORAGE_EOS_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.UsernameLower}} and {{.Provider}} also supports prefixing dirs: \u0026quot;{{substr 0 1 .Username}}/{{.Username}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;E/Einstein\u0026quot; . Default: {{substr 0 1 .Username}}/{{.Username}}. \u0026ndash;storage-local-root | $REVA_STORAGE_LOCAL_ROOT the path to the local storage root. Default: /var/tmp/reva/root. \u0026ndash;storage-owncloud-datadir | $REVA_STORAGE_OWNCLOUD_DATADIR the path to the owncloud data directory. Default: /var/tmp/reva/data. \u0026ndash;storage-owncloud-scan | $REVA_STORAGE_OWNCLOUD_SCAN scan files on startup to add fileids. Default: true. \u0026ndash;storage-owncloud-redis | $REVA_STORAGE_OWNCLOUD_REDIS_ADDR the address of the redis server. Default: :6379. \u0026ndash;storage-owncloud-enable-home | $REVA_STORAGE_OWNCLOUD_ENABLE_HOME enable the creation of home storages. Default: true. \u0026ndash;storage-owncloud-layout | $REVA_STORAGE_OWNCLOUD_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.UsernameLower}} and {{.Provider}} also supports prefixing dirs: \u0026quot;{{.UsernamePrefixCount.2}}/{{.UsernameLower}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: {{.Username}}.  ocis-reva storage-oc-data Start reva storage-oc-data service\nUsage: ocis-reva storage-oc-data [command options] [arguments...]\n \u0026ndash;tracing-enabled | $REVA_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $REVA_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $REVA_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $REVA_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $REVA_TRACING_SERVICE Service name for tracing. Default: reva. \u0026ndash;debug-addr | $REVA_STORAGE_OC_DATA_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9161. \u0026ndash;debug-token | $REVA_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $REVA_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $REVA_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;jwt-secret | $REVA_JWT_SECRET Shared jwt secret for reva service communication. Default: Pive-Fumkiu4. \u0026ndash;network | $REVA_STORAGE_EOS_DATA_NETWORK Network to use for the reva service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: tcp. \u0026ndash;protocol | $REVA_STORAGE_EOS_DATA_PROTOCOL protocol for reva service, can be \u0026lsquo;http\u0026rsquo; or \u0026lsquo;grpc\u0026rsquo;. Default: http. \u0026ndash;addr | $REVA_STORAGE_EOS_DATA_ADDR Address to bind reva service. Default: 0.0.0.0:9160. \u0026ndash;url | $REVA_STORAGE_EOS_DATA_URL URL to use for the reva service. Default: localhost:9160. \u0026ndash;driver | $REVA_STORAGE_EOS_DATA_DRIVER storage driver, eg. local, eos, owncloud or s3. Default: eos. \u0026ndash;prefix | $REVA_STORAGE_EOS_DATA_PREFIX prefix for the http endpoint, without leading slash. Default: data. \u0026ndash;temp-folder | $REVA_STORAGE_EOS_DATA_TEMP_FOLDER temp folder. Default: /var/tmp/. \u0026ndash;storage-eos-namespace | $REVA_STORAGE_EOS_NAMESPACE Namespace for metadata operations. Default: /eos/dockertest/reva. \u0026ndash;storage-eos-shadow-namespace | $REVA_STORAGE_EOS_SHADOW_NAMESPACE Shadow namespace where share references are stored. \u0026ndash;storage-eos-share-folder | $REVA_STORAGE_EOS_SHARE_FOLDER name of the share folder. Default: /Shares. \u0026ndash;storage-eos-binary | $REVA_STORAGE_EOS_BINARY Location of the eos binary. Default: /usr/bin/eos. \u0026ndash;storage-eos-xrdcopy-binary | $REVA_STORAGE_EOS_XRDCOPY_BINARY Location of the xrdcopy binary. Default: /usr/bin/xrdcopy. \u0026ndash;storage-eos-master-url | $REVA_STORAGE_EOS_MASTER_URL URL of the Master EOS MGM. Default: root://eos-mgm1.eoscluster.cern.ch:1094. \u0026ndash;storage-eos-slave-url | $REVA_STORAGE_EOS_SLAVE_URL URL of the Slave EOS MGM. Default: root://eos-mgm1.eoscluster.cern.ch:1094. \u0026ndash;storage-eos-cache-directory | $REVA_STORAGE_EOS_CACHE_DIRECTORY Location on the local fs where to store reads. Default: os.TempDir(). \u0026ndash;storage-eos-enable-logging | $REVA_STORAGE_EOS_ENABLE_LOGGING Enables logging of the commands executed. \u0026ndash;storage-eos-show-hidden-sysfiles | $REVA_STORAGE_EOS_SHOW_HIDDEN_SYSFILES show internal EOS files like .sys.v# and .sys.a# files.. \u0026ndash;storage-eos-force-singleuser-mode | $REVA_STORAGE_EOS_FORCE_SINGLEUSER_MODE force connections to EOS to use SingleUsername. \u0026ndash;storage-eos-use-keytab | $REVA_STORAGE_EOS_USE_KEYTAB authenticate requests by using an EOS keytab. \u0026ndash;storage-eos-enable-home | $REVA_STORAGE_EOS_ENABLE_HOME enable the creation of home directories. \u0026ndash;storage-eos-sec-protocol | $REVA_STORAGE_EOS_SEC_PROTOCOL the xrootd security protocol to use between the server and EOS. \u0026ndash;storage-eos-keytab | $REVA_STORAGE_EOS_KEYTAB the location of the keytab to use to authenticate to EOS. \u0026ndash;storage-eos-single-username | $REVA_STORAGE_EOS_SINGLE_USERNAME the username to use when SingleUserMode is enabled. \u0026ndash;storage-eos-layout | $REVA_STORAGE_EOS_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.UsernameLower}} and {{.Provider}} also supports prefixing dirs: \u0026quot;{{.UsernamePrefixCount.2}}/{{.UsernameLower}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: {{substr 0 1 .Username}}/{{.Username}}. \u0026ndash;storage-local-root | $REVA_STORAGE_LOCAL_ROOT the path to the local storage root. Default: /var/tmp/reva/root. \u0026ndash;storage-owncloud-datadir | $REVA_STORAGE_OWNCLOUD_DATADIR the path to the owncloud data directory. Default: /var/tmp/reva/data. \u0026ndash;storage-owncloud-scan | $REVA_STORAGE_OWNCLOUD_SCAN scan files on startup to add fileids. Default: true. \u0026ndash;storage-owncloud-redis | $REVA_STORAGE_OWNCLOUD_REDIS_ADDR the address of the redis server. Default: :6379. \u0026ndash;storage-owncloud-enable-home | $REVA_STORAGE_OWNCLOUD_ENABLE_HOME enable the creation of home storages. Default: false. \u0026ndash;storage-owncloud-layout | $REVA_STORAGE_OWNCLOUD_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.UsernameLower}} and {{.Provider}} also supports prefixing dirs: \u0026quot;{{.UsernamePrefixCount.2}}/{{.UsernameLower}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: {{.Username}}. \u0026ndash;gateway-url | $REVA_GATEWAY_URL URL to use for the reva gateway service. Default: localhost:9142.  "});index.add({'id':20,'href':'/extensions/ocis_hello/building/','title':"Building",'content':"    Frontend Backend     As this project is built with Go and NodeJS, so you need to install that first. The installation of Go and NodeJS is out of the scope of this document, please follow the official documentation for Go, NodeJS and Yarn, to build this project you have to install Go \u0026gt;= v1.13. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-hello.git cd ocis-hello All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile and respectively our package.json.\nFrontend yarn install yarn build The above commands will install the required build dependencies and build the whole frontend bundle. This bundle will we embeded into the binary later on.\nBackend make generate make build The above commands will embed the frontend bundle into the binary. Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis-hello -h to see all available options.\n"});index.add({'id':21,'href':'/clients/web/building/','title':"Building from source",'content':"    Building Phoenix Updating dependencies Cleaning up the workspace Buildling the documentation  Setting up Viewing the documentation Deploying the documentation       Building Phoenix  Run yarn install to install core dependencies Run yarn install-all to install dependencies of all apps and core Run yarn dist to build Phoenix and all apps included in the apps folder  Updating dependencies  Run yarn upgrade-all to update core and app dependencies  Cleaning up the workspace  Run yarn clean-all to remove node_modules and dist folder  Buildling the documentation Setting up  Install hugo Run make docs  Viewing the documentation To view the rendered docs in the browser run:\ncd hugo hugo -D server Then open \u0026ldquo;http://localhost:1313/\u0026rdquo;\nWhen making changes to the docs, run make docs again and the server will pick up the changes and reload the page automatically\nDeploying the documentation The documentation is automatically deployed from the master branch to https://owncloud.github.io/phoenix/\n"});index.add({'id':22,'href':'/extensions/ocis_accounts/getting-started/','title':"Getting Started",'content':"    Installation  Docker Binaries   Configuration  Envrionment variables  Server   Commandline flags Configuration file   Usage  Server       Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker TBD\nBinaries TBD\nConfiguration We provide overall three different variants of configuration. The variant based on environment variables and commandline flags are split up into global values and command-specific values.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nServer  OCIS_ACCOUNTS_MANAGER Enable sending traces, defaults to filesystem OCIS_ACCOUNTS_MOUNT_PATH Mounting point for the accounts service when running on the filesystem as manager. OCIS_ACCOUNTS_NAME Name of the accounts service. It will be part of the namespace. OCIS_ACCOUNTS_NAMESPACE Namespace of the accounts service. OCIS_ACCOUNTS_ADDRESS Endpoint for the grpc service endpoint.  Commandline flags If you prefer to configure the service with commandline flags you can see the available variables below.\nConfiguration file So far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/accounts.yml, ${HOME}/.ocis/accounts.yml or $(pwd)/config/accounts.yml.\nUsage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis-accounts --help.\nServer The server command is used to start the grpc server. For further help please execute:\nocis-accounts server --help "});index.add({'id':23,'href':'/extensions/ocis_glauth/getting-started/','title':"Getting Started",'content':"    Installation  Docker Binaries   Configuration  Envrionment variables  Global Server Health   Commandline flags  Global Server Health   Configuration file   Usage  Server Health   Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker TBD\nBinaries TBD\nConfiguration We provide overall three different variants of configuration. The variant based on environment variables and commandline flags are split up into global values and command-specific values.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nGlobal  GLAUTH_CONFIG_FILE Path to config file, empty default value GLAUTH_LOG_LEVEL Set logging level, defaults to info GLAUTH_LOG_COLOR Enable colored logging, defaults to true GLAUTH_LOG_PRETTY Enable pretty logging, defaults to true  Server  GLAUTH_TRACING_ENABLED Enable sending traces, defaults to false GLAUTH_TRACING_TYPE Tracing backend type, defaults to jaeger GLAUTH_TRACING_ENDPOINT Endpoint for the agent, empty default value GLAUTH_TRACING_COLLECTOR Endpoint for the collector, empty default value GLAUTH_TRACING_SERVICE Service name for tracing, defaults to glauth GLAUTH_DEBUG_ADDR Address to bind debug server, defaults to 0.0.0.0:9124 GLAUTH_DEBUG_TOKEN Token to grant metrics access, empty default value GLAUTH_DEBUG_PPROF Enable pprof debugging, defaults to false GLAUTH_DEBUG_ZPAGES Enable zpages debugging, defaults to false GLAUTH_HTTP_ADDR Address to bind http server, defaults to 0.0.0.0:9120 GLAUTH_HTTP_NAMESPACE The http namespace GLAUTH_HTTP_ROOT Root path of http server, defaults to /  Health  GLAUTH_DEBUG_ADDR Address to debug endpoint, defaults to 0.0.0.0:9124  Commandline flags If you prefer to configure the service with commandline flags you can see the available variables below.\nGlobal  \u0026ndash;config-file Path to config file, empty default value \u0026ndash;log-level Set logging level, defaults to info \u0026ndash;log-color Enable colored logging, defaults to true \u0026ndash;log-pretty Enable pretty logging, defaults to true  Server  \u0026ndash;tracing-enabled Enable sending traces, defaults to false \u0026ndash;tracing-type Tracing backend type, defaults to jaeger \u0026ndash;tracing-endpoint Endpoint for the agent, empty default value \u0026ndash;tracing-collector Endpoint for the collector, empty default value \u0026ndash;tracing-service Service name for tracing, defaults to glauth \u0026ndash;debug-addr Address to bind debug server, defaults to 0.0.0.0:9124 \u0026ndash;debug-token Token to grant metrics access, empty default value \u0026ndash;debug-pprof Enable pprof debugging, defaults to false \u0026ndash;debug-zpages Enable zpages debugging, defaults to false \u0026ndash;http-addr Address to bind http server, defaults to 0.0.0.0:9120 \u0026ndash;http-namespace Namespace for internal services communication, defaults to com.owncloud.web \u0026ndash;http-root Root path of http server, defaults to /  Health  \u0026ndash;debug-addr Address to debug endpoint, defaults to 0.0.0.0:9124  Configuration file So far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/glauth.yml, ${HOME}/.ocis/glauth.yml or $(pwd)/config/glauth.yml.\nUsage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis-glauth --help.\nServer The server command is used to start the http and debug server on two addresses within a single process. The http server is serving the general webservice while the debug server is used for health check, readiness check and to server the metrics mentioned below. For further help please execute:\nocis-glauth server --help Health The health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\nocis-glauth health --help Metrics This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which got to be configured through one of the flag --debug-token or the environment variable GLAUTH_DEBUG_TOKEN mentioned above. By default the metrics endpoint is bound to http://0.0.0.0:9124/metrics.\n go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program\u0026rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  "});index.add({'id':24,'href':'/extensions/ocis_phoenix/getting-started/','title':"Getting Started",'content':"    Installation  Docker Binaries   Configuration  Envrionment variables  Global Server Health   Commandline flags  Global Server Health   Configuration file   Usage  Server Health   Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker TBD\nBinaries TBD\nConfiguration We provide overall three different variants of configuration. The variant based on environment variables and commandline flags are split up into global values and command-specific values.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nGlobal  PHOENIX_CONFIG_FILE Path to config file, empty default value PHOENIX_LOG_LEVEL Set logging level, defaults to info PHOENIX_LOG_COLOR Enable colored logging, defaults to true PHOENIX_LOG_PRETTY Enable pretty logging, defaults to true  Server  PHOENIX_TRACING_ENABLED Enable sending traces, defaults to false PHOENIX_TRACING_TYPE Tracing backend type, defaults to jaeger PHOENIX_TRACING_ENDPOINT Endpoint for the agent, empty default value PHOENIX_TRACING_COLLECTOR Endpoint for the collector, empty default value PHOENIX_TRACING_SERVICE Service name for tracing, defaults to phoenix PHOENIX_DEBUG_ADDR Address to bind debug server, defaults to 0.0.0.0:9104 PHOENIX_DEBUG_TOKEN Token to grant metrics access, empty default value PHOENIX_DEBUG_PPROF Enable pprof debugging, defaults to false PHOENIX_DEBUG_ZPAGES Enable zpages debugging, defaults to false PHOENIX_HTTP_ADDR Address to bind http server, defaults to 0.0.0.0:9100 PHOENIX_HTTP_ROOT Root path of http server, defaults to / PHOENIX_ASSET_PATH Path to custom assets, empty default value PHOENIX_WEB_CONFIG Path to phoenix config, empty default value PHOENIX_WEB_CONFIG_SERVER Server URL, defaults to http://localhost:9135 PHOENIX_WEB_CONFIG_THEME Theme, defaults to owncloud PHOENIX_WEB_CONFIG_VERSION Version, defaults to 0.1.0 PHOENIX_APPS Use multiple times to provide multiple apps PHOENIX_EXTERNAL_APPS Not supported yet, specify a config.json file via PHOENIX_WEB_CONFIG PHOENIX_OIDC_METADATA_URL OpenID Connect metadata URL, defaults to http://localhost:9130/.well-known/openid-configuration PHOENIX_OIDC_AUTHORITY OpenID Connect authority, defaults to http://localhost:9130 PHOENIX_OIDC_CLIENT_ID OpenID Connect client ID, defaults to phoenix PHOENIX_OIDC_RESPONSE_TYPE OpenID Connect response type, defaults to code PHOENIX_OIDC_SCOPE OpenID Connect scope, defaults to openid profile email  In case you want to render any additional properties in the config.json you can provide a custom config.json using eg. PHOENIX_WEB_CONFIG=/path/to/config.json ocis-phoenix server\nHealth  PHOENIX_DEBUG_ADDR Address to debug endpoint, defaults to 0.0.0.0:9104  Commandline flags If you prefer to configure the service with commandline flags you can see the available variables below.\nGlobal  \u0026ndash;config-file Path to config file, empty default value \u0026ndash;log-level Set logging level, defaults to info \u0026ndash;log-color Enable colored logging, defaults to true \u0026ndash;log-pretty Enable pretty logging, defaults to true  Server  \u0026ndash;tracing-enabled Enable sending traces, defaults to false \u0026ndash;tracing-type Tracing backend type, defaults to jaeger \u0026ndash;tracing-endpoint Endpoint for the agent, empty default value \u0026ndash;tracing-collector Endpoint for the collector, empty default value \u0026ndash;tracing-service Service name for tracing, defaults to phoenix \u0026ndash;debug-addr Address to bind debug server, defaults to 0.0.0.0:9104 \u0026ndash;debug-token Token to grant metrics access, empty default value \u0026ndash;debug-pprof Enable pprof debugging, defaults to false \u0026ndash;debug-zpages Enable zpages debugging, defaults to false \u0026ndash;http-addr Address to bind http server, defaults to 0.0.0.0:9100 \u0026ndash;http-root Root path of http server, defaults to / \u0026ndash;asset-path Path to custom assets, empty default value \u0026ndash;web-config Path to phoenix config, empty default value \u0026ndash;web-config-server Server URL, defaults to http://localhost:9135 \u0026ndash;web-config-theme Theme, defaults to owncloud \u0026ndash;web-config-version Version, defaults to 0.1.0 \u0026ndash;web-config-app Provide multiple apps, defaults to \u0026quot;\u0026quot;. Usage: phoenix --web-config-app files --web-config-app pdf-viewer \u0026ndash;oidc-metadata-url OpenID Connect metadata URL, defaults to http://localhost:9130/.well-known/openid-configuration \u0026ndash;oidc-authority OpenID Connect authority, defaults to http://localhost:9130 \u0026ndash;oidc-client-id OpenID Connect client ID, defaults to phoenix \u0026ndash;oidc-response-type OpenID Connect response type, defaults to code \u0026ndash;oidc-scope OpenID Connect scope, defaults to openid profile email  In case you want to render any additional properties in the config.json you can provide a custom config.json using eg. ocis-phoenix server --web-config=/path/to/config.json\nHealth  \u0026ndash;debug-addr Address to debug endpoint, defaults to 0.0.0.0:9104  Configuration file So far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/phoenix.yml, ${HOME}/.ocis/phoenix.yml or $(pwd)/config/phoenix.yml.\nUsage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis-phoenix --help.\nServer The server command is used to start the http and debug server on two addresses within a single process. The http server is serving the general webservice while the debug server is used for health check, readiness check and to server the metrics mentioned below. For further help please execute:\nocis-phoenix server --help Health The health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\nocis-phoenix health --help Metrics This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which got to be configured through one of the flag --debug-token or the environment variable PHOENIX_DEBUG_TOKEN mentioned above. By default the metrics endpoint is bound to http://0.0.0.0:9104/metrics.\n go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program\u0026rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  "});index.add({'id':25,'href':'/extensions/ocis_thumbnails/getting-started/','title':"Getting Started",'content':"    Installation  Docker Binaries   Configuration  Envrionment variables  Global Server Health   Commandline flags  Global Server Health   Configuration file   Usage  Server Health   Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker TBD\nBinaries TBD\nConfiguration We provide overall three different variants of configuration. The variant based on environment variables and commandline flags are split up into global values and command-specific values.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nGlobal  THUMBNAILS_CONFIG_FILE Path to config file, empty default value THUMBNAILS_LOG_LEVEL Set logging level, defaults to info THUMBNAILS_LOG_COLOR Enable colored logging, defaults to true THUMBNAILS_LOG_PRETTY Enable pretty logging, defaults to true  Server  THUMBNAILS_TRACING_ENABLED Enable sending traces, defaults to false THUMBNAILS_TRACING_TYPE Tracing backend type, defaults to jaeger THUMBNAILS_TRACING_ENDPOINT Endpoint for the agent, empty default value THUMBNAILS_TRACING_COLLECTOR Endpoint for the collector, empty default value THUMBNAILS_TRACING_SERVICE Service name for tracing, defaults to ocis-thumbnails THUMBNAILS_DEBUG_ADDR Address to bind debug server, defaults to 0.0.0.0:9114 THUMBNAILS_DEBUG_TOKEN Token to grant metrics access, empty default value THUMBNAILS_DEBUG_PPROF Enable pprof debugging, defaults to false THUMBNAILS_DEBUG_ZPAGES Enable zpages debugging, defaults to false THUMBNAILS_GRPC_NAME Name of the service, defaults to thumbnails THUMBNAILS_GRPC_ADDR Address to bind grpc server, defaults to 0.0.0.0:9185 THUMBNAILS_GRPC_NAMESPACE Set the base namespace for the grpc namespace\u0026rdquo;, defaults to com.owncloud.api THUMBNAILS_FILESYSTEMSTORAGE_ROOT Root path of the filesystem storage directory, defaults to \u0026lt;os tempdir\u0026gt;/ocis-thumbnails/ THUMBNAILS_WEBDAVSOURCE_BASEURL Base url for a webdav api, defaults to htp://localhost:9140/remote.php/webdav/ THUMBNAILS_RESOLUTIONS List of resolutions supported by the service, defaults to `[\u0026ldquo;16x16\u0026rdquo;, \u0026ldquo;32x32\u0026rdquo;, \u0026ldquo;64x64\u0026rdquo;, \u0026ldquo;128x128\u0026rdquo;]  Health  THUMBNAILS_DEBUG_ADDR Address to debug endpoint, defaults to 0.0.0.0:9189  Commandline flags If you prefer to configure the service with commandline flags you can see the available variables below.\nGlobal  \u0026ndash;config-file Path to config file, empty default value \u0026ndash;log-level Set logging level, defaults to info \u0026ndash;log-color Enable colored logging, defaults to true \u0026ndash;log-pretty Enable pretty logging, defaults to true  Server  \u0026ndash;tracing-enabled Enable sending traces, defaults to false \u0026ndash;tracing-type Tracing backend type, defaults to jaeger \u0026ndash;tracing-endpoint Endpoint for the agent, empty default value \u0026ndash;tracing-collector Endpoint for the collector, empty default value \u0026ndash;tracing-service Service name for tracing, defaults to thumbnails \u0026ndash;debug-addr Address to bind debug server, defaults to 0.0.0.0:9189 \u0026ndash;debug-token Token to grant metrics access, empty default value \u0026ndash;debug-pprof Enable pprof debugging, defaults to false \u0026ndash;debug-zpages Enable zpages debugging, defaults to false \u0026ndash;grpc-name Name of the service, defaults to thumbnails \u0026ndash;grpc-addr Address to bind grpc server, defaults to 0.0.0.0:9185 \u0026ndash;grpc-namespace Set the base namespace for the grpc namespace\u0026rdquo;, defaults to com.owncloud.api \u0026ndash;filesystemstorage-root Root path of the filesystem storage directory, defaults to \u0026lt;os tempdir\u0026gt;/ocis-thumbnails/ \u0026ndash;webdavsource-baseurl Base url for a webdav api, defaults to htp://localhost:9140/remote.php/webdav/ \u0026ndash;thumbnail-resolution List of resolutions supported by the service, defaults to `[\u0026ldquo;16x16\u0026rdquo;, \u0026ldquo;32x32\u0026rdquo;, \u0026ldquo;64x64\u0026rdquo;, \u0026ldquo;128x128\u0026rdquo;]  Health  \u0026ndash;debug-addr Address to debug endpoint, defaults to 0.0.0.0:9189  Configuration file So far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/thumbnails.yml, ${HOME}/.ocis/thumbnails.yml or $(pwd)/config/thumbnails.yml.\nUsage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis-thumbnails --help.\nServer The server command is used to start the http and debug server on two addresses within a single process. The http server is serving the general webservice while the debug server is used for health check, readiness check and to server the metrics mentioned below. For further help please execute:\n{{ Name }} server --help Health The health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\n{{ Name }} health --help Metrics This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which got to be configured through one of the flag --debug-token or the environment variable THUMBNAILS_DEBUG_TOKEN mentioned above. By default the metrics endpoint is bound to http://0.0.0.0:9114/metrics.\n go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program\u0026rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  "});index.add({'id':26,'href':'/extensions/ocis_settings/getting-started/','title':"Getting Started",'content':"    Installation  Docker Binaries   Configuration  Envrionment variables  Global Server Health   Commandline flags  Global Server Health   Configuration file   Usage  Server Health   Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker TBD\nBinaries TBD\nConfiguration We provide overall three different variants of configuration. The variant based on environment variables and commandline flags are split up into global values and command-specific values.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nGlobal  SETTINGS_CONFIG_FILE Path to config file, empty default value SETTINGS_LOG_LEVEL Set logging level, defaults to info SETTINGS_LOG_COLOR Enable colored logging, defaults to true SETTINGS_LOG_PRETTY Enable pretty logging, defaults to true  Server  SETTINGS_TRACING_ENABLED Enable sending traces, defaults to false SETTINGS_TRACING_TYPE Tracing backend type, defaults to jaeger SETTINGS_TRACING_ENDPOINT Endpoint for the agent, empty default value SETTINGS_TRACING_COLLECTOR Endpoint for the collector, empty default value SETTINGS_TRACING_SERVICE Service name for tracing, defaults to settings SETTINGS_DEBUG_ADDR Address to bind debug server, defaults to 0.0.0.0:9194 SETTINGS_DEBUG_TOKEN Token to grant metrics access, empty default value SETTINGS_DEBUG_PPROF Enable pprof debugging, defaults to false SETTINGS_DEBUG_ZPAGES Enable zpages debugging, defaults to false SETTINGS_HTTP_ADDR Address to bind http server, defaults to 0.0.0.0:9190 SETTINGS_HTTP_NAMESPACE The http namespace SETTINGS_HTTP_ROOT Root path of http server, defaults to /  Health  SETTINGS_DEBUG_ADDR Address to debug endpoint, defaults to 0.0.0.0:9194  Commandline flags If you prefer to configure the service with commandline flags you can see the available variables below.\nGlobal  \u0026ndash;config-file Path to config file, empty default value \u0026ndash;log-level Set logging level, defaults to info \u0026ndash;log-color Enable colored logging, defaults to true \u0026ndash;log-pretty Enable pretty logging, defaults to true  Server  \u0026ndash;tracing-enabled Enable sending traces, defaults to false \u0026ndash;tracing-type Tracing backend type, defaults to jaeger \u0026ndash;tracing-endpoint Endpoint for the agent, empty default value \u0026ndash;tracing-collector Endpoint for the collector, empty default value \u0026ndash;tracing-service Service name for tracing, defaults to settings \u0026ndash;debug-addr Address to bind debug server, defaults to 0.0.0.0:9194 \u0026ndash;debug-token Token to grant metrics access, empty default value \u0026ndash;debug-pprof Enable pprof debugging, defaults to false \u0026ndash;debug-zpages Enable zpages debugging, defaults to false \u0026ndash;http-addr Address to bind http server, defaults to 0.0.0.0:9190 \u0026ndash;http-namespace Namespace for internal services communication, defaults to com.owncloud.web \u0026ndash;http-root Root path of http server, defaults to /  Health  \u0026ndash;debug-addr Address to debug endpoint, defaults to 0.0.0.0:9194  Configuration file So far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/settings.yml, ${HOME}/.ocis/settings.yml or $(pwd)/config/settings.yml.\nUsage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis-settings --help.\nServer The server command is used to start the http and debug server on two addresses within a single process. The http server is serving the general webservice while the debug server is used for health check, readiness check and to server the metrics mentioned below. For further help please execute:\nocis-settings server --help Health The health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\nocis-settings health --help Metrics This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which got to be configured through one of the flag --debug-token or the environment variable SETTINGS_DEBUG_TOKEN mentioned above. By default the metrics endpoint is bound to http://0.0.0.0:9194/metrics.\n go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program\u0026rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  "});index.add({'id':27,'href':'/ocis/bridge/','title':"Bridge",'content':"    Current status How to do it  Install the owncloud 10 graphapi app Enable the graphapi app Start ocis-glauth  Grab it! Run it! Check it is up and running   Start ocis-phoenix  Get it! Run it!   Start ocis-konnectd  Get it! Set environment variables   Configure clients  Run it! Check it is up and running   Patch owncloud Install the owncloud 10 openidconnect app   Next steps     We are planning to build a bridge from ownCloud 10 to ocis. The idea is to have a reverse proxy infront of ownCloud 10 that will forward requests to ownCloud 10 or ocis-reva, depending on the migration status of the logged in user.\nThis document is a work in progress of the current setup.\nCurrent status Using ocis and the ownCloud 10 openidconnect and graphapi plugins it is possible today to introduce openid connect based authentication to existing instances. That is a prerequisite for migrating to ocis.\nHow to do it Install the owncloud 10 graphapi app In an owncloud 10 apps folder\n$ git clone git@github.com:owncloud/graphapi.git $ cd graphapi $ composer install Enable the graphapi app occ a:e graphapi No configuration necessary. You can test with curl:\n$ curl https://cloud.example.com/index.php/apps/graphapi/v1.0/users -u admin | jq Enter host password for user \u0026#39;admin\u0026#39;: % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 694 100 694 0 0 4283 0 --:--:-- --:--:-- --:--:-- 4283 { \u0026#34;value\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;mail\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;Demo\u0026#34;, \u0026#34;mail\u0026#34;: null }, ... ], \u0026#34;@odata.nextLink\u0026#34;: \u0026#34;https://oc.butonic.de/apps/graphapi/v1.0/users?$top=10\u0026amp;$skip=10\u0026#34; }  Note: The MS graph api actually asks for Bearer auth, but in order to check users passwords during an LDAP bind we are exploiting ownClouds authentication implementation that will grant access when Basic auth is used. An LDAP Bind you may ask? Read on!\n Start ocis-glauth We are going to use the above ownCloud 10 and graphapi app to turn it into the datastore for an LDAP proxy.\nGrab it! In an ocis folder\n$ git clone git@github.com:owncloud/ocis-glauth.git $ cd ocis-glauth $ make This should give you a bin/ocis-glauth binary. Try listing the help with bin/ocis-glauth --help.\nRun it! You need to point ocis-glauth to your owncloud domain:\n$ bin/ocis-glauth --log-level debug server --backend-server https://cloud.example.com --backend-basedn dc=example,dc=com --log-level debug is only used to generate more verbose output --backend-server https://cloud.example.com is the url to an ownCloud instance with an enabled graphapi app --backend-basedn dc=example,dc=com is used to construct the LDAP dn. The user admin will become cn=admin,dc=example,dc=com.\nCheck it is up and running You should now be able to list accounts from your ownCloud 10 oc_accounts table using:\n$ ldapsearch -x -H ldap://localhost:9125 -b dc=example,dc=com -D \u0026#34;cn=admin,dc=example,dc=com\u0026#34; -W \u0026#39;(objectclass=posixaccount)\u0026#39; Groups should work as well:\n$ ldapsearch -x -H ldap://localhost:9125 -b dc=example,dc=com -D \u0026#34;cn=admin,dc=example,dc=com\u0026#34; -W \u0026#39;(objectclass=posixgroup)\u0026#39;  Note: This is currently a readonly implementation and minimal to the usecase of authenticating users with konnectd.\n Start ocis-phoenix Get it! In an ocis folder\n$ git clone git@github.com:owncloud/ocis-phoenix.git $ cd ocis-phoenix $ make This should give you a bin/ocis-phoenix binary. Try listing the help with bin/ocis-phoenix --help.\nRun it! Point ocis-phoenix to your owncloud domain and tell it where to find the openid connect issuing authority:\n$ bin/ocis-phoenix server --web-config-server https://cloud.example.com --oidc-authority https://192.168.1.100:9130 --oidc-metadata-url https://192.168.1.100:9130/.well-known/openid-configuration --oidc-client-id ocis ocis-phoenix needs to know\n --web-config-server https://cloud.example.com is ownCloud url with webdav and ocs endpoints (oc10 or ocis) --oidc-authority https://192.168.1.100:9130 the openid connect issuing authority, in our case oidc-konnectd, running on port 9130 --oidc-metadata-url https://192.168.1.100:9130/.well-known/openid-configuration the openid connect configuration endpoint, typically the issuer host with .well-known/openid-configuration, but there are cases when another endpoint is used, eg. ping identity provides multiple endpoints to separate domains --oidc-client-id ocis the client id we will register later with ocis-konnectd in the identifier-registration.yaml  Start ocis-konnectd Get it! In an ocis folder\n$ git clone git@github.com:owncloud/ocis-konnectd.git $ cd ocis-konnectd $ make This should give you a bin/ocis-konnectd binary. Try listing the help with bin/ocis-konnectd --help.\nSet environment variables Konnectd needs environment variables to configure the LDAP server:\nexport LDAP_URI=ldap://192.168.1.100:9125 export LDAP_BINDDN=\u0026#34;cn=admin,dc=example,dc=com\u0026#34; export LDAP_BINDPW=\u0026#34;its-a-secret\u0026#34; export LDAP_BASEDN=\u0026#34;dc=example,dc=com\u0026#34; export LDAP_SCOPE=sub export LDAP_LOGIN_ATTRIBUTE=uid export LDAP_EMAIL_ATTRIBUTE=mail export LDAP_NAME_ATTRIBUTE=givenName export LDAP_UUID_ATTRIBUTE=uid export LDAP_UUID_ATTRIBUTE_TYPE=text export LDAP_FILTER=\u0026#34;(objectClass=posixaccount)\u0026#34; Don\u0026rsquo;t forget to use an existing user and the correct password.\nConfigure clients Now we need to configure a client we can later use to configure the ownCloud 10 openidconnect app. In the assets/identifier-registration.yaml have:\n---# OpenID Connect client registry.clients:- id:ocisname:ownCloudInfiniteScaleinsecure:yesapplication_type:webredirect_uris:- https://cloud.example.com/apps/openidconnect/redirect- http://localhost:9100/oidc-callback.html- http://localhost:9100- http://localhost:9100/You will need the insecure: yes if you are using self signed certificates.\nReplace cloud.example.com in the redirect URI with your ownCloud 10 host and port. Replace localhost:9100 in the redirect URIs with your the ocis-phoenix host and port.\nRun it! You can now bring up ocis-connectd with:\n$ bin/ocis-konnectd server --iss https://192.168.1.100:9130 --identifier-registration-conf assets/identifier-registration.yaml --signing-kid gen1-2020-02-27 ocis-konnectd needs to know\n --iss https://192.168.1.100:9130 the issuer, which must be a reachable https endpoint. For testing an ip works. HTTPS is NOT optional. This url is exposed in the https://192.168.1.100:9130/.well-known/openid-configuration endpoint and clients need to be able to connect to it --identifier-registration-conf assets/identifier-registration.yaml the identifier-registration.yaml you created --signing-kid gen1-2020-02-27 a signature key id, otherwise the jwks key has no name, which might cause problems with clients. a random key is ok, but it should change when the actual signing key changes.  Check it is up and running  Try getting the configuration:  $ curl https://192.168.1.100:9130/.well-known/openid-configuration Check if the login works at https://192.168.1.100:9130/signin/v1/identifier   Note: If you later get a Unable to find a key for (algorithm, kid):PS256, ) Error make sure you did set a --signing-kid when starting ocis-konnectd by checking it is present in https://192.168.1.100:9130/konnect/v1/jwks.json\n Patch owncloud While the UserSession in ownCloud 10 is currently used to test all available IAuthModule implementations, it immediately logs out the user when an exception occurs. However, existing owncloud 10 instances use the oauth2 app to create Bearer tokens for mobile and desktop clients.\nTo give the openidconnect app a chance to verify the tokens we need to change the code a bit. See https://github.com/owncloud/core/pull/37043 for a possible solution.\n Note: The PR is hot \u0026hellip; as in younger than this list of steps. And it messes with authentication. Use with caution.\n Install the owncloud 10 openidconnect app In an owncloud 10 apps folder\n$ git clone git@github.com:owncloud/openidconnect.git $ cd openidconnect $ composer install After enabling the app configure it in config/oidc.config.php\n$CONFIG = [ \u0026#39;openid-connect\u0026#39; =\u0026gt; [ \u0026#39;provider-url\u0026#39; =\u0026gt; \u0026#39;https://192.168.1.100:9130\u0026#39;, \u0026#39;client-id\u0026#39; =\u0026gt; \u0026#39;ocis\u0026#39;, \u0026#39;loginButtonName\u0026#39; =\u0026gt; \u0026#39;OpenId Connect @ Konnectd\u0026#39;, ], \u0026#39;debug\u0026#39; =\u0026gt; true, // if using self signed certificates // allow the different domains access to the ocs and wabdav endpoints: \u0026#39;cors.allowed-domains\u0026#39; =\u0026gt; [ \u0026#39;https://cloud.example.com\u0026#39;, \u0026#39;http://localhost:9100\u0026#39;, ], ]; In the above configuration replace\n provider-url with the URL to your ocis-konnectd issuer https://cloud.example.com with the URL to your ownCloud 10 instance http://localhost:9100 with the URL to your phoenix instance   Note: By default the openidconnect app will use the email of the user to match the user from the oidc userinfo endpoint with the ownCloud account. So make sure your users have a unique primary email.\n Next steps Aside from the above todos these are the next stepo\n tie it all together behind ocis-proxy create an ocis bridge command that runs all the ocis services in one step with a properly preconfigured ocis-konnectd identifier-registration.yaml file for phoenix and the owncloud 10 openidconnect app, as well as a randomized --signing-kid.  "});index.add({'id':28,'href':'/ocis/eos/','title':"EOS",'content':"    Current status How to do it  Grab it! Run it! Test it!   Next steps     OCIS can be configured to run on top of eos. While the eos documentation does cover a lot of topics it leaves out some details that you may have to either pull from various docker containers, the forums or even the source itself.\nThis document is a work in progress of the current setup.\nCurrent status Using ocis and eos it is possible today to manage folders. Sharing is heavily under development. File up and download needs proper configuration of the dataprovider to also use eos.\nHow to do it Grab it! $ git clone git@github.com:owncloud/ocis.git $ cd ocis Run it! Preconditions\n go (from golang.org/dl) and gcc (via e.g. apt install build-essential) are installed No eos components are running. If in doubt, begin with make eos-stop  We poured the nitty gritty details of setting up ocis into Makefile targets. After running\n$ make eos-start the eos related docker containers will be created, started and setup to authenticate against the ocis-glauth service.\nIt will also copy the ocis binary to the eos-cli1 container and start ocis reva-storage-home with the necessary environment variables to use the eos storage driver.\nFor details have a look at the Makefile.\nTest it! You should now be able to point your browser to https://localhost:9200 and login using the demo user credentials, eg einstein:relativity.\nIf you encounter an error when the IdP redirects you back to phoenix, just reload the page and it should be gone \u0026hellip; or debug it. PR welcome!  Create a folder in the ui. Then check it was created in eos:\n$ docker exec -it eos-mgm1 eos ls -l /eos/dockertest/reva/users/e/einstein Now create a new folder in eos (using eos-mgm1 you will be logged in as admin, see the whoami, which is why we chown the folder to the uid and gid of einstein afterwards):\n$ docker exec -it eos-mgm1 eos whoami $ docker exec -it eos-mgm1 eos mkdir /eos/dockertest/reva/users/e/einstein/rocks $ docker exec -it eos-mgm1 eos chown 20000:30000 /eos/dockertest/reva/users/e/einstein/rocks Check that the folder exists in the web ui.\nNext steps  configure storage-home-data to enable file upload, PRs against ocis-reva welcome get sharing implemented, PRs against reva welcome simplify home logic, see https://github.com/cs3org/reva/issues/601 and https://github.com/cs3org/reva/issues/578  "});index.add({'id':29,'href':'/extensions/ocis_konnectd/building/','title':"Building",'content':"    Backend     As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go \u0026gt;= v1.13. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-konnectd.git cd ocis-konnectd All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile.\nBackend make generate make build Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis-konnectd -h to see all available options and subcommands.\n"});index.add({'id':30,'href':'/extensions/ocis_accounts/building/','title':"Building",'content':"    Backend     As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go \u0026gt;= v1.13. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-accounts.git cd ocis-accounts All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile.\nBackend make generate make build Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis-accounts -h to see all available options and subcommands.\n"});index.add({'id':31,'href':'/extensions/ocis_glauth/building/','title':"Building",'content':"    Backend     As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go \u0026gt;= v1.13. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-glauth.git cd ocis-glauth All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile.\nBackend make generate make build Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis-glauth -h to see all available options.\n"});index.add({'id':32,'href':'/extensions/ocis_phoenix/building/','title':"Building",'content':"As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go \u0026gt;= v1.12. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-phoenix.git cd ocis-phoenix All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile.\nBackend make generate make build The above commands will download a Phoenix release and embed it into the binary. Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis-phoenix -h to see all available options.\n"});index.add({'id':33,'href':'/extensions/ocis_proxy/building/','title':"Building",'content':"    Backend     As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go \u0026gt;= v1.13. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-proxy.git cd ocis-proxy All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile.\nBackend make generate make build Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis-proxy -h to see all available options and subcommands.\n"});index.add({'id':34,'href':'/extensions/ocis_reva/building/','title':"Building",'content':"As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go.To build this project you have to install Go \u0026gt;= v1.13. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-reva.git cd ocis-reva All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile.\nBackend make build The above command should produce the binary within the bin/ folder now, give it a try with ./bin/ocis-reva -h to see all available options.\n"});index.add({'id':35,'href':'/extensions/ocis_settings/building/','title':"Building",'content':"    Backend     As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go \u0026gt;= v1.12. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-settings.git cd ocis-settings All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile.\nBackend make generate make build Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis-settings -h to see all available options.\n"});index.add({'id':36,'href':'/extensions/ocis_thumbnails/building/','title':"Building",'content':"    Backend     As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go \u0026gt;= v1.12. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-thubnails.git cd {{ Name }} All required tool besides Go itself and make are bundled or getting automatically installed within the Gopath. All commands to build this project are part of our Makefile.\nBackend make generate make build Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis-thumbnails -h to see all available options.\n"});index.add({'id':37,'href':'/extensions/ocis_reva/users/','title':"Users",'content':"Demo driver This is a simple user driver for testing. It contains three users:\neinstein:relativity marie:radioactivty richard:superfluidity In order to use the demo driver you need to export the relevant environment variable:\nexport REVA_USERS_DRIVER=demo JSON driver In order to switch from the ldap driver to JSON based users you need to export the relevant environment variables:\nexport REVA_USERS_DRIVER=json export REVA_USERS_JSON=/path/to/users.json For the format of the users.json have a look at the reva examples\nLDAP driver This is the default user driver.\nIf the below defaults don\u0026rsquo;t match your environment change them accordingly:\nexport REVA_LDAP_HOSTNAME=localhost export REVA_LDAP_PORT=9126 export REVA_LDAP_BASE_DN=\u0026#39;dc=example,dc=org\u0026#39; export REVA_LDAP_USERFILTER=\u0026#39;(\u0026amp;(objectclass=posixAccount)(cn=%s))\u0026#39; export REVA_LDAP_GROUPFILTER=\u0026#39;(\u0026amp;(objectclass=posixGroup)(cn=%s))\u0026#39; export REVA_LDAP_BIND_DN=\u0026#39;cn=reva,ou=sysusers,dc=example,dc=org\u0026#39; export REVA_LDAP_BIND_PASSWORD=reva export REVA_LDAP_SCHEMA_UID=uid export REVA_LDAP_SCHEMA_MAIL=mail export REVA_LDAP_SCHEMA_DISPLAYNAME=sn export REVA_LDAP_SCHEMA_CN=cn Then restart the bin/ocis-reva users and bin/ocis-reva auth-basic services for the changes to take effect.\n"});index.add({'id':38,'href':'/extensions/ocis_reva/storages/','title':"Storages",'content':"Storage commands ocis-reva has multiple storage provider commands to preconfigure different default configurations for the reva storage provider service. While you could rerun ocis-reva storage-oc multiple times with different flags to get multiple instances we are giving the different commands the necessary default configuration to allow the ocis binary to simply start them and not deal with configuration.\nStorage providers To manage the file tree ocis uses reva storage providers that are accessing the underlying storage using a storage driver. The driver can be used to change the implementation of a storage aspect to better reflect the actual underying storage capabilities. As an example a move operation on a POSIX filesystem (theoretically) is an atomic operation. When trying to implement a file tree on top S3 there is no native move operation that can be used. A naive implementation might fall bak on a COPY and DELETE. Some S3 implementations provide a COPY operation that uses an existing key as the source, so the file at least does not need to be reuploaded. In the worst case scenario, the rename of a folder with hundreds of thousands of objects, a reupload for every file has to be made. Instead of hiding this complexity a better choice might be to disable renaming of files or at least folders on S3. There are however implemetations of filesystems on top of S3 that store the tree metadata in dedicated objects or use a completely different persistance mechanism like a distributed key value store to implement the file tree aspect of a storage.\nWhile the storage provider is responsible for managing the tree, file up and download is delegated to a dedicated data provider. See below.  Storage aspects Unfortunately, no POSIX filesystem natively supports all storage aspects that ownCloud 10 requires:\n a hierarchical file tree  id based lookup etag propagation subtree size accounting (size of all files in a folder and all its sub folders)   sharing  share expiry   trash or undelete (trash can be done by wrapping rm) versions (only snapshots, which is a different concept)  A more extensive description of the storage aspects can be found in the upstream documentation\nStorage drivers Reva currently has four storage driver implementations that can be used for storage providers an well as data providers.\nLocal Storage Driver The minimal storage driver for a POSIX based filesystem. It literally supports none of the storage aspect other than basic file tree management. Sharing can - to a degree - be implemented using POSIX ACLs, which is scheduled after finishing the eos storage driver.\nTo provide the other storage aspects we plan to implement a FUSE overlay filesystem which will add the different aspects on top of local filesystems like ext4, btrfs or xfs. It should work on NFSv45 as well, although NFSv4 supports RichACLs and we will explore how to leverage them to implement sharing at a future date.\nOwnCloud Storage Driver This is the current default storage driver. While it implements the file tree (using redis, including id based lookup), etag propagation, trash, versions and sharing (including expiry) using the data directory layout of ownCloud 10 it has known limitations that cannot be fixed without changing the actual layout on disk.\nWe plan to deprecate it in favor of the local storage driver in combination with a FUSE based overlay filesystem when the migration path has been fully tested.\nEOS Storage Driver The cern eos storage has evolved with ownCloud and natively supports id based lookup, etag propagation, subtree size accounting, sharing, trash and versions. To use it you need to change the default configuration of the ocis-reva storage-home command (or have a look at the Makefile ̀ eos-start` target):\nexport REVA_STORAGE_HOME_DRIVER=eos export REVA_STORAGE_EOS_NAMESPACE=/eos export REVA_STORAGE_EOS_MASTER_URL=\u0026#34;root://eos-mgm1.eoscluster.cern.ch:1094\u0026#34; export REVA_STORAGE_EOS_ENABLE_HOME=true export REVA_STORAGE_EOS_LAYOUT=\u0026#34;dockertest/{{.Username}}\u0026#34; Running it locally also requires the eos and xrootd binaries. Running it using make eos-start will use CentOS based containers that already have the necessary packages installed.\nPull requests to add explicit reva storage-(s3|custom|...) commands with working defaults are welcome.  S3 Storage Driver A naive driver that treats the keys in an S3 cabaple storage as / delimited path names. While it does not support MOVE or etag propagation it can be used to read and write files. Better integration with native capabilities like versioning is possible but depends on the Use Case. Several storage solutions that provide an S3 interface also support some form of notifications that can be used to implement etag propagation.\nData Providers Clients using the CS3 API use an InitiateFileDownload and ]InitiateUpload](https://cs3org.github.io/cs3apis/#cs3.storage.provider.v1beta1.InitiateFileUploadRequest) request at the reva gateway to obtain a URL endpoint that can be used to eiter GET the file content or upload content using the resumable tus.io protocol.\nThe data provider uses the same storage driver as the storage provider but can be scaled independently.\nThe dataprovider allows uploading the file to a quarantine area where further data analysis may happen before making the file accessible again. One use case for this is anti virus scanning for files coming from untrusted sources.\nFuture work FUSE overlay filesystem We are planning to further separate the concerns and use a local storage provider with a FUSE filesystem overlaying the actual POSIX storage that can be used to capture deletes and writes that might happen outside of ocis/reva.\nIt would allow us to extend the local storage driver with missing storage aspects while keeping a tree like filesystem that end users are used to see when sshing into the machine.\nUpload to Quarantine area Antivirus scanning of random files uploaded from untrusted sources and executing metadata extraction or thumbnail generation should happen in a sandboxed system to prevent malicious users from gaining any information about the system. By spawning a new container with access to only the uploaded data we can further limit the attack surface.\n"});index.add({'id':39,'href':'/extensions/ocis_reva/testing/','title':"Testing",'content':"API Acceptance tests We are using the ownCloud 10 API acceptance testsuite against ocis. To set this up you need the owncloud 10 core repo, a ldap server that the acceptance tests can use to manage users, a redis server for file-versions and the ocis-reva code.\nGetting the tests All you need to do to get the acceptance tests is check out the core repo:\ngit clone https://github.com/owncloud/core.git Run a ldap server in a docker container The ownCloud 10 acceptance tests will need write permission. You can start a suitable ldap server in a docker container with:\ndocker run --hostname ldap.my-company.com \\ -e LDAP_TLS_VERIFY_CLIENT=never \\ -e LDAP_DOMAIN=owncloud.com \\ -e LDAP_ORGANISATION=ownCloud \\ -e LDAP_ADMIN_PASSWORD=admin \\ --name docker-slapd \\ -p 127.0.0.1:389:389 \\ -p 636:636 -d osixia/openldap Run a redis server in a docker container File versions need a redis server. Start one with docker by using:\ndocker run -e REDIS_DATABASES=1 -p 6379:6379 -d webhippie/redis:latest\nRun ocis-reva with that ldap server ocis-reva provides multiple subcommands. To configure them all via env vars you can export these environment variables.\nexport REVA_USERS_DRIVER=ldap export REVA_LDAP_HOSTNAME=localhost export REVA_LDAP_PORT=636 export REVA_LDAP_BASE_DN=\u0026#39;dc=owncloud,dc=com\u0026#39; export REVA_LDAP_USERFILTER=\u0026#39;(\u0026amp;(objectclass=posixAccount)(cn=%s))\u0026#39; export REVA_LDAP_GROUPFILTER=\u0026#39;(\u0026amp;(objectclass=posixGroup)(cn=%s))\u0026#39; export REVA_LDAP_BIND_DN=\u0026#39;cn=admin,dc=owncloud,dc=com\u0026#39; export REVA_LDAP_BIND_PASSWORD=admin export REVA_LDAP_SCHEMA_UID=uid export REVA_LDAP_SCHEMA_MAIL=mail export REVA_LDAP_SCHEMA_DISPLAYNAME=displayName export REVA_LDAP_SCHEMA_CN=cn Then you need to start the ocis-reva services\nbin/ocis-reva frontend \u0026amp; \\ bin/ocis-reva gateway \u0026amp; \\ bin/ocis-reva auth-basic \u0026amp; \\ bin/ocis-reva auth-bearer \u0026amp; \\ bin/ocis-reva sharing \u0026amp; \\ bin/ocis-reva storage-home \u0026amp; \\ bin/ocis-reva storage-home-data \u0026amp; \\ bin/ocis-reva storage-oc \u0026amp; \\ bin/ocis-reva storage-oc-data \u0026amp; \\ bin/ocis-reva users \u0026amp; Run the API acceptance tests In the ownCloud 10 core repo run\nmake test-acceptance-api \\ TEST_SERVER_URL=http://localhost:9140 \\ TEST_EXTERNAL_USER_BACKENDS=true \\ TEST_OCIS=true \\ OCIS_REVA_DATA_ROOT=/var/tmp/reva/ \\ BEHAT_FILTER_TAGS=\u0026#39;~@skipOnOcis\u0026amp;\u0026amp;~@skipOnLDAP\u0026amp;\u0026amp;@TestAlsoOnExternalUserBackend\u0026amp;\u0026amp;~@local_storage\u0026#39; Make sure to adjust the settings TEST_SERVER_URL and OCIS_REVA_DATA_ROOT according to your environment\nThis will run all tests that can work with LDAP and are not skipped on OCIS\nTo run a single test add BEHAT_FEATURE=\u0026lt;feature file\u0026gt; and specify the path to the feature file and an optional line number. For example: BEHAT_FEATURE='tests/acceptance/features/apiWebdavUpload1/uploadFile.feature:12'\nuse existing tests for BDD As a lot of scenarios are written for oC10, we can use those tests for Behaviour driven development in ocis. Every scenario that does not work in OCIS, is tagged with @skipOnOcis and additionally should be marked with an issue number e.g. @issue-ocis-reva-122. This tag means that this particular scenario is skipped because of issue no 122 in the ocis-reva repository. Additionally, some issues have scenarios that demonstrate the current buggy behaviour in ocis(reva) and are skipped on oC10. Have a look into the documentation to understand why we are writing those tests.\nIf you want to work on a specific issue\n  run the tests marked with that issue tag\nE.g.:\nmake test-acceptance-api \\ TEST_SERVER_URL=http://localhost:9140 \\ TEST_EXTERNAL_USER_BACKENDS=true \\ TEST_OCIS=true \\ OCIS_REVA_DATA_ROOT=/var/tmp/reva/ \\ BEHAT_FILTER_TAGS=\u0026#39;~@skipOnOcV10\u0026amp;\u0026amp;~@skipOnLDAP\u0026amp;\u0026amp;@TestAlsoOnExternalUserBackend\u0026amp;\u0026amp;~@local_storage\u0026amp;\u0026amp;@issue-ocis-reva-122\u0026#39; Note that the ~@skipOnOcis tag is replaced by ~@skipOnOcV10 and the issue tag @issue-ocis-reva-122 is added. We want to run all tests that are skipped in CI because of this particular bug, but we don\u0026rsquo;t want to run the tests that demonstrate the current buggy behaviour.\n  the tests will fail, try to understand how and why they are failing\n  fix the code\n  go back to 1. and repeat till the tests are passing.\n  adjust tests that demonstrate the buggy behaviour\ndelete the tests in core that are tagged with that particular issue and @skipOnOcV10, but be careful because a lot of tests are tagged with multiple issues. Only delete tests that demonstrate the buggy behaviour if you fixed all bugs related to that test. If not you might have to adjust the test.\n  unskip tests that demonstrate the correct behaviour\nThe @skipOnOcis tag should not be needed now, so delete it, but leave the issue tag for future reference.\n  make a PR to core with the changed tests\n  make a PR to ocis-reva running the adjusted tests\nTo confirm that all tests (old and changed) run fine make a PR to ocis-reva with your code changes and point drone to your branch in core to get the changed tests. For that change this line in the acceptance-tests section\n'git clone -b master --depth=1 https://github.com/owncloud/core.git /srv/app/testrunner',\nto clone your core branch e.g.\n'git clone -b fixRevaIssue122 --depth=1 https://github.com/owncloud/core.git /srv/app/testrunner',\n  merge PRs\nAfter you have confirmed that the tests pass everywhere merge the core PR and immediately revert the change in 8. and merge the ocis-reva PR\nIf the changes also affect the ocis repository make sure the changes get ported over there immediately, otherwise the tests will start failing there.\n  Notes  in a normal case the test-code cleans up users after the test-run, but if a test-run is interrupted (e.g. by CTRL+C) users might have been left on the LDAP server. In that case rerunning the tests requires wiping the users in the ldap server, otherwise the tests will fail when trying to populate the users. This can be done by simply running docker stop docker-slapd \u0026amp;\u0026amp; docker rm docker-slapd and restarting the LDAP server container the tests usually create users in the OU TestUsers with usernames specified in the feature file. If not defined in the feature file, most users have the password 123456, defined by regularUserPassword in behat.yml, but other passwords are also used, see \\FeatureContext::getPasswordForUser() for mapping and \\FeatureContext::__construct for the password definitions.  "});index.add({'id':40,'href':'/ocis/testing/','title':"Testing",'content':"Acceptance tests We are using the ownCloud 10 acceptance testsuite against ocis. To set this up you need the owncloud 10 core repo, a ldap server that the acceptance tests can use to manage users, a redis server for file-versions and the ocis code.\nGetting the tests All you need to do to get the acceptance tests is check out the core repo:\ngit clone https://github.com/owncloud/core.git Run a ldap server in a docker container The ownCloud 10 acceptance tests will need write permission. You can start a suitable ldap server in a docker container with:\ndocker run --hostname ldap.my-company.com \\ -e LDAP_TLS_VERIFY_CLIENT=never \\ -e LDAP_DOMAIN=owncloud.com \\ -e LDAP_ORGANISATION=ownCloud \\ -e LDAP_ADMIN_PASSWORD=admin \\ --name docker-slapd \\ -p 127.0.0.1:389:389 \\ -p 636:636 -d osixia/openldap Run a redis server in a docker container File versions need a redis server. Start one with docker by using:\ndocker run -e REDIS_DATABASES=1 -p 6379:6379 -d webhippie/redis:latest\nRun ocis with that ldap server ocis provides multiple subcommands. To configure them all via env vars you can export these environment variables.\nexport REVA_USERS_DRIVER=ldap export REVA_LDAP_HOSTNAME=localhost export REVA_LDAP_PORT=636 export REVA_LDAP_BASE_DN=\u0026#39;dc=owncloud,dc=com\u0026#39; export REVA_LDAP_USERFILTER=\u0026#39;(\u0026amp;(objectclass=posixAccount)(cn=%s))\u0026#39; export REVA_LDAP_GROUPFILTER=\u0026#39;(\u0026amp;(objectclass=posixGroup)(cn=%s))\u0026#39; export REVA_LDAP_BIND_DN=\u0026#39;cn=admin,dc=owncloud,dc=com\u0026#39; export REVA_LDAP_BIND_PASSWORD=admin export REVA_LDAP_SCHEMA_UID=uid export REVA_LDAP_SCHEMA_MAIL=mail export REVA_LDAP_SCHEMA_DISPLAYNAME=displayName export REVA_LDAP_SCHEMA_CN=cn export LDAP_URI=ldap://localhost export LDAP_BINDDN=\u0026#39;cn=admin,dc=owncloud,dc=com\u0026#39; export LDAP_BINDPW=admin export LDAP_BASEDN=\u0026#39;dc=owncloud,dc=com\u0026#39; Then you need to start ocis\nbin/ocis server Run the acceptance tests In the ownCloud 10 core repo run\nmake test-acceptance-api \\ TEST_SERVER_URL=http://localhost:9140 \\ TEST_EXTERNAL_USER_BACKENDS=true \\ TEST_OCIS=true \\ OCIS_REVA_DATA_ROOT=/var/tmp/reva/ \\ BEHAT_FILTER_TAGS=\u0026#39;~@skipOnOcis\u0026amp;\u0026amp;~@skipOnLDAP\u0026amp;\u0026amp;@TestAlsoOnExternalUserBackend\u0026amp;\u0026amp;~@local_storage\u0026#39; Make sure to adjust the settings TEST_SERVER_URL and OCIS_REVA_DATA_ROOT according to your environment\nThis will run all tests that can work with LDAP and are not skipped on ocis\nTo run a single test add BEHAT_FEATURE=\u0026lt;feature file\u0026gt;\nuse existing tests for BDD As a lot of scenarios are written for oC10, we can use those tests for Behaviour driven development in ocis. Every scenario that does not work in ocis, is tagged with @skipOnOcis and additionally should be marked with an issue number e.g. @issue-ocis-20. This tag means that this particular scenario is skipped because of issue no 20 in the ocis repository. Additionally, some issues have scenarios that demonstrate the current buggy behaviour in ocis(reva) and are skipped on oC10. Have a look into the documentation to understand why we are writing those tests.\nIf you want to work on a specific issue\n  run the tests marked with that issue tag\nE.g.:\nmake test-acceptance-api \\ TEST_SERVER_URL=http://localhost:9140 \\ TEST_EXTERNAL_USER_BACKENDS=true \\ TEST_OCIS=true \\ OCIS_REVA_DATA_ROOT=/var/tmp/reva/ \\ BEHAT_FILTER_TAGS=\u0026#39;~@skipOnOcV10\u0026amp;\u0026amp;~@skipOnLDAP\u0026amp;\u0026amp;@TestAlsoOnExternalUserBackend\u0026amp;\u0026amp;~@local_storage\u0026amp;\u0026amp;@issue-ocis-20\u0026#39; Note that the ~@skipOnOcis tag is replaced by ~@skipOnOcV10 and the issue tag @issue-ocis-20 is added. We want to run all tests that are skipped in CI because of this particular bug, but we don\u0026rsquo;t want to run the tests that demonstrate the current buggy behaviour.\n  the tests will fail, try to understand how and why they are failing\n  fix the code\n  go back to 1. and repeat till the tests are passing.\n  adjust tests that demonstrate the buggy behaviour\ndelete the tests in core that are tagged with that particular issue and @skipOnOcV10, but be careful because a lot of tests are tagged with multiple issues. Only delete tests that demonstrate the buggy behaviour if you fixed all bugs related to that test. If not you might have to adjust the test.\n  unskip tests that demonstrate the correct behaviour\nThe @skipOnOcis tag should not be needed now, so delete it, but leave the issue tag for future reference.\n  make a PR to core with the changed tests\n  make a PR to ocis running the adjusted tests\nTo confirm that all tests (old and changed) run fine make a PR to ocis with your code changes and point drone to your branch in core to get the changed tests. For that change this line in the acceptance-tests section\n'git clone -b master --depth=1 https://github.com/owncloud/core.git /srv/app/testrunner',\nto clone your core branch e.g.\n'git clone -b fixRevaIssue122 --depth=1 https://github.com/owncloud/core.git /srv/app/testrunner',\n  merge PRs\nAfter you have confirmed that the tests pass everywhere merge the core PR and immediately revert the change in 8. and merge the ocis PR\nIf the changes also affect the ocis-reva repository make sure the changes get ported over there immediately, otherwise the tests will start failing there.\n  Notes  in a normal case the test-code cleans up users after the test-run, but if a test-run is interrupted (e.g. by CTRL+C) users might have been left on the LDAP server. In that case rerunning the tests requires wiping the users in the ldap server, otherwise the tests will fail when trying to populate the users. the tests usually create users in the OU TestUsers with usernames specified in the feature file. If not defined in the feature file, most users have the password 123456, defined by regularUserPassword in behat.yml, but other passwords are also used, see \\FeatureContext::getPasswordForUser() for mapping and \\FeatureContext::__construct for the password definitions.  "});index.add({'id':41,'href':'/clients/web/backend-oc10/','title':"Setup with ownCloud 10",'content':"    Prerequisites Setting up the ownCloud Server  Adjusting config.php Setting up OAuth2 Setting up Phoenix   Running Phoenix Running acceptance tests     Prerequisites Decide on which host and port Phoenix will be served, for example https://phoenix-host:8300/phoenix-path/. In this document, we will refer to the following:\n \u0026lt;phoenix-url\u0026gt; as the full URL, for example https://phoenix-host:8300/phoenix-path/ \u0026lt;phoenix-domain\u0026gt; as the protocol, domain and port, for example: https://phoenix-host:8300  Setting up the ownCloud Server Make sure you have an ownCloud Server already installed.\nAdjusting config.php Add the following entries to config/config.php:\n tell ownCloud where Phoenix is located:  \u0026#39;phoenix.baseUrl\u0026#39; =\u0026gt; \u0026#39;\u0026lt;phoenix-url\u0026gt;\u0026#39;,  add a CORS domain entry for Phoenix in config.php:  \u0026#39;cors.allowed-domains\u0026#39; =\u0026gt; [\u0026#39;\u0026lt;phoenix-domain\u0026gt;\u0026#39;],  optional: when developing against unstable APIs (technical preview), these need to be enabled in the server core:  dav.enable.tech_preview =\u0026gt; true, Setting up OAuth2 To connect to the ownCloud server, it is necessary to set it up with OAuth2.\nInstall and enable the oauth2 app:\n% occ market:install oauth2 % occ app:enable oauth2 Login as administrator in the ownCloud Server web interface and go to the \u0026ldquo;User Authentication\u0026rdquo; section in the admin settings and add an entry for Phoenix as follows:\n pick an arbitrary name for the client set the redirection URI to \u0026lt;phoenix-url\u0026gt;/oidc-callback.html make sure to take note of the client identifier value as it will be needed in the Phoenix configuration later on  Setting up Phoenix In the local Phoenix checkout, copy the config.json.sample-oc10 file to config.json and adjust it accordingly:\n Set the \u0026ldquo;server\u0026rdquo; key to the URL of the ownCloud server including path. If the URL contains a path, please also add a trailing slash there. Set the \u0026ldquo;clientId\u0026rdquo; key to the client identifier as copied from the \u0026ldquo;User Authentication\u0026rdquo; section before. Adjust \u0026ldquo;url\u0026rdquo; and \u0026ldquo;authUrl\u0026rdquo; using the ownCloud server URL as prefix for both Optionally adjust \u0026ldquo;apps\u0026rdquo; for the list of apps to be loaded. These match the app names inside the \u0026ldquo;apps\u0026rdquo; folder.  Running Phoenix  if running from source, make sure to build Phoenix first run by launching a webpack dev server yarn watch-all when working on the Phoenix code, webpack will recompile the code automatically  Running acceptance tests For testing, please refer to the ownCloud 10 testing section\n"});index.add({'id':42,'href':'/ocis/extensions/','title':"Extension",'content':"    How to build and run ocis-simple Hacking ocis-hello  Option 1:   Hacking phoenix (and ocis-phoenix) The ownCloud design system External phoenix apps Phoenix extension points  Phoenix core Files app   API driven development     How to build and run ocis-simple ocis uses build tags to build different flavors of the binary. In order to work on a new extension we are going to reduce the scope a little and use the simple tag. Let us begin by creating a dedicated folder:\nmkdir ocis-extension-workshop \u0026amp;\u0026amp; ocis-extension-workshop Following https://github.com/owncloud/ocis\ngit clone https://github.com/owncloud/ocis.git cd ocis TAGS=simple make generate build Q: Can you specify which version of phoenix to use? A: No, the phoenix that is used is compiled into the assets of ocis-phoenix which is currently not automatically updated. We\u0026rsquo;ll see how to use a custom phoenix later.\nbin/ocis server\nOpen the browser at http://localhost:9100\n You land on the login screen. click login You are redirected to an idp at http://localhost:9140/oauth2/auth with a login mask. Use einstein:relativityto login (one of the three demo users) You are redirected to http://localhost:9100/#/hello the ocis-hello app Replace World with something else and submit. You should see Hello %something else%  Q: One of the required ports is already in use. Ocis seems to be trying to restart the service over and over. What gives? A: Using the ocis binary to start the server will case ocis to keep track of the different services and restart them in case they crash.\nHacking ocis-hello go back to the ocis-extension-workshop folder\ncd .. Following https://github.com/owncloud/ocis-hello\ngit clone https://github.com/owncloud/ocis-hello.git cd ocis-hello yarn install # this actually creates the assets yarn build # this will compile the assets into the binary make generate build Two options:\n run only the necessery services from ocis and ocis-hello independently compile ocis with the updated ocis-hello  Option 1: get a list of ocis services:\nps ax | grep ocis Try to kill ocis hello\nRemember: for now, killing a service will cause ocis to restart it. This is subject to change.\nIn order to be able to manage the processes ourselves we need to start them independently:\nbin/ocis server starts the same services as:\nbin/ocis micro \u0026amp; bin/ocis phoenix \u0026amp; bin/ocis hello \u0026amp; bin/ocis reva \u0026amp; Now we can kill the ocis hello and use our custom built ocis-hello binary:\ncd ../ocis-hello bin/ocis-hello server Hacking phoenix (and ocis-phoenix) Following https://github.com/owncloud/phoenix we are going to build the current phoenix\ngit clone https://github.com/owncloud/phoenix.git cd phoenix yarn install yarn dist We can tell ocis to use the compiled assets:\nKill ocis phoenix, then use the compiled assets when starting phoenix.\ncd ../ocis PHOENIX_ASSET_PATH=\u0026#34;`pwd`/../phoenix/dist\u0026#34; bin/ocis phoenix The ownCloud design system The owncloud design system contains a set of ownCloud vue components for phoenix or your own ocis extensions. Use it for a consistent look and feel.\nPoint your browser to https://owncloud.github.io/owncloud-design-system and check the available components. Live editing the examples in the browser is supported.\nnote: There is a bug with navigation sub items: either click a nav item twice or refresh the page\nExternal phoenix apps This is what hello is: copy and extend!\n  Phoenix is configured using the config.json which is served by the phoenix service (either bin/ocis phoenix or bin/ocis-phoenix server)\n  point ocis phoenix to the web config which you extended with an external app: PHOENIX_WEB_CONFIG=\u0026quot;pwd/../phoenix/config.json\u0026quot; PHOENIX_ASSET_PATH=\u0026quot;pwd/../phoenix/dist\u0026quot; bin/ocis phoenix\n  { \u0026#34;server\u0026#34;: \u0026#34;http://localhost:9140\u0026#34;, \u0026#34;theme\u0026#34;: \u0026#34;owncloud\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;openIdConnect\u0026#34;: { \u0026#34;metadata_url\u0026#34;: \u0026#34;http://localhost:9140/.well-known/openid-configuration\u0026#34;, \u0026#34;authority\u0026#34;: \u0026#34;http://localhost:9140\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;phoenix\u0026#34;, \u0026#34;response_type\u0026#34;: \u0026#34;code\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;openid profile email\u0026#34; }, \u0026#34;apps\u0026#34;: [], \u0026#34;external_apps\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;hello\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;http://localhost:9105/hello.js\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;http://localhost:9105\u0026#34; } }, { \u0026#34;id\u0026#34;: \u0026#34;myapp\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;http://localhost:6789/superapp.js\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;backend\u0026#34;: \u0026#34;http://someserver:1234\u0026#34;, \u0026#34;myconfig\u0026#34;: \u0026#34;is awesome\u0026#34; } } ] } Phoenix extension points For an up to date list check out the phoenix documentation.  Several ones available:\nPhoenix core  App switcher (defined in config.json) App container (loads UI of your extension)  Files app  File action Create new file action Sidebar Quick access for sidebar inside of file actions (in the file row)  Example of a file action in the app.js:\nconst appInfo = { name: \u0026#39;MarkdownEditor\u0026#39;, id: \u0026#39;markdown-editor\u0026#39;, icon: \u0026#39;text\u0026#39;, isFileEditor: true, extensions: [{ extension: \u0026#39;txt\u0026#39;, newFileMenu: { menuTitle ($gettext) { return $gettext(\u0026#39;Create new plain text file…\u0026#39;) } } }, { extension: \u0026#39;md\u0026#39;, newFileMenu: { menuTitle ($gettext) { return $gettext(\u0026#39;Create new mark-down file…\u0026#39;) } } }] } For the side bar have a look at the files app, defaults.js \u0026amp; fileSideBars\nAPI driven development Until now we only had a look at the ui and how the extensions are managed on the cli. But how do apps actually talk to the server?\nShort answer: any way you like\nLong answer: micro and ocis-hello follow a protocol driven development:\n  specify the API using protobuf\n  generate client and server code\n  evolve based on the protocol\n  CS3 api uses protobuf as well and uses GRPC\n  ocis uses go-micro, which provides http and grpc gateways\n  the gateways and protocols are optional\n  owncloud and kopano are looking into a MS graph like api to handle phoenix requests.\n they might be about user, contacrs, calendars \u0026hellip; which is covered by the graph api we want to integrate with eg. kopano and provide a commen api (file sync and share is covered as well)    as an example for protobuf take a look at ocis-hello\n  "});index.add({'id':43,'href':'/extensions/ocis_glauth/license/','title':"License",'content':"This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.\n"});index.add({'id':44,'href':'/extensions/ocis_phoenix/license/','title':"License",'content':"This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.\n"});index.add({'id':45,'href':'/extensions/ocis_reva/license/','title':"License",'content':"This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.\n"});index.add({'id':46,'href':'/extensions/ocis_thumbnails/releasing/','title':"Releasing",'content':"    Preperation Release     To release a new version of ocis-thumbnails, you have to follow a few simple steps.\nPreperation  Create a new branch e.g. release-x.x.x where x.x.x is the version you want to release. Checkout the preparation branch. Create a new changelog folder and move the unreleased snippets there. mkdir changelog/x.x.x_yyyy-MM-dd/ # yyyy-MM-dd is the current date mv changelog/unreleased/* changelog/x.x.x_yyyy-MM-dd/ Commit and push the changes git add --all git commit -m \u0026#34;prepare release x.x.x\u0026#34; git push Create a pull request to the master branch.  Release  After the preparation branch has been merged update your local master. git checkout master git pull Create a new tag (preferably signed). git tag -s vx.x.x -m \u0026#34;release vx.x.x\u0026#34; git push --tags Wait for CI and check that the GitHub release was published.  Congratulations, you just released ocis-thumbnails!\n"});index.add({'id':47,'href':'/ocis/login-flow/','title':"Login Flow",'content':"Login Flow The following sequence diagram describes the openid connect auth code flow. The eight numbered steps and notes correspond to the openid connect auth code flow steps. Example requests are based on the spec as well.:\n  mermaid.initialize({ flowchart: { useMaxWidth: true } });  sequenceDiagram %% we have comments!! \\o/ %% this documents the login workflow %% examples taken from the oidc spec https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth %% TODO add PKCE, see https://developer.okta.com/blog/2019/08/22/okta-authjs-pkce#use-pkce-to-make-your-apps-more-secure participant user as User participant client as Client participant proxy as ocis-proxy participant idp as IdP participant glauth as ocis-glauth participant graph as ocis-graph participant accounts as ocis-accounts participant ldap as external LDAP server user-+client: What is the content of my home? client-+proxy: PROPFIND no (or expired) auth Note over client,proxy: ocis needs to know the IdP that is\nused to authenticate users. The\nproxy will redirect unauthenticated\nrequests to that IdP. proxy---client: 302 Found Note over client, idp: HTTP/1.1 302 Found\nLocation: https://server.example.com/authorize?\nresponse_type=code\u0026\nscope=openid%20profile%20email\n\u0026client_id=s6BhdRkqt3\n\u0026state=af0ifjsldkj\n\u0026redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb Note over client, idp: We should follow the OpenID Connect Discovery protocol Note over client, idp: Clients might fall back to the ocis server if the discovery failed.\nWe can provide a webfinger endpoint there to let guests use an idp\nthat is backed by the accounts service. Note over client, idp: For now, clients can only handle one IdP, which is configured in ocis. client--client: 1. Client prepares an Authentication Request\ncontaining the desired request parameters. client-+idp: 2. Client sends the request to the Authorization Server. Note over client, idp: GET /authorize?\nresponse_type=code\n\u0026scope=openid%20profile%20email\n\u0026client_id=s6BhdRkqt3\n\u0026state=af0ifjsldkj\n\u0026redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb HTTP/1.1\nHost: server.example.com Note over user, idp: 3. Authorization Server Authenticates the End-User. Note over idp,ldap: Either an IdP already exists or a new one is introduced. Since we are not yet using oidc discovery we can only use one IdP. alt all users managed by konnectd/ocis idp-+glauth: LDAP query/bind glauth-+graph: GET user with Basic Auth\nGraphAPI graph-+accounts: internal GRPC accounts---graph: response graph---glauth: OData response glauth---idp: LDAP result Note over accounts,ldap: In case internal users are managed\nin an external ldap they have to be\nsynced to the accounts service to\nshow up as recipients during sharing. else all users authenticated by an external idp idp-+ldap: LDAP query/bind ldap---idp: LDAP result alt guest accounts managed in ocis / lookup using glauth proxy: Note over idp,glauth: Idp is configured to use glauth as a\nsecond ldap server. idp-+glauth: LDAP query/bind glauth-+graph: GET user with Basic Auth\nGraphAPI graph-+accounts: internal GRPC accounts---graph: response graph---glauth: OData response glauth---idp: LDAP result else guest account provisioned by other means Note over accounts, ldap: In case guest accounts are managed\nin an existing ldap they need to be\nsynced to the accounts service to\nbe able to login and show up as\nrecipients during sharing. end end Note over user, idp: 4. Authorization Server obtains End-User Consent/Authorization. idp---client: 5. Authorization Server sends the End-User back\nto the Client with an Authorization Code. Note over client, idp: HTTP/1.1 302 Found\nLocation: https://client.example.org/cb?\ncode=SplxlOBeZQQYbYS6WxSbIA\u0026state=af0ifjsldkj client-+idp: 6. Client requests a response using the\nAuthorization Code at the Token Endpoint. Note over client, idp: POST /token HTTP/1.1\nHost: server.example.com\nContent-Type: application/x-www-form-urlencoded\ngrant_type=authorization_code\u0026code=SplxlOBeZQQYbYS6WxSbIA\n\u0026redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb idp---client: 7. Client receives a response that contains an\nID Token and Access Token in the response body. Note over client, idp: HTTP/1.1 200 OK\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n{\n\"access_token\": \"SlAV32hkKG\",\n\"token_type\": \"Bearer\",\n\"refresh_token\": \"8xLOxBtZp8\",\n\"expires_in\": 3600,\n\"id_token\": \"a ... b.c ... d.e ... f\" // must be a JWT\n} client--client: 8. Client validates the ID token and\nretrieves the End-User's Subject Identifier. client-+proxy: PROPFIND With access token proxy---client: 207 Multi-Status client---user: List of Files X, Y, Z ... "});index.add({'id':48,'href':'/ocis/request-flow/','title':"Request Flow",'content':"Request Flow The following sequence diagram describes the general request flow. It shows where account provisioning and token minting are happening:\n  mermaid.initialize({ flowchart: { useMaxWidth: true } });  sequenceDiagram %% we have comments!! \\o/ participant user as User participant client as Client participant proxy as ocis-proxy participant idp as IdP participant accounts as ocis-accounts participant ldap as corporate LDAP server user-+client: What is the content of my home? client-+proxy: PROPFIND Bearer auth using oidc auth token Note over client,proxy: What is in a bearer token? The spec recommends opaque tokens. Treat it as random byte noise. Note over client,proxy: the proxy MUST authenticate users using ocis-accounts because it needs to decide where to send the request %% Mention introspection endpoint for opaque tokens %% konnectd uses jwt, so we can save a request %% either way the token can be used to look up the sub and iss of the user %% or is token check enough? proxy-+idp: GET /userinfo alt userinfo succeeds idp--proxy: 200 OK Note over proxy,accounts: Content-Type: application/json\n{\n\"sub\": \"248289761001\",\n\"name\": \"Jane Doe\",\n\"given_name\": \"Jane\",\n\"family_name\": \"Doe\",\n\"preferred_username\": \"j.doe\",\n\"email\": \"janedoe@example.com\",\n\"picture\": \"http://example.com/janedoe/me.jpg\"\n} %% see: https://openid.net/specs/openid-connect-core-1_0.html#UserInfoResponse else userinfo fails idp---proxy: 401 Unauthorized Note over proxy,accounts: WWW-Authenticate: error=\"invalid_token\",\nerror_description=\"The Access Token expired\" proxy--client: 401 Unauthorized or 302 Found with redirect to idp Note over client: start at login flow\nor refresh the token end proxy-+accounts: TODO API call to exchange sub@iss with account UUID Note over proxy,accounts: does not autoprovision users. They are explicitly provsioned later. alt account exists or has been migrated accounts--proxy: existing account UUID else account does not exist opt oc10 endpoint is configured Note over proxy,oc10: Check if user exists in oc10 proxy-+oc10: GET /apps/graphapi/v1.0/users/ opt user exists in oc10 oc10---proxy: 200 %% TODO auth using internal token proxy-+oc10: PROPFIND Note over proxy,oc10: forward existing bearer auth oc10---proxy: Multistatus response proxy--client: Multistatus response client--user: List of Files X, Y, Z ... end end Note over proxy,accounts: provision a new account including displayname, email and sub@iss TODO only if the user is allowed to login, based on group membership in the ldap server proxy-proxy: generate new uuid proxy-+accounts: TODO create account with new generated uuid accounts---proxy: OK / error else account has been disabled accounts---proxy: account is disabled proxy--client: 401 Unauthorized or 302 Found with redirect to idp Note over client: start at login flow\nor refresh the token end proxy-proxy: store uuid in context %% what if oc10 does not support a certain request / API proxy-proxy: mint an internal jwt that includes the UUID and username using revas `x-access-token` header proxy-+reva: PROPFIND Token auth using internal JWT reva---proxy: Multistatus response proxy---client: Multistatus response client---user: List of Files X, Y, Z ... "});index.add({'id':49,'href':'/extensions/ocis_reva/updating/','title':"Updating reva",'content':"    Updating reva     Updating reva  Run go get github.com/cs3org/reva@master Create a changelog entry containing changes that were done in reva Create a Pull Request to ocis-reva master with those changes If test issues appear, you might need to adjust the tests After the PR is merged, consider doing a release of ocis-reva  "});index.add({'id':50,'href':'/extensions/ocis_settings/bundles/','title':"Settings Bundles",'content':"A Settings Bundle is a collection of settings, uniquely identified by the key of the extension registering the bundle and the key of the bundle itself. It\u0026rsquo;s purpose is to let oCIS extensions define settings and make them available to users. They are dynamically rendered into forms, available in the frontend.\nAs of now we support five different types of settings:\n boolean integer string single choice list of integers or strings multiple choice list of integers or strings  Each Setting is uniquely identified by a key within the bundle. Some attributes depend on the chosen type of setting. Through the information provided with the attributes of the setting, the settings frontend dynamically renders form elements, allowing users to change their settings individually.\nExample { \u0026#34;identifier\u0026#34;: { \u0026#34;extension\u0026#34;: \u0026#34;ocis-accounts\u0026#34;, \u0026#34;bundleKey\u0026#34;: \u0026#34;profile\u0026#34; }, \u0026#34;displayName\u0026#34;: \u0026#34;Profile\u0026#34;, \u0026#34;settings\u0026#34;: [ { \u0026#34;settingKey\u0026#34;: \u0026#34;lastname\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;Lastname\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Input for lastname\u0026#34;, \u0026#34;stringValue\u0026#34;: { \u0026#34;placeholder\u0026#34;: \u0026#34;Set lastname\u0026#34; } }, { \u0026#34;settingKey\u0026#34;: \u0026#34;age\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;Age\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Input for age\u0026#34;, \u0026#34;intValue\u0026#34;: { \u0026#34;min\u0026#34;: \u0026#34;16\u0026#34;, \u0026#34;max\u0026#34;: \u0026#34;200\u0026#34;, \u0026#34;step\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;placeholder\u0026#34;: \u0026#34;Set age\u0026#34; } }, { \u0026#34;settingKey\u0026#34;: \u0026#34;timezone\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;Timezone\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;User timezone\u0026#34;, \u0026#34;singleChoiceValue\u0026#34;: { \u0026#34;options\u0026#34;: [ { \u0026#34;stringValue\u0026#34;: \u0026#34;Europe/Berlin\u0026#34;, \u0026#34;displayValue\u0026#34;: \u0026#34;Europe/Berlin\u0026#34; }, { \u0026#34;stringValue\u0026#34;: \u0026#34;Asia/Kathmandu\u0026#34;, \u0026#34;displayValue\u0026#34;: \u0026#34;Asia/Kathmandu\u0026#34; } ] } } ] } "});index.add({'id':51,'href':'/clients/web/backend-ocis/','title':"Setup with OCIS",'content':"    Setting up OCIS services Setting up Phoenix Setting up ocis-phoenix service Running Phoenix Running acceptance tests     Setting up OCIS services  Setup OCIS by cloning the ocis repository and following the setup instructions there. Do not start the whole server but run ./bin/ocis --log-level debug $EXTENSION for all the existing extensions except the phoenix service. A list of extensions can be found by running ./bin/ocis without arguments and looking at the \u0026ldquo;Extensions\u0026rdquo; section.  Setting up Phoenix  Please note that config.json is generated by ocis-phoenix so there is no need to create one.  Setting up ocis-phoenix service  Clone the ocis-phoenix repository and follow the setup instructions there. Set export PHOENIX_ASSET_PATH=$PHOENIX_CHECKOUT/dist and replace with the path to the local git checkout of the Phoenix repository Run \u0026ldquo;ocis-phoenix\u0026rdquo;: ./bin/ocis-phoenix --log-level debug server  Running Phoenix  in the Phoenix checkout folder, run yarn watch-all-ocis open https://localhost:9200 and accept the certificate. when signing in, use one of the available test users whenever code changes are made, you need to manually reload the browser page (no hot reload)  Running acceptance tests For testing, please refer to the OCIS testing section\n"});index.add({'id':52,'href':'/ocis/debugging/','title':"Debugging",'content':"Debugging As a single binary for easy deployment running ocis server just forks itself to start all the services, which makes debugging those processes a little harder.\nUltimately, we want to be able to stop a single service using eg. ocis kill phoenix so that you can start the service you want to debug in debug mode. We need to change the way we fork processes though, otherwise the runtime will automatically restart a service if killed.\nStart ocis For debugging there are two workflows that work well, depending on your preferences.\nUse the debug binary and attach to the process as needed Run the debug binary with OCIS_LOG_LEVEL=debug bin/ocis-debug server and then find the service you want to debug using:\n# ps ax | grep ocis 12837 pts/1 Sl+ 0:00 bin/ocis-debug server 12845 pts/1 Sl 0:00 bin/ocis-debug graph 12847 pts/1 Sl 0:00 bin/ocis-debug reva-auth-bearer 12848 pts/1 Sl 0:00 bin/ocis-debug graph-explorer 12849 pts/1 Sl 0:00 bin/ocis-debug ocs 12850 pts/1 Sl 0:00 bin/ocis-debug reva-storage-oc-data 12863 pts/1 Sl 0:00 bin/ocis-debug webdav 12874 pts/1 Sl 0:00 bin/ocis-debug reva-frontend 12897 pts/1 Sl 0:00 bin/ocis-debug reva-sharing 12905 pts/1 Sl 0:00 bin/ocis-debug reva-gateway 12912 pts/1 Sl 0:00 bin/ocis-debug reva-storage-home 12920 pts/1 Sl 0:00 bin/ocis-debug reva-users 12929 pts/1 Sl 0:00 bin/ocis-debug glauth 12940 pts/1 Sl 0:00 bin/ocis-debug reva-storage-home-data 12948 pts/1 Sl 0:00 bin/ocis-debug konnectd 12952 pts/1 Sl 0:00 bin/ocis-debug proxy 12961 pts/1 Sl 0:00 bin/ocis-debug thumbnails 12971 pts/1 Sl 0:00 bin/ocis-debug reva-storage-oc 12981 pts/1 Sl 0:00 bin/ocis-debug web 12993 pts/1 Sl 0:00 bin/ocis-debug api 12998 pts/1 Sl 0:00 bin/ocis-debug registry 13004 pts/1 Sl 0:00 bin/ocis-debug phoenix 13015 pts/1 Sl 0:00 bin/ocis-debug reva-auth-basic Then you can set a breakpoint in the service you need and attach to the process via processid. To debug the reva-sharing service the VS Code launch.json would look like this:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ocis attach\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;go\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;attach\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;local\u0026#34;, \u0026#34;processId\u0026#34;: 12897, } ] } Start all services independently to replace one of them with a debug process  You can use this ./ocis.sh script to start all services independently, so they don\u0026rsquo;t get restrarted by the runtime when you kill them:  #/bin/sh LOG_LEVEL=\u0026#34;debug\u0026#34; bin/ocis --log-level=$LOG_LEVEL micro \u0026amp; bin/ocis --log-level=$LOG_LEVEL glauth \u0026amp; bin/ocis --log-level=$LOG_LEVEL graph-explorer \u0026amp; bin/ocis --log-level=$LOG_LEVEL graph \u0026amp; #bin/ocis --log-level=$LOG_LEVEL hello \u0026amp; bin/ocis --log-level=$LOG_LEVEL konnectd \u0026amp; #bin/ocis --log-level=$LOG_LEVEL ocs \u0026amp; bin/ocis --log-level=$LOG_LEVEL phoenix \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-auth-basic \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-auth-bearer \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-frontend \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-gateway \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-sharing \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-storage-home \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-storage-home-data \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-storage-oc \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-storage-oc-data \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-storage-root \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-users \u0026amp; #bin/ocis --log-level=$LOG_LEVEL webdav bin/ocis --log-level=$LOG_LEVEL proxy \u0026amp; Get the list of running processes:  # ps ax | grep ocis 12837 pts/1 Sl+ 0:00 bin/ocis-debug server 12845 pts/1 Sl 0:00 bin/ocis-debug graph 12847 pts/1 Sl 0:00 bin/ocis-debug reva-auth-bearer 12848 pts/1 Sl 0:00 bin/ocis-debug graph-explorer 12849 pts/1 Sl 0:00 bin/ocis-debug ocs 12850 pts/1 Sl 0:00 bin/ocis-debug reva-storage-oc-data 12863 pts/1 Sl 0:00 bin/ocis-debug webdav 12874 pts/1 Sl 0:00 bin/ocis-debug reva-frontend 12897 pts/1 Sl 0:00 bin/ocis-debug reva-sharing 12905 pts/1 Sl 0:00 bin/ocis-debug reva-gateway 12912 pts/1 Sl 0:00 bin/ocis-debug reva-storage-home 12920 pts/1 Sl 0:00 bin/ocis-debug reva-users 12929 pts/1 Sl 0:00 bin/ocis-debug glauth 12940 pts/1 Sl 0:00 bin/ocis-debug reva-storage-home-data 12948 pts/1 Sl 0:00 bin/ocis-debug konnectd 12952 pts/1 Sl 0:00 bin/ocis-debug proxy 12961 pts/1 Sl 0:00 bin/ocis-debug thumbnails 12971 pts/1 Sl 0:00 bin/ocis-debug reva-storage-oc 12981 pts/1 Sl 0:00 bin/ocis-debug web 12993 pts/1 Sl 0:00 bin/ocis-debug api 12998 pts/1 Sl 0:00 bin/ocis-debug registry 13004 pts/1 Sl 0:00 bin/ocis-debug phoenix 13015 pts/1 Sl 0:00 bin/ocis-debug reva-auth-basic Kill the service you want to start in debug mode:  # kill 17628 Start the service you are interested in in debug mode. When using make to build the binary there is already a bin/ocis-debug binary for you. When running an IDE tell it which service to start by providing the corresponding sub command, eg. bin\\ocis-debug reva-frontend.  Gather error messages We recommend you collect all related information in a single file or in a github issue. Let us start with an error that pops up in the Web UI:\n Error while sharing. error sending a grpc stat request\n This popped up when I tried to add marie as a collaborator in phoenix. That triggers a request to the server which I copied as curl. We can strip a lot of headers and the gist of it is:\n# curl \u0026#39;https://localhost:9200/ocs/v1.php/apps/files_sharing/api/v1/shares\u0026#39; -d \u0026#39;shareType=0\u0026amp;shareWith=marie\u0026amp;path=%2FNeuer+Ordner\u0026amp;permissions=1\u0026#39; -u einstein:relativity -k -v | xmllint -format - [... headers ...] \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;ocs\u0026gt; \u0026lt;meta\u0026gt; \u0026lt;status\u0026gt;error\u0026lt;/status\u0026gt; \u0026lt;statuscode\u0026gt;998\u0026lt;/statuscode\u0026gt; \u0026lt;message\u0026gt;error sending a grpc stat request\u0026lt;/message\u0026gt; \u0026lt;/meta\u0026gt; \u0026lt;/ocs\u0026gt; The username and password only work when basic auth is available. Otherwise you have to obtain a bearer token, eg. by grabbing it from the browser.  TODO add ocis cli tool to obtain a bearer token.  We also have a few interesting log entries:\n0:43PM INF home/jfd/go/pkg/mod/github.com/cs3org/reva@v0.0.2-0.20200318111623-a2f97d4aa741/internal/grpc/interceptors/log/log.go:69 \u0026gt; unary code=OK end=\u0026#34;18/Mar/2020:22:43:40 +0100\u0026#34; from=tcp://[::1]:44078 pid=17836 pkg=rgrpc start=\u0026#34;18/Mar/2020:22:43:40 +0100\u0026#34; time_ns=95841 traceid=b4eb9a9f45921f7d3632523ca32a42b0 uri=/cs3.storage.registry.v1beta1.RegistryAPI/GetStorageProvider user-agent=grpc-go/1.26.0 10:43PM ERR home/jfd/go/pkg/mod/github.com/cs3org/reva@v0.0.2-0.20200318111623-a2f97d4aa741/internal/grpc/interceptors/log/log.go:69 \u0026gt; unary code=Unknown end=\u0026#34;18/Mar/2020:22:43:40 +0100\u0026#34; from=tcp://[::1]:43910 pid=17836 pkg=rgrpc start=\u0026#34;18/Mar/2020:22:43:40 +0100\u0026#34; time_ns=586115 traceid=b4eb9a9f45921f7d3632523ca32a42b0 uri=/cs3.gateway.v1beta1.GatewayAPI/Stat user-agent=grpc-go/1.26.0 10:43PM ERR home/jfd/go/pkg/mod/github.com/cs3org/reva@v0.0.2-0.20200318111623-a2f97d4aa741/internal/http/services/owncloud/ocs/reqres.go:94 \u0026gt; error sending a grpc stat request error=\u0026#34;rpc error: code = Unknown desc = gateway: error calling Stat: rpc error: code = Unavailable desc = connection error: desc = \\\u0026#34;transport: Error while dialing dial tcp [::1]:9152: connect: connection refused\\\u0026#34;\u0026#34; pid=17832 pkg=rhttp traceid=b4eb9a9f45921f7d3632523ca32a42b0 TODO return the trace id in the response so we can correlate easier. For reva tracked in https://github.com/cs3org/reva/issues/587  The last line gives us a hint where the log message originated: .../github.com/cs3org/reva@v0.0.2-0.20200318111623-a2f97d4aa741/internal/http/services/owncloud/ocs/reqres.go:94. Which looks like this:\n89: // WriteOCSResponse handles writing ocs responses in json and xml 90: func WriteOCSResponse(w http.ResponseWriter, r *http.Request, res *Response, err error) { 91: var encoded []byte 92: 93: if err != nil { 94: appctx.GetLogger(r.Context()).Error().Err(err).Msg(res.OCS.Meta.Message) 95: } Ok, so this seems to be a convenience method that is called from multiple places an also handles errors. Unfortunately, this hides the actual source of the error. We could set a breakpoint in line 94 and reproduce the problem, which can be a lot harder than just clicking the share button or sending a curl request again. So let us see what else the log tells us.\nThe previous line tells us that a Stat request failed: uri=/cs3.gateway.v1beta1.GatewayAPI/Stat. This time the line is written by the grpc log interceptor. What else is there?\nThe first line tells us that looking up the responsible storage provider seems to have succeeded: uri=/cs3.storage.registry.v1beta1.RegistryAPI/GetStorageProvider.\nAt this point it your familiarity with the codebase starts to become a factor. If you are new you should probably go back to setting a break point on the log line and check the stack trace.\nDebug wherever the call trace leads you to \u0026hellip; good luck!\nManaging dependencies and testing changes You can either run and manage the services independently, or you can update the go.mod file and replace dependencies with your local version.\nTo debug the reva frontend we need to add two replacements:\n// use the local ocis-reva repo replace github.com/owncloud/ocis-reva =\u0026gt; ../ocis-reva // also use the local reva repo replace github.com/cs3org/reva =\u0026gt; ../reva The username and password only work when basic auth is available. Otherwise you have to obtain a bearer token, eg. by grabbing it from the browser.  Rebuild ocis to make sure the dependency is used. It should be sufficient to just restart the service you want to debug.\n"});index.add({'id':53,'href':'/ocis/building/','title':"Building",'content':"As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go \u0026gt;= v1.13. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis.git cd ocis All required tools besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile. To build the ocis binary run:\nmake generate make build Finally, you should have the binary within the bin/ folder now, give it a try with ./bin/ocis -h to see all available options.\nSimple Ocis fo extonsions example Currently, we are using a go build tag to allow building a more simple set of the binary. It was intended to let extension developers focus on only the necessary services.\nWhile it the tag based simple build demonstrates how to use ocis as a framework for a micro service architecture, we may change to an approach that uses an explicit command to run only a subset of the services.  TAGS=simple make build The artifact lives in /bin/ocis\nThe generated simple ocis binary is a subset of the ocis command with a restricted set of services meant for ease up development. The services included are\nocis-hello ocis-phoenix ocis-konnectd ocis-glauth micro\u0026#39;s own services "});index.add({'id':54,'href':'/extensions/ocis_thumbnails/grpc/','title':"GRPC API",'content':"    pkg/proto/v0/thumbnails.proto  GetRequest GetResponse GetRequest.FileType ThumbnailService   Scalar Value Types     pkg/proto/v0/thumbnails.proto GetRequest A request to retrieve a thumbnail\n   Field Type Label Description     filepath string  The path to the source image   filetype GetRequest.FileType  The type to which the thumbnail should get encoded to.   etag string  The etag of the source image   width int32  The width of the thumbnail   height int32  The height of the thumbnail   authorization string  The authorization token    GetResponse The service response\n   Field Type Label Description     thumbnail bytes  The thumbnail as a binary   mimetype string  The mimetype of the thumbnail    GetRequest.FileType The file types to which the thumbnail cna get encoded to.\n   Name Number Description     PNG 0 Represents PNG type   JPG 1 Represents JPG type    ThumbnailService A Service for handling thumbnail generation\n   Method Name Request Type Response Type Description     GetThumbnail GetRequest GetResponse Generates the thumbnail and returns it.    Scalar Value Types    .proto Type Notes C++ Java     double   double double   float   float float   int32  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead. int32 int   int64  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead. int64 long   uint32  Uses variable-length encoding. uint32 int   uint64  Uses variable-length encoding. uint64 long   sint32  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int   sint64  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long   fixed32  Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int   fixed64  Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long   sfixed32  Always four bytes. int32 int   sfixed64  Always eight bytes. int64 long   bool   bool boolean   string  A string must always contain UTF-8 encoded or 7-bit ASCII text. string String   bytes  May contain any arbitrary sequence of bytes. string ByteString    "});index.add({'id':55,'href':'/ocis/tracing/','title':"Tracing",'content':"By default, we use Jaeger for request tracing within oCIS. You can follow these steps to get started:\n Start Jaeger by using the all-in-one docker image: docker run -d --name jaeger \\ -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \\ -p 5775:5775/udp \\ -p 6831:6831/udp \\ -p 6832:6832/udp \\ -p 5778:5778 \\ -p 16686:16686 \\ -p 14268:14268 \\ -p 14250:14250 \\ -p 9411:9411 \\ jaegertracing/all-in-one:1.17  Every single oCIS service has its own environment variables for enabling and configuring tracing. You can, for example, enable tracing in Reva when starting the oCIS single binary like this: REVA_TRACING_ENABLED=true \\ REVA_TRACING_ENDPOINT=localhost:6831 \\ REVA_TRACING_COLLECTOR=http://localhost:14268/api/traces \\ ./bin/ocis server  Make the actual request that you want to trace. Open up the Jaeger UI to analyze request traces.  For more information on Jaeger, please refer to their Documentation.\n"});index.add({'id':56,'href':'/extensions/ocis_reva/releasing/','title':"Releasing",'content':"    Preparation Release     To release a new version of ocis-reva, you have to follow a few simple steps.\nPreparation  Before releasing, make sure that reva has been updated to the desired version Create a new branch e.g. release-x.x.x where x.x.x is the version you want to release. Checkout the preparation branch. Create a new changelog folder and move the unreleased snippets there. mkdir changelog/x.x.x_yyyy-MM-dd/ # yyyy-MM-dd is the current date mv changelog/unreleased/* changelog/x.x.x_yyyy-MM-dd/ Commit and push the changes git add --all git commit -m \u0026#34;prepare release x.x.x\u0026#34; git push origin release-x.x.x Create a pull request to the master branch.  Release  After the preparation branch has been merged update your local master. Wait for CI to generate a commit for the changelog update Check out master (or make sure to check out the generated changelog commit in case of subsequent merges) git checkout master git pull origin master Create a new tag (preferably signed) and replace the version number accordingly. git tag -s vx.x.x -m \u0026#34;release vx.x.x\u0026#34; git push origin vx.x.x Wait for CI and check that the GitHub release was published.  Congratulations, you just released ocis-reva!\n"});index.add({'id':57,'href':'/clients/web/testing/','title':"Running acceptance tests",'content':"    Setting up Selenium  Setup using Docker Setup using Docker Desktop for Mac Setup using standalone Selenium server   run tests  with ownCloud 10 backend with OCIS backend  the quick way (all automated) the manual way (e.g. to run from an existing ocis location)     Available settings to be set by environment variables Tipps  too many open files       Setting up Selenium There are multiple ways to run Selenium:\n Setup using Docker Setup using Docker Desktop for Mac Setup using a standalone Selenium server  Setup using Docker  Set the environment variables SELENIUM_HOST as localhost and SERVER_HOST in the format http://\u0026lt;ip_addr\u0026gt;:9100. Run yarn run selenium (available only on Linux) If you are a Mac user, you can run yarn run selenium:mac  This command creates docker container which uses port forwarding instead of host networking which is not supported on Mac    Setup using Docker Desktop for Mac In order to run acceptance tests with selenium running in Docker Desktop for Mac while having ownCloud Server and Phoenix running as services on the host machine, localhost will not work as URL. Use the Docker host ip 172.17.0.1 or its alias host.docker.internal instead. This requires to adjust all relevant config files to use host.docker.internal instead of localhost (config.json in Phoenix and config/config.php in oC10) and to change the phoenix OIDC-callback url. Set the SERVER_HOST and BACKEND_HOST environment variables accordingly. In order to use the same url for development on the host machine, define it as an alias to 127.0.0.1 in /etc/hosts. After all these changes Phoenix will be accessible at http://host.docker.internal:8300 for both development and acceptance tests.\nSetup using standalone Selenium server When running a standalone Selenium server, make sure to set the environment variable SELENIUM_HOST, SELENIUM_PORT and LOCAL_UPLOAD_DIR accordingly.\nrun tests with ownCloud 10 backend  setup the ownCloud 10 backend clone and install testing app into ownCloud build Phoenix start the Phoenix server set SERVER_HOST to point at the URL where the Phoenix web pages are served, for example \u0026ldquo;http://localhost:8300\u0026rdquo; set BACKEND_HOST to point to the URL of the backend, for example \u0026ldquo;http://localhost/owncloud/\u0026rdquo; to be able to run federation tests, additional setup is needed:  Install and setup a second ownCloud server-instance that is accessible by a different URL. That second server-instance must have its own database and data directory. clone and install testing app into the second ownCloud server-instance from http://github.com/owncloud/testing . when running the acceptance tests use REMOTE_BACKEND_HOST environment variable to define its address. for e.g. REMOTE_BACKEND_HOST=http://\u0026lt;ip_address_of_second_ownCloud_server-instance\u0026gt; yarn run acceptance-tests \u0026lt;feature-files-to-test\u0026gt; . -set the SELENIUM_HOST environment variable to your host that runs selenium, mostly localhost -set the SELENIUM_PORT environment variable to your selenium port, mostly 4444    Run yarn run acceptance-tests \u0026lt;feature-files-to-test\u0026gt;.\nThe feature files are located in the \u0026ldquo;tests/acceptance/features\u0026rdquo; subdirectories.\nsee available settings for further setup if needed\nwith OCIS backend  setup and build Phoenix  the quick way (all automated)  run yarn run test-requirements:ocis (yarn run test-requirements:ocis:mac for Mac users) to install, configure and run all ocis requirements run yarn run acceptance-tests-ocis \u0026lt;feature-files-to-test\u0026gt; to run the tests, the feature files are located in the \u0026ldquo;tests/acceptance/features\u0026rdquo; subdirectories. after the tests run yarn run docker-kill to stop all created docker containers  the manual way (e.g. to run from an existing ocis location)   clone and build ocis\n  run yarn run testing-app to get the testing-app, it\u0026rsquo;s needed to have the skeleton folder for the tests\n  Run ldap server and redis server using docker\nyarn run ldap-server yarn run redis-server   For Mac Users: create a new phoenix config.json file. As starting point and example that should work when running every service on localhost use tests/acceptance/ocis-mac-config-local.json\n  Run the OCIS server with the necessary configurations\nexport REVA_LDAP_HOSTNAME=\u0026#39;localhost\u0026#39; export REVA_LDAP_PORT=636 export REVA_LDAP_BIND_PASSWORD=\u0026#39;admin\u0026#39; export REVA_LDAP_BIND_DN=\u0026#39;cn=admin,dc=owncloud,dc=com\u0026#39; export REVA_LDAP_BASE_DN=\u0026#39;dc=owncloud,dc=com\u0026#39; export REVA_STORAGE_OWNCLOUD_REDIS_ADDR=\u0026#39;localhost:6379\u0026#39; export PHOENIX_ASSET_PATH=\u0026#39;\u0026lt;path-to-phoenix-clone\u0026gt;/dist\u0026#39; export LDAP_URI=\u0026#39;ldap://localhost\u0026#39; export LDAP_BINDDN=\u0026#39;cn=admin,dc=owncloud,dc=com\u0026#39; export LDAP_BINDPW=\u0026#39;admin\u0026#39; export LDAP_BASEDN=\u0026#39;dc=owncloud,dc=com\u0026#39; for Mac users additionally:\nexport PHOENIX_WEB_CONFIG=\u0026#39;\u0026lt;path-to-config-file\u0026gt;/ocis-mac-config.json\u0026#39; run the server:\nbin/ocis server   Run yarn run acceptance-tests-ocis \u0026lt;feature-files-to-test\u0026gt;. The feature files are located in the \u0026ldquo;tests/acceptance/features\u0026rdquo; subdirectories.\n  see available settings for further setup if needed\nAvailable settings to be set by environment variables These values can be set using the environment variables to configure yarn run acceptance-tests and yarn run acceptance-tests-ocis to match your local test environment.\n   setting meaning default     SERVER_HOST phoenix URL http://localhost:8300   BACKEND_HOST ownCloud server URL (or reva service url for running with OCIS) http://localhost:8080   BACKEND_USERNAME ownCloud administrator username admin   BACKEND_PASSWORD ownCloud administrator password admin   SELENIUM_HOST selenium server host, if not set yarn will start selenium automaticallyif running the selenium docker container as mentioned above set to localhost    SELENIUM_PORT port of selenium server 4444   SCREEN_RESOLUTION width and height in px to set the browser resolution to e.g. 375x812 empty = fullscreen   REMOTE_UPLOAD_DIR path to filesForUpload directory, used when uploading files through api ./tests/acceptance/filesForUpload   LOCAL_UPLOAD_DIR filesForUpload directory available for selenium for direct uploadsIf using selenium-docker and example above, set it as /uploads.If running local selenium, set value same as REMOTE_UPLOAD_DIR (please, remember to use absolute path) /uploads   REMOTE_BACKEND_HOST ownCloud remote server URL http://localhost:8080   RUN_ON_OCIS Running the tests using the OCIS backend false   OCIS_REVA_DATA_ROOT Data directory of OCIS /var/tmp/reva   LDAP_SERVER_URL LDAP server for openID provider ldap://127.0.0.1   LDAP_BASE_DN bind dn for LDAP cn=admin,dc=owncloud,dc=com   LDAP_ADMIN_PASSWORD Password for ldap bind dn cn=admin,dc=owncloud,dc=com   OCIS_SKELETON_DIR Skeleton files directory for new users -   PHOENIX_CONFIG Path for the phoenix config file (usually in the dist folder) -    Tipps too many open files If tests were running fine and then suddenly start to fail your system might run into open file limits. In that case you will see messages in the OCIS log output that look like this: 2020-05-12 11:33:43.974552 I | http: Accept error: accept tcp [::]:9200: accept4: too many open files; retrying in 1s\nIn that case increase the open file limits, how to do that would be beyond the scope of this documentation.\n"});index.add({'id':58,'href':'/extensions/ocis_thumbnails/license/','title':"License",'content':"This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.\n"});index.add({'id':59,'href':'/extensions/ocis_settings/glossary/','title':"Glossary",'content':"In the context of this extension and oCIS in general, we are using the following terminology.\nConfiguration  System configuration e.g. service host names and ports Changes need to be propagated to other services Typically modified on the CLI  Settings  Application level settings e.g. default language Can be modified at runtime without restarting the service Typically modified in the UI  Preferences  User settings Subset of \u0026ldquo;Settings\u0026rdquo; e.g. preferred language of a user  Settings Bundle  Collection of related settings Registered by an ocis extension  "});index.add({'id':60,'href':'/clients/web/building-docs/','title':"Building the documentation",'content':"    Buildling the documentation  Setting up Viewing the documentation Deploying the documentation       Buildling the documentation Setting up  Install hugo Run make docs  Viewing the documentation To view the rendered docs in the browser run:\ncd hugo hugo -D server Then open \u0026ldquo;http://localhost:1313/\u0026rdquo;\nWhen making changes to the docs, run make docs again and the server will pick up the changes and reload the page automatically\nDeploying the documentation The documentation is automatically deployed from the master branch to https://owncloud.github.io/phoenix/\n"});index.add({'id':61,'href':'/extensions/ocis_hello/license/','title':"License",'content':"This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.\n"});index.add({'id':62,'href':'/extensions/ocis_settings/license/','title':"License",'content':"This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.\n"});index.add({'id':63,'href':'/ocis/license/','title':"License",'content':"This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.\n"});index.add({'id':64,'href':'/','title':"Documentation",'content':"Developer Docs for ownCloud Infinite Scale\n "});index.add({'id':65,'href':'/extensions/','title':"Extensions",'content':""});index.add({'id':66,'href':'/extensions/ocis_proxy/','title':"Proxy",'content':"This service provides a basic proxy in front of the public ocis services.\n"});index.add({'id':67,'href':'/extensions/ocis_konnectd/','title':"Konnectd",'content':"This service provides an OpenID Connect provider which is the default way to authenticate in OCIS.\n"});index.add({'id':68,'href':'/clients/','title':"Clients",'content':""});index.add({'id':69,'href':'/extensions/ocis_hello/','title':"Hello",'content':"\nAbstract When getting started with ocis development developers need to learn about the building blocks of ocis extensions. Without guidance or orientation of the why and what of an extension they may start feeling lost. The ocis-hello repository serves as a blueprint for ocis extensions. It allows developers to get started with ocis extension development by looking at the code, configuration and documentation.\n  mermaid.initialize({ flowchart: { useMaxWidth: true } });  graph TD subgraph ow[ocis-web] owh[ocis-web-hello] end owh ---|\"greet()\"| ows[ocis-hello-server] ocis-hello provides a simple hello world example with\n a protobuf based greeter API a grpc service implementing the API a vue.js frontend using the API  It can be integrated into ocis web as documented in the extensions docs.\nTable of Contents    Getting Started     Building     License     "});index.add({'id':70,'href':'/categories/','title':"Categories",'content':""});index.add({'id':71,'href':'/tags/','title':"Tags",'content':""});})();