'use strict';(function(){const indexCfg={};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create(indexCfg);window.geekdocSearchIndex=index;index.add({'id':0,'href':'/ocis/','title':"Infinite Scale",'content':"This tool provides a single entrypoint for the whole ownCloud Infinite Scale stack.\n"});index.add({'id':1,'href':'/extensions/ocis_proxy/about/','title':"About",'content':"This service provides an proxy service that routes requests to the correct services.\n"});index.add({'id':2,'href':'/extensions/ocis_accounts/','title':"Accounts",'content':"This service provides an inter-operable accounts service that operates on the filesystem by default.\n"});index.add({'id':3,'href':'/extensions/ocis_hello/getting-started/','title':"Getting Started",'content':"    Installation  Docker Binaries  Configuration  Envrionment variables  Global Server Health  Commandline flags  Global Server Health  Configuration file  Usage  Server Health  Metrics      Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker TBD\nBinaries TBD\nConfiguration We provide overall three different variants of configuration. The variant based on environment variables and commandline flags are split up into global values and command-specific values.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nGlobal  HELLO_CONFIG_FILE Path to config file, empty default value HELLO_LOG_LEVEL Set logging level, defaults to info HELLO_LOG_COLOR Enable colored logging, defaults to true HELLO_LOG_PRETTY Enable pretty logging, defaults to true  Server  HELLO_TRACING_ENABLED Enable sending traces, defaults to false HELLO_TRACING_TYPE Tracing backend type, defaults to jaeger HELLO_TRACING_ENDPOINT Endpoint for the agent, empty default value HELLO_TRACING_COLLECTOR Endpoint for the collector, empty default value HELLO_TRACING_SERVICE Service name for tracing, defaults to hello HELLO_DEBUG_ADDR Address to bind debug server, defaults to 0.0.0.0:9109 HELLO_DEBUG_TOKEN Token to grant metrics access, empty default value HELLO_DEBUG_PPROF Enable pprof debugging, defaults to false HELLO_DEBUG_ZPAGES Enable zpages debugging, defaults to false HELLO_HTTP_ADDR Address to bind http server, defaults to 0.0.0.0:9105 HELLO_HTTP_ROOT Root path of http server, defaults to / HELLO_GRPC_ADDR Address to bind grpc server, defaults to 0.0.0.0:9106 HELLO_ASSET_PATH Path to custom assets, empty default value  Health  HELLO_DEBUG_ADDR Address to debug endpoint, defaults to 0.0.0.0:9109  Commandline flags If you prefer to configure the service with commandline flags you can see the available variables below.\nGlobal  \u0026ndash;config-file Path to config file, empty default value \u0026ndash;log-level Set logging level, defaults to info \u0026ndash;log-color Enable colored logging, defaults to true \u0026ndash;log-pretty Enable pretty logging, defaults to true  Server  \u0026ndash;tracing-enabled Enable sending traces, defaults to false \u0026ndash;tracing-type Tracing backend type, defaults to jaeger \u0026ndash;tracing-endpoint Endpoint for the agent, empty default value \u0026ndash;tracing-collector Endpoint for the collector, empty default value \u0026ndash;tracing-service Service name for tracing, defaults to hello \u0026ndash;debug-addr Address to bind debug server, defaults to 0.0.0.0:9109 \u0026ndash;debug-token Token to grant metrics access, empty default value \u0026ndash;debug-pprof Enable pprof debugging, defaults to false \u0026ndash;debug-zpages Enable zpages debugging, defaults to false \u0026ndash;http-addr Address to bind http server, defaults to 0.0.0.0:9105 \u0026ndash;http-root Root path of http server, defaults to / \u0026ndash;grpc-addr Address to bind grpc server, defaults to 0.0.0.0:9106 \u0026ndash;asset-path Path to custom assets, empty default value  Health  \u0026ndash;debug-addr Address to debug endpoint, defaults to 0.0.0.0:9109  Configuration file So far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/hello.yml, ${HOME}/.ocis/hello.yml or $(pwd)/config/hello.yml.\nUsage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis-hello --help.\nServer The server command is used to start the http and debug server on two addresses within a single process. The http server is serving the general webservice while the debug server is used for health check, readiness check and to server the metrics mentioned below. For further help please execute:\nocis-hello server --help Health The health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\nocis-hello health --help Metrics This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which got to be configured through one of the flag --debug-token or the environment variable HELLO_DEBUG_TOKEN mentioned above. By default the metrics endpoint is bound to http://0.0.0.0:9109/metrics.\n go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program\u0026rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  "});index.add({'id':4,'href':'/extensions/ocis_konnectd/getting-started/','title':"Getting Started",'content':"    Installation  Docker Binaries  Configuration  Envrionment variables  Global Server Health  Commandline flags  Global Server Health  Configuration file  Usage  Server Health  Metrics      Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker TBD\nBinaries TBD\nConfiguration We provide overall three different variants of configuration. The variant based on environment variables and commandline flags are split up into global values and command-specific values.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nGlobal  KONNECTD_CONFIG_FILE Path to config file, empty default value KONNECTD_LOG_LEVEL Set logging level, defaults to info KONNECTD_LOG_COLOR Enable colored logging, defaults to true KONNECTD_LOG_PRETTY Enable pretty logging, defaults to true  Server  KONNECTD_TRACING_ENABLED Enable sending traces, defaults to false KONNECTD_TRACING_TYPE Tracing backend type, defaults to jaeger KONNECTD_TRACING_ENDPOINT Endpoint for the agent, empty default value KONNECTD_TRACING_COLLECTOR Endpoint for the collector, empty default value KONNECTD_TRACING_SERVICE Service name for tracing, defaults to konnectd KONNECTD_DEBUG_ADDR Address to bind debug server, defaults to 0.0.0.0:9134 KONNECTD_DEBUG_TOKEN Token to grant metrics access, empty default value KONNECTD_DEBUG_PPROF Enable pprof debugging, defaults to false KONNECTD_DEBUG_ZPAGES Enable zpages debugging, defaults to false KONNECTD_HTTP_ADDR Address to bind http server, defaults to 0.0.0.0:9130 KONNECTD_HTTP_ROOT Root path of http server, defaults to / KONNECTD_HTTP_NAMESPACE Set the base namespace for service discovery, defaults to com.owncloud.web KONNECTD_IDENTITY_MANAGER Identity manager (one of ldap,kc,cookie,dummy), defaults to ldap KONNECTD_TRANSPORT_TLS_CERT Certificate file for transport encryption, uses a temporary dev-cert if empty KONNECTD_TRANSPORT_TLS_KEY Secret file for transport encryption, uses a temporary dev-cert if empty KONNECTD_ISS OIDC issuer URL, defaults to https://localhost:9130 KONNECTD_SIGNING_PRIVATE_KEY Full path to PEM encoded private key file (must match the \u0026ndash;signing-method algorithm) KONNECTD_SIGNING_KID Value of kid field to use in created tokens (uniquely identifying the signing-private-key), empty default value KONNECTD_VALIDATION_KEYS_PATH Full path to a folder containg PEM encoded private or public key files used for token validaton (file name without extension is used as kid), empty default value KONNECTD_ENCRYPTION_SECRET Full path to a file containing a %d bytes secret key, empty default value KONNECTD_SIGNING_METHOD JWT default signing method, defaults to PS256 KONNECTD_URI_BASE_PATH Custom base path for URI endpoints, empty default value KONNECTD_SIGN_IN_URI Custom redirection URI to sign-in form, empty default value KONNECTD_SIGN_OUT_URI Custom redirection URI to signed-out goodbye page, empty default value KONNECTD_ENDPOINT_URI Custom authorization endpoint URI, empty default value KONNECTD_ENDSESSION_ENDPOINT_URI Custom endsession endpoint URI, empty default value KONNECTD_ASSET_PATH Path to custom assets, empty default value KONNECTD_IDENTIFIER_CLIENT_PATH Path to the identifier web client base folder, defaults to /var/tmp/konnectd KONNECTD_IDENTIFIER_REGISTRATION_CONF Path to a identifier-registration.yaml configuration file, defaults to ./config/identifier-registration.yaml KONNECTD_IDENTIFIER_SCOPES_CONF Path to a scopes.yaml configuration file, empty default value KONNECTD_INSECURE Disable TLS certificate and hostname validation KONNECTD_TLS Use TLS (disable only if konnectd is behind a TLS-terminating reverse-proxy), defaults to true KONNECTD_TRUSTED_PROXY List of trusted proxy IP or IP network(s) (usage: KONNECTD_TRUSTED_PROXY=x.x.x.x y.y.y.y) KONNECTD_ALLOW_SCOPE Allow OAuth 2 scope(s) (usage: KONNECTD_ALLOW_SCOPE=A B C) KONNECTD_ALLOW_CLIENT_GUESTS Allow sign in of client controlled guest users KONNECTD_ALLOW_DYNAMIC_CLIENT_REGISTRATION Allow dynamic OAuth2 client registration KONNECTD_DISABLE_IDENTIFIER_WEBAPP Disable built-in identifier-webapp to use a frontend hosted elsewhere. Per default we use the built-in webapp. If set to false \u0026ndash;identifier-client-path must be provided, defaults to true  Health  KONNECTD_DEBUG_ADDR Address to debug endpoint, defaults to 0.0.0.0:9134  Commandline flags If you prefer to configure the service with commandline flags you can see the available variables below.\nGlobal  \u0026ndash;config-file Path to config file, empty default value \u0026ndash;log-level Set logging level, defaults to info \u0026ndash;log-color Enable colored logging, defaults to true \u0026ndash;log-pretty Enable pretty logging, defaults to true  Server  \u0026ndash;tracing-enabled Enable sending traces, defaults to false \u0026ndash;tracing-type Tracing backend type, defaults to jaeger \u0026ndash;tracing-endpoint Endpoint for the agent, empty default value \u0026ndash;tracing-collector Endpoint for the collector, empty default value \u0026ndash;tracing-service Service name for tracing, defaults to konnectd \u0026ndash;debug-addr Address to bind debug server, defaults to 0.0.0.0:9134 \u0026ndash;debug-token Token to grant metrics access, empty default value \u0026ndash;debug-pprof Enable pprof debugging, defaults to false \u0026ndash;debug-zpages Enable zpages debugging, defaults to false \u0026ndash;http-addr Address to bind http server, defaults to 0.0.0.0:9130 \u0026ndash;http-root Root path of http server, defaults to / \u0026ndash;http-namespace Set the base namespace for service discovery, defaults to com.owncloud.web \u0026ndash;identity-manager Identity manager (one of ldap,kc,cookie,dummy), defaults to ldap \u0026ndash;transport-tls-cert Certificate file for transport encryption, uses a temporary dev-cert if empty \u0026ndash;transport-tls-key Key file for transport encryption, uses a temporary dev-cert if empty \u0026ndash;iss OIDC issuer URL, defaults to https://localhost:9130 \u0026ndash;signing-private-key Full path to PEM encoded private key file (must match the \u0026ndash;signing-method algorithm) \u0026ndash;signing-kid Value of kid field to use in created tokens (uniquely identifying the signing-private-key), empty default value \u0026ndash;validation-keys-path Full path to a folder containg PEM encoded private or public key files used for token validaton (file name without extension is used as kid), empty default value \u0026ndash;encryption-secret Full path to a file containing a 32 bytes secret key, empty default value \u0026ndash;signing-method JWT default signing method, defaults to PS256 \u0026ndash;uri-base-path Custom base path for URI endpoints, empty default value \u0026ndash;sign-in-uri Custom redirection URI to sign-in form, empty default value \u0026ndash;signed-out-uri Custom redirection URI to signed-out goodbye page, empty default value \u0026ndash;authorization-endpoint-uri Custom authorization endpoint URI, empty default value \u0026ndash;endsession-endpoint-uri Custom endsession endpoint URI, empty default value \u0026ndash;asset-path Path to custom assets, empty default value \u0026ndash;identifier-client-path Path to the identifier web client base folder, defaults to /var/tmp/konnectd \u0026ndash;identifier-registration-conf Path to a identifier-registration.yaml configuration file, defaults to ./config/identifier-registration.yaml \u0026ndash;identifier-scopes-conf Path to a scopes.yaml configuration file, empty default value \u0026ndash;insecure Disable TLS certificate and hostname validation \u0026ndash;tls Use TLS (disable only if konnectd is behind a TLS-terminating reverse-proxy), defaults to true \u0026ndash;trusted-proxy List of trusted proxy IP or IP network (usage: \u0026ndash;trusted-proxy x.x.x.x \u0026ndash;trusted-proxy y.y.y.y) \u0026ndash;allow-scope Allow OAuth 2 scope (usage: \u0026ndash;allow-scope a \u0026ndash;allow-scope b \u0026hellip;) \u0026ndash;allow-client-guests Allow sign in of client controlled guest users \u0026ndash;allow-dynamic-client-registration Allow dynamic OAuth2 client registration \u0026ndash;disable-identifier-webapp Disable built-in identifier-webapp to use a frontend hosted elsewhere. Per default we use the built-in webapp. If set to false \u0026ndash;identifier-client-path must be provided, defaults to true  Health  \u0026ndash;debug-addr Address to debug endpoint, defaults to 0.0.0.0:9134  Configuration file So far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/konnectd.yml, ${HOME}/.ocis/konnectd.yml or $(pwd)/config/konnectd.yml.\nUsage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis-konnectd --help.\nServer The server command is used to start the http and debug server on two addresses within a single process. The http server is serving the general webservice while the debug server is used for health check, readiness check and to server the metrics mentioned below. For further help please execute:\nocis-konnectd server --help Health The health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\nocis-konnectd health --help Metrics This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which got to be configured through one of the flag --debug-token or the environment variable KONNECTD_DEBUG_TOKEN mentioned above. By default the metrics endpoint is bound to http://0.0.0.0:9134/metrics.\n go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program\u0026rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  "});index.add({'id':5,'href':'/extensions/ocis_glauth/','title':"GLAuth",'content':"This service provides a simple glauth world API which can be used by clients or other extensions.\n"});index.add({'id':6,'href':'/extensions/ocis_phoenix/','title':"Phoenix",'content':"This service embeds Phoenix to provide a UI for ownCloud Infinite Scale.\n"});index.add({'id':7,'href':'/phoenix/','title':"Phoenix",'content':"This is the next generation ownCloud frontend.\n"});index.add({'id':8,'href':'/extensions/ocis_reva/','title':"Reva",'content':"This service provides an ocis extension that wraps reva and adds an opinionated configuration to it.\n"});index.add({'id':9,'href':'/ocis/getting-started/','title':"Getting Started",'content':"    Installation  Docker Binaries  Quickstart Runtime Configuration  Envrionment variables  Global Server Health  Commandline flags  Global Server Health  Configuration file  Usage  Server Health  Metrics      Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker TBD\nBinaries TBD\nQuickstart Following https://github.com/owncloud/ocis#development\ngit clone https://github.com/owncloud/ocis.git cd ocis make build mkdir /var/tmp/reva/root/{home,oc} Open http://localhost:9100 and login using one of the demo accounts:\neinstein:relativity marie:radioactivty richard:superfluidity Runtime Included with the ocis binary is embedded a go-micro runtime that is in charge of starting services as a fork of the master process. This provides complete control over the services. Ocis extensions can be added as part of this runtime.\n./bin/ocis micro This will currently boot:\ncom.owncloud.api com.owncloud.http.broker com.owncloud.proxy com.owncloud.registry com.owncloud.router com.owncloud.runtime com.owncloud.web go.micro.http.broker Further ocis extensions can be added to the runtime via the ocis command like:\n./bin/ocis hello Which will register:\ncom.owncloud.web.hello com.owncloud.api.hello To the list of available services.\nConfiguration We provide overall three different variants of configuration. The variant based on environment variables and commandline flags are split up into global values and command-specific values.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nGlobal  OCIS_LOG_LEVEL Set logging level, defaults to info OCIS_LOG_COLOR Enable colored logging, defaults to true OCIS_LOG_PRETTY Enable pretty logging, defaults to true  Server  OCIS_DEBUG_ADDR Address to bind debug server, defaults to 0.0.0.0:9010 OCIS_DEBUG_TOKEN Token to grant metrics access, empty default value OCIS_DEBUG_PPROF Enable pprof debugging, defaults to false OCIS_HTTP_ADDR Address to bind http server, defaults to 0.0.0.0:9000 OCIS_HTTP_ROOT Root path for http endpoint, defaults to / OCIS_GRPC_ADDR Address to bind grpc server, defaults to 0.0.0.0:9001 OCIS_SERVICES_ENABLED List of enabled services, defaults to phoenix,konnectd,graph,ocs,webdav,hello  Health  OCIS_DEBUG_ADDR Address to debug endpoint, defaults to 0.0.0.0:9010  Commandline flags If you prefer to configure the service with commandline flags you can see the available variables below.\nGlobal  \u0026ndash;log-level Set logging level, defaults to info \u0026ndash;log-color Enable colored logging, defaults to true \u0026ndash;log-pretty Enable pretty logging, defaults to true  Server  \u0026ndash;debug-addr Address to bind debug server, defaults to 0.0.0.0:9010 \u0026ndash;debug-token Token to grant metrics access, empty default value \u0026ndash;debug-pprof Enable pprof debugging, defaults to false \u0026ndash;http-addr Address to bind http server, defaults to 0.0.0.0:9000 \u0026ndash;http-root Root path for http endpoint, defaults to / \u0026ndash;grpc-addr Address to bind grpc server, defaults to 0.0.0.0:9001 \u0026ndash;services-enabled List of enabled services, defaults to hello,phoenix,graph,graph-explorer,ocs,webdav,reva-frontend,reva-gateway,reva-users,reva-auth-basic,reva-auth-bearer,reva-sharing,reva-storage-root,reva-storage-home,reva-storage-home-data,reva-storage-oc,reva-storage-oc-data,devldap  Health  \u0026ndash;debug-addr Address to debug endpoint, defaults to 0.0.0.0:9010  Configuration file So far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nUsage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis --help.\nServer The server command is used to start the http and debug server on two addresses within a single process. The http server is serving the general webservice while the debug server is used for health check, readiness check and to server the metrics mentioned below. For further help please execute:\nocis server --help Health The health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\nocis health --help Metrics This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which got to be configured through one of the flag --debug-token or the environment variable OCIS_DEBUG_TOKEN mentioned above. By default the metrics endpoint is bound to http://0.0.0.0:8001/metrics.\n go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program\u0026rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  "});index.add({'id':10,'href':'/extensions/ocis_hello/building/','title':"Building",'content':"    Frontend Backend      As this project is built with Go and NodeJS, so you need to install that first. The installation of Go and NodeJS is out of the scope of this document, please follow the official documentation for Go, NodeJS and Yarn, to build this project you have to install Go \u0026gt;= v1.13. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-hello.git cd ocis-hello All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile and respectively our package.json.\nFrontend yarn install yarn build The above commands will install the required build dependencies and build the whole frontend bundle. This bundle will we embeded into the binary later on.\nBackend make generate make build The above commands will embed the frontend bundle into the binary. Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis-hello -h to see all available options.\n"});index.add({'id':11,'href':'/extensions/ocis_accounts/getting-started/','title':"Getting Started",'content':"    Installation  Docker Binaries  Configuration  Envrionment variables  Server  Commandline flags Configuration file  Usage  Server       Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker TBD\nBinaries TBD\nConfiguration We provide overall three different variants of configuration. The variant based on environment variables and commandline flags are split up into global values and command-specific values.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nServer  OCIS_ACCOUNTS_MANAGER Enable sending traces, defaults to filesystem OCIS_ACCOUNTS_MOUNT_PATH Mounting point for the accounts service when running on the filesystem as manager. OCIS_ACCOUNTS_NAME Name of the accounts service. It will be part of the namespace. OCIS_ACCOUNTS_NAMESPACE Namespace of the accounts service. OCIS_ACCOUNTS_ADDRESS Endpoint for the grpc service endpoint.  Commandline flags If you prefer to configure the service with commandline flags you can see the available variables below.\nConfiguration file So far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/accounts.yml, ${HOME}/.ocis/accounts.yml or $(pwd)/config/accounts.yml.\nUsage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis-accounts --help.\nServer The server command is used to start the grpc server. For further help please execute:\nocis-accounts server --help "});index.add({'id':12,'href':'/extensions/ocis_glauth/getting-started/','title':"Getting Started",'content':"    Installation  Docker Binaries  Configuration  Envrionment variables  Global Server Health  Commandline flags  Global Server Health  Configuration file  Usage  Server Health  Metrics      Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker TBD\nBinaries TBD\nConfiguration We provide overall three different variants of configuration. The variant based on environment variables and commandline flags are split up into global values and command-specific values.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nGlobal  GLAUTH_CONFIG_FILE Path to config file, empty default value GLAUTH_LOG_LEVEL Set logging level, defaults to info GLAUTH_LOG_COLOR Enable colored logging, defaults to true GLAUTH_LOG_PRETTY Enable pretty logging, defaults to true  Server  GLAUTH_TRACING_ENABLED Enable sending traces, defaults to false GLAUTH_TRACING_TYPE Tracing backend type, defaults to jaeger GLAUTH_TRACING_ENDPOINT Endpoint for the agent, empty default value GLAUTH_TRACING_COLLECTOR Endpoint for the collector, empty default value GLAUTH_TRACING_SERVICE Service name for tracing, defaults to glauth GLAUTH_DEBUG_ADDR Address to bind debug server, defaults to 0.0.0.0:9124 GLAUTH_DEBUG_TOKEN Token to grant metrics access, empty default value GLAUTH_DEBUG_PPROF Enable pprof debugging, defaults to false GLAUTH_DEBUG_ZPAGES Enable zpages debugging, defaults to false GLAUTH_HTTP_ADDR Address to bind http server, defaults to 0.0.0.0:9120 GLAUTH_HTTP_NAMESPACE The http namespace GLAUTH_HTTP_ROOT Root path of http server, defaults to /  Health  GLAUTH_DEBUG_ADDR Address to debug endpoint, defaults to 0.0.0.0:9124  Commandline flags If you prefer to configure the service with commandline flags you can see the available variables below.\nGlobal  \u0026ndash;config-file Path to config file, empty default value \u0026ndash;log-level Set logging level, defaults to info \u0026ndash;log-color Enable colored logging, defaults to true \u0026ndash;log-pretty Enable pretty logging, defaults to true  Server  \u0026ndash;tracing-enabled Enable sending traces, defaults to false \u0026ndash;tracing-type Tracing backend type, defaults to jaeger \u0026ndash;tracing-endpoint Endpoint for the agent, empty default value \u0026ndash;tracing-collector Endpoint for the collector, empty default value \u0026ndash;tracing-service Service name for tracing, defaults to glauth \u0026ndash;debug-addr Address to bind debug server, defaults to 0.0.0.0:9124 \u0026ndash;debug-token Token to grant metrics access, empty default value \u0026ndash;debug-pprof Enable pprof debugging, defaults to false \u0026ndash;debug-zpages Enable zpages debugging, defaults to false \u0026ndash;http-addr Address to bind http server, defaults to 0.0.0.0:9120 \u0026ndash;http-namespace Namespace for internal services communication, defaults to com.owncloud.web \u0026ndash;http-root Root path of http server, defaults to /  Health  \u0026ndash;debug-addr Address to debug endpoint, defaults to 0.0.0.0:9124  Configuration file So far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/glauth.yml, ${HOME}/.ocis/glauth.yml or $(pwd)/config/glauth.yml.\nUsage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis-glauth --help.\nServer The server command is used to start the http and debug server on two addresses within a single process. The http server is serving the general webservice while the debug server is used for health check, readiness check and to server the metrics mentioned below. For further help please execute:\nocis-glauth server --help Health The health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\nocis-glauth health --help Metrics This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which got to be configured through one of the flag --debug-token or the environment variable GLAUTH_DEBUG_TOKEN mentioned above. By default the metrics endpoint is bound to http://0.0.0.0:9124/metrics.\n go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program\u0026rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  "});index.add({'id':13,'href':'/extensions/ocis_phoenix/getting-started/','title':"Getting Started",'content':"    Installation  Docker Binaries  Configuration  Envrionment variables  Global Server Health  Commandline flags  Global Server Health  Configuration file  Usage  Server Health  Metrics      Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker TBD\nBinaries TBD\nConfiguration We provide overall three different variants of configuration. The variant based on environment variables and commandline flags are split up into global values and command-specific values.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nGlobal  PHOENIX_CONFIG_FILE Path to config file, empty default value PHOENIX_LOG_LEVEL Set logging level, defaults to info PHOENIX_LOG_COLOR Enable colored logging, defaults to true PHOENIX_LOG_PRETTY Enable pretty logging, defaults to true  Server  PHOENIX_TRACING_ENABLED Enable sending traces, defaults to false PHOENIX_TRACING_TYPE Tracing backend type, defaults to jaeger PHOENIX_TRACING_ENDPOINT Endpoint for the agent, empty default value PHOENIX_TRACING_COLLECTOR Endpoint for the collector, empty default value PHOENIX_TRACING_SERVICE Service name for tracing, defaults to phoenix PHOENIX_DEBUG_ADDR Address to bind debug server, defaults to 0.0.0.0:9104 PHOENIX_DEBUG_TOKEN Token to grant metrics access, empty default value PHOENIX_DEBUG_PPROF Enable pprof debugging, defaults to false PHOENIX_DEBUG_ZPAGES Enable zpages debugging, defaults to false PHOENIX_HTTP_ADDR Address to bind http server, defaults to 0.0.0.0:9100 PHOENIX_HTTP_ROOT Root path of http server, defaults to / PHOENIX_ASSET_PATH Path to custom assets, empty default value PHOENIX_WEB_CONFIG Path to phoenix config, empty default value PHOENIX_WEB_CONFIG_SERVER Server URL, defaults to http://localhost:9135 PHOENIX_WEB_CONFIG_THEME Theme, defaults to owncloud PHOENIX_WEB_CONFIG_VERSION Version, defaults to 0.1.0 PHOENIX_APPS Use multiple times to provide multiple apps PHOENIX_EXTERNAL_APPS Not supported yet, specify a config.json file via PHOENIX_WEB_CONFIG PHOENIX_OIDC_METADATA_URL OpenID Connect metadata URL, defaults to http://localhost:9130/.well-known/openid-configuration PHOENIX_OIDC_AUTHORITY OpenID Connect authority, defaults to http://localhost:9130 PHOENIX_OIDC_CLIENT_ID OpenID Connect client ID, defaults to phoenix PHOENIX_OIDC_RESPONSE_TYPE OpenID Connect response type, defaults to code PHOENIX_OIDC_SCOPE OpenID Connect scope, defaults to openid profile email  In case you want to render any additional properties in the config.json you can provide a custom config.json using eg. PHOENIX_WEB_CONFIG=/path/to/config.json ocis-phoenix server\nHealth  PHOENIX_DEBUG_ADDR Address to debug endpoint, defaults to 0.0.0.0:9104  Commandline flags If you prefer to configure the service with commandline flags you can see the available variables below.\nGlobal  \u0026ndash;config-file Path to config file, empty default value \u0026ndash;log-level Set logging level, defaults to info \u0026ndash;log-color Enable colored logging, defaults to true \u0026ndash;log-pretty Enable pretty logging, defaults to true  Server  \u0026ndash;tracing-enabled Enable sending traces, defaults to false \u0026ndash;tracing-type Tracing backend type, defaults to jaeger \u0026ndash;tracing-endpoint Endpoint for the agent, empty default value \u0026ndash;tracing-collector Endpoint for the collector, empty default value \u0026ndash;tracing-service Service name for tracing, defaults to phoenix \u0026ndash;debug-addr Address to bind debug server, defaults to 0.0.0.0:9104 \u0026ndash;debug-token Token to grant metrics access, empty default value \u0026ndash;debug-pprof Enable pprof debugging, defaults to false \u0026ndash;debug-zpages Enable zpages debugging, defaults to false \u0026ndash;http-addr Address to bind http server, defaults to 0.0.0.0:9100 \u0026ndash;http-root Root path of http server, defaults to / \u0026ndash;asset-path Path to custom assets, empty default value \u0026ndash;web-config Path to phoenix config, empty default value \u0026ndash;web-config-server Server URL, defaults to http://localhost:9135 \u0026ndash;web-config-theme Theme, defaults to owncloud \u0026ndash;web-config-version Version, defaults to 0.1.0 \u0026ndash;web-config-app Provide multiple apps, defaults to \u0026quot;\u0026quot;. Usage: phoenix --web-config-app files --web-config-app pdf-viewer \u0026ndash;oidc-metadata-url OpenID Connect metadata URL, defaults to http://localhost:9130/.well-known/openid-configuration \u0026ndash;oidc-authority OpenID Connect authority, defaults to http://localhost:9130 \u0026ndash;oidc-client-id OpenID Connect client ID, defaults to phoenix \u0026ndash;oidc-response-type OpenID Connect response type, defaults to code \u0026ndash;oidc-scope OpenID Connect scope, defaults to openid profile email  In case you want to render any additional properties in the config.json you can provide a custom config.json using eg. ocis-phoenix server --web-config=/path/to/config.json\nHealth  \u0026ndash;debug-addr Address to debug endpoint, defaults to 0.0.0.0:9104  Configuration file So far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/phoenix.yml, ${HOME}/.ocis/phoenix.yml or $(pwd)/config/phoenix.yml.\nUsage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis-phoenix --help.\nServer The server command is used to start the http and debug server on two addresses within a single process. The http server is serving the general webservice while the debug server is used for health check, readiness check and to server the metrics mentioned below. For further help please execute:\nocis-phoenix server --help Health The health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\nocis-phoenix health --help Metrics This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which got to be configured through one of the flag --debug-token or the environment variable PHOENIX_DEBUG_TOKEN mentioned above. By default the metrics endpoint is bound to http://0.0.0.0:9104/metrics.\n go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program\u0026rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  "});index.add({'id':14,'href':'/extensions/ocis_proxy/getting-started/','title':"Getting Started",'content':"    Installation  Docker Binaries  Configuration  Envrionment variables  Server  Commandline flags Configuration file  Usage  Server       Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker TBD\nBinaries TBD\nConfiguration We provide overall three different variants of configuration. The variant based on environment variables and commandline flags are split up into global values and command-specific values.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nServer  OCIS_PROXY_NAME Name of the proxy service. It will be part of the namespace. OCIS_PROXY_NAMESPACE Namespace of the proxy service. OCIS_PROXY_ADDRESS Endpoint for the http service endpoint.  Commandline flags If you prefer to configure the service with commandline flags you can see the available variables below.\nConfiguration file So far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/proxy.yml, ${HOME}/.ocis/proxy.yml or $(pwd)/config/proxy.yml.\nUsage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis-proxy --help.\nServer The server command is used to start the http server. For further help please execute:\nocis-proxy server --help "});index.add({'id':15,'href':'/extensions/ocis_reva/getting-started/','title':"Getting Started",'content':" Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker TBD\nBinaries TBD\nConfiguration We provide overall three different variants of configuration. The variant based on environment variables and commandline flags are split up into global values and command-specific values.\nThe configuration tries to map different configuration options from reva into dedicated services. For now please run bin/ocis-reva {command} -h to see the list of available options or have a look at the flagsets and the mapping to a reva config in the corresponding commands.\n"});index.add({'id':16,'href':'/phoenix/getting-started/','title':"Getting Started",'content':"    Installation  Setting up the ownCloud Server  Adjusting config.php Setting up OAuth2  Setting up Phoenix       Installation Setting up the ownCloud Server Make sure you have an ownCloud Server already installed.\nAdjusting config.php Add the following entries to config/config.php:\n tell ownCloud where Phoenix is located:\n'phoenix.baseUrl' =\u0026gt; '\u0026lt;phoenix-url\u0026gt;',  add a CORS domain entry for Phoenix in config.php:\n'cors.allowed-domains' =\u0026gt; ['\u0026lt;phoenix-domain\u0026gt;'],  optional: when developing against unstable APIs (technical preview), these need to be enabled in the server core:\ndav.enable.tech_preview =\u0026gt; true,   Setting up OAuth2 To connect to the ownCloud server, it is necessary to set it up with OAuth2.\nInstall and enable the oauth2 app:\n% occ market:install oauth2 % occ app:enable oauth2 Login as administrator in the ownCloud Server web interface and go to the \u0026ldquo;User Authentication\u0026rdquo; section in the admin settings and add an entry for Phoenix as follows:\n pick an arbitrary name for the client set the redirection URI to \u0026lt;phoenix-url\u0026gt;/oidc-callback.html make sure to take note of the client identifier value as it will be needed in the Phoenix configuration later on  Setting up Phoenix In the local Phoenix checkout, copy the config.json.sample file to config.json and adjust it accordingly:\n Set the \u0026ldquo;server\u0026rdquo; key to the URL of the ownCloud server including path. If the URL contains a path, please also add a trailing slash there. Set the \u0026ldquo;clientId\u0026rdquo; key to the client identifier as copied from the \u0026ldquo;User Authentication\u0026rdquo; section before. Adjust \u0026ldquo;url\u0026rdquo; and \u0026ldquo;authUrl\u0026rdquo; using the ownCloud server URL as prefix for both Optionally adjust \u0026ldquo;apps\u0026rdquo; for the list of apps to be loaded. These match the app names inside the \u0026ldquo;apps\u0026rdquo; folder.  "});index.add({'id':17,'href':'/ocis/bridge/','title':"Bridge",'content':"    Current status How to do it  Install the owncloud 10 graphapi app Enable the graphapi app Start ocis-glauth  Grab it! Run it! Check it is up and running  Start ocis-phoenix  Get it! Run it!  Start ocis-konnectd  Get it! Set environment variables  Configure clients  Run it! Check it is up and running  Patch owncloud Install the owncloud 10 openidconnect app  Next steps      We are planning to build a bridge from ownCloud 10 to ocis. The idea is to have a reverse proxy infront of ownCloud 10 that will forward requests to ownCloud 10 or ocis-reva, depending on the migration status of the logged in user.\nThis document is a work in progress of the current setup.\nCurrent status Using ocis and the ownCloud 10 openidconnect and graphapi plugins it is possible today to introduce openid connect based authentication to existing instances. That is a prerequisite for migrating to ocis.\nHow to do it Install the owncloud 10 graphapi app In an owncloud 10 apps folder\n$ git clone git@github.com:owncloud/graphapi.git $ cd graphapi $ composer install  Enable the graphapi app occ a:e graphapi  No configuration necessary. You can test with curl:\n$ curl https://cloud.example.com/index.php/apps/graphapi/v1.0/users -u admin | jq Enter host password for user \u0026#39;admin\u0026#39;: % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 694 100 694 0 0 4283 0 --:--:-- --:--:-- --:--:-- 4283 { \u0026#34;value\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;mail\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;Demo\u0026#34;, \u0026#34;mail\u0026#34;: null }, ... ], \u0026#34;@odata.nextLink\u0026#34;: \u0026#34;https://oc.butonic.de/apps/graphapi/v1.0/users?$top=10\u0026amp;$skip=10\u0026#34; }  Note: The MS graph api actually asks for Bearer auth, but in order to check users passwords during an LDAP bind we are exploiting ownClouds authentication implementation that will grant access when Basic auth is used. An LDAP Bind you may ask? Read on!\n Start ocis-glauth We are going to use the above ownCloud 10 and graphapi app to turn it into the datastore for an LDAP proxy.\nGrab it! In an ocis folder\n$ git clone git@github.com:owncloud/ocis-glauth.git $ cd ocis-glauth $ git checkout start-glauth $ make  This should give you a bin/ocis-glauth binary. Try listing the help with bin/ocis-glauth --help.\nTODO merge glauth PR https://github.com/owncloud/ocis-glauth/pull/1\nRun it! You need to point ocis-glauth to your owncloud domain:\n$ bin/ocis-glauth --log-level debug server --backend-server https://cloud.example.com --backend-basedn dc=example,dc=com --log-level debug is only used to generate more verbose output --backend-server https://cloud.example.com is the url to an ownCloud instance with an enabled graphapi app --backend-basedn dc=example,dc=com is used to construct the LDAP dn. The user admin will become cn=admin,dc=example,dc=com.\nCheck it is up and running You should now be able to list accounts from your ownCloud 10 oc_accounts table using:\n$ ldapsearch -x -H ldap://localhost:9125 -b dc=example,dc=com -D \u0026#34;cn=admin,dc=example,dc=com\u0026#34; -W \u0026#39;(objectclass=posixaccount)\u0026#39; Groups should work as well:\n$ ldapsearch -x -H ldap://localhost:9125 -b dc=example,dc=com -D \u0026#34;cn=admin,dc=example,dc=com\u0026#34; -W \u0026#39;(objectclass=posixgroup)\u0026#39;  Note: This is currently a readonly implementation and minimal to the usecase of authenticating users with konnectd.\n Start ocis-phoenix Get it! In an ocis folder\n$ git clone git@github.com:owncloud/ocis-phoenix.git $ cd ocis-phoenix $ make  This should give you a bin/ocis-phoenix binary. Try listing the help with bin/ocis-phoenix --help.\nRun it! Point ocis-phoenix to your owncloud domain and tell it where to find the openid connect issuing authority:\n$ bin/ocis-phoenix server --web-config-server https://cloud.example.com --oidc-authority https://192.168.1.100:9130 --oidc-metadata-url https://192.168.1.100:9130/.well-known/openid-configuration --oidc-client-id ocis ocis-phoenix needs to know - --web-config-server https://cloud.example.com is ownCloud url with webdav and ocs endpoints (oc10 or ocis) - --oidc-authority https://192.168.1.100:9130 the openid connect issuing authority, in our case oidc-konnectd, running on port 9130 - --oidc-metadata-url https://192.168.1.100:9130/.well-known/openid-configuration the openid connect configuration endpoint, typically the issuer host with .well-known/openid-configuration, but there are cases when another endpoint is used, eg. ping identity provides multiple endpoints to separate domains - --oidc-client-id ocis the client id we will register later with ocis-konnectd in the identifier-registration.yaml\nStart ocis-konnectd Get it! In an ocis folder\n$ git clone git@github.com:owncloud/ocis-konnectd.git $ cd ocis-konnectd $ make  This should give you a bin/ocis-konnectd binary. Try listing the help with bin/ocis-konnectd --help.\nSet environment variables Konnectd needs environment variables to configure the LDAP server:\nexport LDAP_URI=ldap://192.168.1.100:9125 export LDAP_BINDDN=\u0026#34;cn=admin,dc=example,dc=com\u0026#34; export LDAP_BINDPW=\u0026#34;its-a-secret\u0026#34; export LDAP_BASEDN=\u0026#34;dc=example,dc=com\u0026#34; export LDAP_SCOPE=sub export LDAP_LOGIN_ATTRIBUTE=uid export LDAP_EMAIL_ATTRIBUTE=mail export LDAP_NAME_ATTRIBUTE=givenName export LDAP_UUID_ATTRIBUTE=uid export LDAP_UUID_ATTRIBUTE_TYPE=text export LDAP_FILTER=\u0026#34;(objectClass=posixaccount)\u0026#34; Don\u0026rsquo;t forget to use an existing user and the correct password.\nConfigure clients Now we need to configure a client we can later use to configure the ownCloud 10 openidconnect app. In the assets/identifier-registration.yaml have:\n--- # OpenID Connect client registry.clients:-id:ocisname:ownCloudInfiniteScaleinsecure:yesapplication_type:webredirect_uris:-https://cloud.example.com/apps/openidconnect/redirect-http://localhost:9100/oidc-callback.html-http://localhost:9100-http://localhost:9100/ You will need the insecure: yes if you are using self signed certificates.\nReplace cloud.example.com in the redirect URI with your ownCloud 10 host and port. Replace localhost:9100 in the redirect URIs with your the ocis-phoenix host and port.\nRun it! You can now bring up ocis-connectd with:\n$ bin/ocis-konnectd server --iss https://192.168.1.100:9130 --identifier-registration-conf assets/identifier-registration.yaml --signing-kid gen1-2020-02-27 ocis-konnectd needs to know - --iss https://192.168.1.100:9130 the issuer, which must be a reachable https endpoint. For testing an ip works. HTTPS is NOT optional. This url is exposed in the https://192.168.1.100:9130/.well-known/openid-configuration endpoint and clients need to be able to connect to it - --identifier-registration-conf assets/identifier-registration.yaml the identifier-registration.yaml you created - --signing-kid gen1-2020-02-27 a signature key id, otherwise the jwks key has no name, which might cause problems with clients. a random key is ok, but it should change when the actual signing key changes.\nCheck it is up and running  Try getting the configuration:\n$ curl https://192.168.1.100:9130/.well-known/openid-configuration Check if the login works at https://192.168.1.100:9130/signin/v1/identifier\n   Note: If you later get a Unable to find a key for (algorithm, kid):PS256, ) Error make sure you did set a --signing-kid when starting ocis-konnectd by checking it is present in https://192.168.1.100:9130/konnect/v1/jwks.json\n Patch owncloud While the UserSession in ownCloud 10 is currently used to test all available IAuthModule implementations, it immediately logs out the user when an exception occurs. However, existing owncloud 10 instances use the oauth2 app to create Bearer tokens for mobile and desktop clients.\nTo give the openidconnect app a chance to verify the tokens we need to change the code a bit. See https://github.com/owncloud/core/pull/37043 for a possible solution.\n Note: The PR is hot \u0026hellip; as in younger than this list of steps. And it messes with authentication. Use with caution.\n Install the owncloud 10 openidconnect app In an owncloud 10 apps folder\n$ git clone git@github.com:owncloud/openidconnect.git $ cd openidconnect $ composer install  After enabling the app configure it in config/oidc.config.php\n$CONFIG = [ \u0026#39;openid-connect\u0026#39; =\u0026gt; [ \u0026#39;provider-url\u0026#39; =\u0026gt; \u0026#39;https://192.168.1.100:9130\u0026#39;, \u0026#39;client-id\u0026#39; =\u0026gt; \u0026#39;ocis\u0026#39;, \u0026#39;loginButtonName\u0026#39; =\u0026gt; \u0026#39;OpenId Connect @ Konnectd\u0026#39;, ], \u0026#39;debug\u0026#39; =\u0026gt; true, // if using self signed certificates // allow the different domains access to the ocs and wabdav endpoints: \u0026#39;cors.allowed-domains\u0026#39; =\u0026gt; [ \u0026#39;https://cloud.example.com\u0026#39;, \u0026#39;http://localhost:9100\u0026#39;, ], ]; In the above configuration replace - provider-url with the URL to your ocis-konnectd issuer - https://cloud.example.com with the URL to your ownCloud 10 instance - http://localhost:9100 with the URL to your phoenix instance\n Note: By default the openidconnect app will use the email of the user to match the user from the oidc userinfo endpoint with the ownCloud account. So make sure your users have a unique primary email.\n Next steps Aside from the above todos these are the next stepo - tie it all together behind ocis-proxy - create an ocis bridge command that runs all the ocis services in one step with a properly preconfigured ocis-konnectd identifier-registration.yaml file for phoenix and the owncloud 10 openidconnect app, as well as a randomized --signing-kid.\n"});index.add({'id':18,'href':'/extensions/ocis_konnectd/building/','title':"Building",'content':"    Backend      As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go \u0026gt;= v1.13. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-konnectd.git cd ocis-konnectd All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile.\nBackend make generate make build Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis-konnectd -h to see all available options and subcommands.\n"});index.add({'id':19,'href':'/extensions/ocis_accounts/building/','title':"Building",'content':"    Backend      As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go \u0026gt;= v1.13. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-accounts.git cd ocis-accounts All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile.\nBackend make generate make build Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis-accounts -h to see all available options and subcommands.\n"});index.add({'id':20,'href':'/extensions/ocis_glauth/building/','title':"Building",'content':"    Backend      As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go \u0026gt;= v1.13. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-glauth.git cd ocis-glauth All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile.\nBackend make generate make build Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis-glauth -h to see all available options.\n"});index.add({'id':21,'href':'/extensions/ocis_phoenix/building/','title':"Building",'content':" As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go \u0026gt;= v1.12. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-phoenix.git cd ocis-phoenix All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile.\nBackend make generate make build The above commands will download a Phoenix release and embed it into the binary. Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis-phoenix -h to see all available options.\n"});index.add({'id':22,'href':'/extensions/ocis_proxy/building/','title':"Building",'content':"    Backend      As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go \u0026gt;= v1.13. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-proxy.git cd ocis-proxy All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile.\nBackend make generate make build Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis-proxy -h to see all available options and subcommands.\n"});index.add({'id':23,'href':'/extensions/ocis_reva/building/','title':"Building",'content':" As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go.To build this project you have to install Go \u0026gt;= v1.13. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-reva.git cd ocis-reva All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile.\nBackend make build The above command should produce the binary within the bin/ folder now, give it a try with ./bin/ocis-reva -h to see all available options.\n"});index.add({'id':24,'href':'/phoenix/building/','title':"Building",'content':"    Building Phoenix      Building Phoenix  Run yarn install to install core dependencies Run yarn install-all to install dependencies of all apps and core Run yarn dist to build Phoenix and all apps included in the apps folder  "});index.add({'id':25,'href':'/extensions/ocis_reva/users/','title':"Users",'content':" Demo driver This is the default user driver.It contains three users:\neinstein:relativity marie:radioactivty richard:superfluidity  JSON driver In order to switch from the demo driver to JSON based users you need to export the relevant environment variables:\nexport REVA_USERS_DRIVER=json export REVA_USERS_JSON=/path/to/users.json  For the format of the users.json have a look at the reva examples\nLDAP driver In order to switch from the demo driver to LDAP you need to export the relevant environment variable:\nexport REVA_USERS_DRIVER=ldap  If the below defaults don\u0026rsquo;t match your environment change them accordingly:\nexport REVA_LDAP_HOSTNAME=localhost export REVA_LDAP_PORT=636 export REVA_LDAP_BASE_DN='dc=owncloud,dc=com' export REVA_LDAP_USERFILTER='(\u0026amp;(objectclass=posixAccount)(cn=%s))' export REVA_LDAP_GROUPFILTER='(\u0026amp;(objectclass=posixGroup)(cn=%s))' export REVA_LDAP_BIND_DN='cn=admin,dc=owncloud,dc=com' export REVA_LDAP_BIND_PASSWORD=admin export REVA_LDAP_SCHEMA_UID=uid export REVA_LDAP_SCHEMA_MAIL=mail export REVA_LDAP_SCHEMA_DISPLAYNAME=displayName export REVA_LDAP_SCHEMA_CN=cn  Then restart the bin/ocis-reva users and bin/ocis-reva auth-basic services for the changes to take effect.\n"});index.add({'id':26,'href':'/ocis/extensions/','title':"Extensions",'content':"    How to build and run ocis-simple Hacking ocis-hello  Option 1:  Hacking phoenix (and ocis-phoenix) The ownCloud design system External phoenix apps Phoenix extension points  Phoenix core Files app  API driven development      How to build and run ocis-simple ocis uses build tags to build different flavors of the binary. In order to work on a new extension we are going to reduce the scope a little and use the simple tag. Let us begin by creating a dedicated folder:\nmkdir ocis-extension-workshop \u0026amp;\u0026amp; ocis-extension-workshop Following https://github.com/owncloud/ocis\ngit clone https://github.com/owncloud/ocis.git cd ocis TAGS=simple make generate build Q: Can you specify which version of phoenix to use? A: No, the phoenix that is used is compiled into the assets of ocis-phoenix which is currently not automatically updated. We\u0026rsquo;ll see how to use a custom phoenix later.\nbin/ocis server\nOpen the browser at http://localhost:9100\n You land on the login screen. click login You are redirected to an idp at http://localhost:9140/oauth2/auth with a login mask. Use einstein:relativityto login (one of the three demo users) You are redirected to http://localhost:9100/#/hello the ocis-hello app Replace World with something else and submit. You should see Hello %something else%  Q: One of the required ports is already in use. Ocis seems to be trying to restart the service over and over. What gives? A: Using the ocis binary to start the server will case ocis to keep track of the different services and restart them in case they crash.\nHacking ocis-hello go back to the ocis-extension-workshop folder\ncd .. Following https://github.com/owncloud/ocis-hello\ngit clone https://github.com/owncloud/ocis-hello.git cd ocis-hello yarn install # this actually creates the assets yarn build # this will compile the assets into the binary make generate build  Two options: 1. run only the necessery services from ocis and ocis-hello independently 2. compile ocis with the updated ocis-hello\nOption 1: get a list of ocis services:\nps ax | grep ocis Try to kill ocis hello\nRemember: for now, killing a service will cause ocis to restart it. This is subject to change.\nIn order to be able to manage the processes ourselves we need to start them independently:\nbin/ocis server starts the same services as:\nbin/ocis micro \u0026amp; bin/ocis phoenix \u0026amp; bin/ocis hello \u0026amp; bin/ocis reva \u0026amp;  Now we can kill the ocis hello and use our custom built ocis-hello binary:\ncd ../ocis-hello bin/ocis-hello server Hacking phoenix (and ocis-phoenix) Following https://github.com/owncloud/phoenix we are going to build the current phoenix\ngit clone https://github.com/owncloud/phoenix.git cd phoenix yarn install yarn dist  We can tell ocis to use the compiled assets:\nKill ocis phoenix, then use the compiled assets when starting phoenix.\ncd ../ocis PHOENIX_ASSET_PATH=\u0026#34;`pwd`/../phoenix/dist\u0026#34; bin/ocis phoenix The ownCloud design system The owncloud design system contains a set of ownCloud vue components for phoenix or your own ocis extensions. Use it for a consistent look and feel.\nPoint your browser to https://owncloud.github.io/owncloud-design-system and check the available components. Live editing the examples in the browser is supported.\nnote: There is a bug with navigation sub items: either click a nav item twice or refresh the page\nExternal phoenix apps This is what hello is: copy and extend!\n Phoenix is configured using the config.json which is served by the phoenix service (either bin/ocis phoenix or bin/ocis-phoenix server)\n point ocis phoenix to the web config which you extended with an external app: PHOENIX_WEB_CONFIG=\u0026quot;pwd/../phoenix/config.json\u0026quot; PHOENIX_ASSET_PATH=\u0026quot;pwd/../phoenix/dist\u0026quot; bin/ocis phoenix\n{ \u0026#34;server\u0026#34;: \u0026#34;http://localhost:9140\u0026#34;, \u0026#34;theme\u0026#34;: \u0026#34;owncloud\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;openIdConnect\u0026#34;: { \u0026#34;metadata_url\u0026#34;: \u0026#34;http://localhost:9140/.well-known/openid-configuration\u0026#34;, \u0026#34;authority\u0026#34;: \u0026#34;http://localhost:9140\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;phoenix\u0026#34;, \u0026#34;response_type\u0026#34;: \u0026#34;code\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;openid profile email\u0026#34; }, \u0026#34;apps\u0026#34;: [], \u0026#34;external_apps\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;hello\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;http://localhost:9105/hello.js\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;http://localhost:9105\u0026#34; } }, { \u0026#34;id\u0026#34;: \u0026#34;myapp\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;http://localhost:6789/superapp.js\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;backend\u0026#34;: \u0026#34;http://someserver:1234\u0026#34;, \u0026#34;myconfig\u0026#34;: \u0026#34;is awesome\u0026#34; } } ] }  Phoenix extension points  Note: For an up to date list check out the phoenix documentation.\n Several ones available:\nPhoenix core  App switcher (defined in config.json) App container (loads UI of your extension)  Files app  File action Create new file action Sidebar Quick access for sidebar inside of file actions (in the file row)  Example of a file action in the app.js:\nconst appInfo = { name: \u0026#39;MarkdownEditor\u0026#39;, id: \u0026#39;markdown-editor\u0026#39;, icon: \u0026#39;text\u0026#39;, isFileEditor: true, extensions: [{ extension: \u0026#39;txt\u0026#39;, newFileMenu: { menuTitle ($gettext) { return $gettext(\u0026#39;Create new plain text file…\u0026#39;) } } }, { extension: \u0026#39;md\u0026#39;, newFileMenu: { menuTitle ($gettext) { return $gettext(\u0026#39;Create new mark-down file…\u0026#39;) } } }] }  For the side bar have a look at the files app, defaults.js \u0026amp; fileSideBars\nAPI driven development Until now we only had a look at the ui and how the extensions are managed on the cli. But how do apps actually talk to the server?\nShort answer: any way you like\nLong answer: micro and ocis-hello follow a protocol driven development:\n specify the API using protobuf generate client and server code evolve based on the protocol\n CS3 api uses protobuf as well and uses GRPC\n ocis uses go-micro, which provides http and grpc gateways\n the gateways and protocols are optional\n owncloud and kopano are looking into a MS graph like api to handle phoenix requests.\n they might be about user, contacrs, calendars \u0026hellip; which is covered by the graph api we want to integrate with eg. kopano and provide a commen api (file sync and share is covered as well)  as an example for protobuf take a look at ocis-hello\n  "});index.add({'id':27,'href':'/extensions/ocis_glauth/license/','title':"License",'content':"This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.\n"});index.add({'id':28,'href':'/extensions/ocis_phoenix/license/','title':"License",'content':"This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.\n"});index.add({'id':29,'href':'/extensions/ocis_reva/license/','title':"License",'content':"This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.\n"});index.add({'id':30,'href':'/ocis/building/','title':"Building",'content':" As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go \u0026gt;= v1.13. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis.git cd ocis All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile.\nSimple Ocis Building the simple ocis binary:\nTAGS=simple make build The artifact lives in /bin/ocis\nThe generated simple ocis binary is a subset of the ocis command with a restricted set of services meant for ease up development. The services included are\nocis-hello phoenix konnectd devldap micro's own services  Backend make generate make build Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis -h to see all available options.\n"});index.add({'id':31,'href':'/extensions/ocis_hello/license/','title':"License",'content':"This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.\n"});index.add({'id':32,'href':'/ocis/license/','title':"License",'content':"This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.\n"});index.add({'id':33,'href':'/','title':"Documentation",'content':"Developer docs for ownCloud Infinite Scale.\n"});index.add({'id':34,'href':'/extensions/ocis_konnectd/','title':"Konnectd",'content':"This service provides an OpenID Connect provider which is the default way to authenticate in OCIS.\n"});index.add({'id':35,'href':'/extensions/ocis_proxy/','title':"Proxy",'content':"This service provides a basic proxy in front of the public ocis services.\n"});index.add({'id':36,'href':'/extensions/ocis_hello/','title':"Hello",'content':"\nThis service provides a simple hello world example API to show the integration of custom plugins within Phoenix.\n"});index.add({'id':37,'href':'/categories/','title':"Categories",'content':""});index.add({'id':38,'href':'/extensions/','title':"Extensions",'content':""});index.add({'id':39,'href':'/tags/','title':"Tags",'content':""});})();