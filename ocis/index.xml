<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Infinite Scale on ownCloud</title>
    <link>https://owncloud.github.io/ocis/</link>
    <description>Recent content in Infinite Scale on ownCloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Feb 2020 20:35:00 +0100</lastBuildDate>
    
	<atom:link href="https://owncloud.github.io/ocis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/ocis/getting-started/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/getting-started/</guid>
      <description>Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.
Docker Docker images for ocis are hosted on https://hub.docker.com/r/owncloud/ocis.
The latest tag always reflects the current master branch.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/ocis/configuration/</link>
      <pubDate>Tue, 14 Apr 2020 22:00:52 +0200</pubDate>
      
      <guid>https://owncloud.github.io/ocis/configuration/</guid>
      <description>Configuration oCIS Single Binary is not responsible for configuring extensions. Instead, each extension could either be configured by environment variables, cli flags or config files.
Each extension has its dedicated documentation page (e.g. https://owncloud.github.io/extensions/ocis_proxy/configuration) which lists all possible configurations. Config files and environment variables are picked up if you use the ./bin/ocis server command within the oCIS single binary. Command line flags must be set explicitly on the extensions subcommands.</description>
    </item>
    
    <item>
      <title>Bridge</title>
      <link>https://owncloud.github.io/ocis/bridge/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/bridge/</guid>
      <description>We are planning to build a bridge from ownCloud 10 to ocis. The idea is to have a reverse proxy infront of ownCloud 10 that will forward requests to ownCloud 10 or ocis-reva, depending on the migration status of the logged in user.
This document is a work in progress of the current setup.
Current status Using ocis and the ownCloud 10 openidconnect and graphapi plugins it is possible today to introduce openid connect based authentication to existing instances.</description>
    </item>
    
    <item>
      <title>EOS</title>
      <link>https://owncloud.github.io/ocis/eos/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/eos/</guid>
      <description>OCIS can be configured to run on top of eos. While the eos documentation does cover a lot of topics it leaves out some details that you may have to either pull from various docker containers, the forums or even the source itself.
This document is a work in progress of the current setup.
Current status Using ocis and eos it is possible today to manage folders. Sharing is heavily under development.</description>
    </item>
    
    <item>
      <title>Extension</title>
      <link>https://owncloud.github.io/ocis/extensions/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/extensions/</guid>
      <description>How to build and run ocis-simple ocis uses build tags to build different flavors of the binary. In order to work on a new extension we are going to reduce the scope a little and use the simple tag. Let us begin by creating a dedicated folder:
mkdir ocis-extension-workshop &amp;amp;&amp;amp; ocis-extension-workshop Following https://github.com/owncloud/ocis
git clone https://github.com/owncloud/ocis.git cd ocis TAGS=simple make generate build Q: Can you specify which version of phoenix to use?</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>https://owncloud.github.io/ocis/debugging/</link>
      <pubDate>Thu, 19 Mar 2020 08:21:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/debugging/</guid>
      <description>Debugging As a single binary for easy deployment running ocis server just forks itself to start all the services, which makes debugging those processes a little harder.
Ultimately, we want to be able to stop a single service using eg. ocis kill phoenix so that you can start the service you want to debug in debug mode. We need to change the way we fork processes though, otherwise the runtime will automatically restart a service if killed.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.github.io/ocis/building/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/building/</guid>
      <description>As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go &amp;gt;= v1.13. After the installation of the required tools you need to get the sources:
git clone https://github.com/owncloud/ocis.git cd ocis All required tools besides Go itself and make are bundled or getting automatically installed within the GOPATH.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://owncloud.github.io/ocis/license/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/license/</guid>
      <description>This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.</description>
    </item>
    
  </channel>
</rss>